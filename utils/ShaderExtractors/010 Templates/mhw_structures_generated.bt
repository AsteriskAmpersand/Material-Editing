#define row_major

typedef struct float4{
    float a[4];
};
typedef struct float3{
    float a[3];
};
typedef struct float2{
    float a[2];
};
typedef struct float4x4{
    float a[4*4];
};
typedef struct float3x4{
    float a[3*4];
};
typedef struct uint2{
    uint a[2];
};
typedef struct uint3{
    uint a[3];
};
typedef struct uint4{
    uint a[4];
};
typedef struct int2{
    int a[2];
};
typedef struct int3{
    int a[3];
};
typedef struct int4{
    int a[4];
};
typedef struct uint4x4{
    uint a[16];
};
typedef struct bool2{
    uint a[2];
};
typedef struct bool3{
    uint a[3];
};
typedef uint bool;
struct CBViewFrustum;
struct CBMhMaterialUberLocal__disclosure;
struct CBToneMappingSdrSim;
struct CBWaterMaterial;
struct CBMhMaterialVfxTornadoLocal__disclosure;
struct CBMhMaterialIvyFloorLocal__disclosure;
struct CBDevelopColorPick;
struct CBPrimGpuSystem;
struct CBRadialBlurFunction;
struct CBMhMaterialNPCFaceLocal__disclosure;
struct CBMhMaterialVfxWaveLocal__disclosure;
struct CBMhMaterialNPCHairLocal__disclosure;
struct CBMhMaterialFakeLensLocal__disclosure;
struct CBGUIDevelop;
struct CBCubeBlend;
struct CBMhMaterialEMLocal__disclosure;
struct CBMaterialCommon__disclosure;
struct CBGlobalIllumination;
struct CBMhMaterialEM117Local__disclosure;
struct CBMhMaterialPLLocal__disclosure;
struct CBSpeedTreePrimitiveInfo;
struct CBMhMaterialEM100Local__disclosure;
struct CBOutline;
struct SeaDisplacement;
struct CBBitonicSort;
struct CBStarrySky;
struct CBMhMaterialVfxWaterLocal__disclosure;
struct CBPartialColor;
struct CBMhMaterialFlowLavaLocal__disclosure;
struct CBVRCompute;
struct CBSSSSS_Profile;
struct CBConstant;
struct CBViewProjection;
struct CBMhMaterialFlowDirLocal__disclosure;
struct CBLGTPRBDebug;
struct CBVRCommon;
struct CB_CombinedFilter_ImagePlane;
struct CBFilter2;
struct CBPrimSystem;
struct CBLuminance;
struct CBMhMaterialPLEditFaceLocal__disclosure;
struct CBMhMaterialNPCEditFaceLocal__disclosure;
struct CBMhMaterialStdLocal__disclosure;
struct CBGaussian;
struct CBRadialBlurFilter;
struct CBGodRaysConfiguration;
struct CBNormalMerge;
struct CBMhMaterialEC021Local__disclosure;
struct CBVRGaussian;
struct CBInstancing;
struct CBColorCorrectToneCurve;
struct CBMhMaterialLandscapeFlowLocal__disclosure;
struct CBMhMaterialEM103Local__disclosure;
struct CBFilter;
struct CBMhMaterialSpeedTreeStdBlendLocal__disclosure;
struct CBSSSSS;
struct CBRenderFrame;
struct CBMhSkyPS;
struct CBSystem;
struct CBPick;
struct CBSky;
struct CBGUIGlobal;
struct CBLUTMaking;
struct CBNormalRecalc;
struct CBConstantHaltonSequence;
struct CBSpeedTreeLocalWindPF;
struct CBGUIGBuffer;
struct CBPrimCopyState;
struct CBMhMaterialVfxWave;
struct CBTestLight;
struct CBSSLR;
struct CBGUIIcon;
struct CBResample;
struct CBMhDecal;
struct CBMhMaterialFakeRefractionLocal__disclosure;
struct CBFog;
struct CBVRRecompute;
struct CBLuminanceDebugDisp;
struct CBLGTPRBGen;
struct CBMhMaterialStdBlendLocal__disclosure;
struct CBMotionBlur;
struct CBAmbientOccluder;
struct CBLightProbes;
struct CBSpeedTreeGlobalWind;
struct CBMhMaterialLandscapeLocal__disclosure;
struct CBMhSkyVS;
struct CBHermiteCurveRGB;
struct CBMhMaterialEM002Local__disclosure;
struct CBSpeedTree;
struct CBImagePlane2;
struct CBMhMaterialNikuLocal__disclosure;
struct CBMhMaterialVfxDispWaveLocal__disclosure;
struct CBWaterPick;
struct CBPrimitiveDebug;
struct CBSystemColor;
struct CBAmbientOcclusion;
struct CB_TemporalAA;
struct CBMhMaterialSpeedTreeStdLocal__disclosure;
struct CBBokehComposite;
struct CBLightParameters;
struct CBMhMaterialEM102Local__disclosure;
struct CBImagePlane;
struct CBPrimitiveEx;
struct CBMhMaterialNPCEyeLocal__disclosure;
struct CBMhMaterialFlagWaveLocal__disclosure;
struct CBMhMaterialVfxDebufBodyLocal__disclosure;
struct CBLUTBlending;
struct CBPrimitive;
struct CBErrorUnit;
struct CBWaterWaveMaterial;
struct CBScreen;
struct CBDecalCommon;
struct CBDebug;
struct CBColorCorrectCube;
struct CBMhDecalSM;
struct CBMhMaterial_EM105_EVCLocal__disclosure;
struct CBMhMaterialEM115Local__disclosure;
struct CBHeightToNormal;
struct CBMhMaterialPLHairLocal__disclosure;
struct CBSpeedTreeGlobalWindPF;
struct CBVRVolumeParams;
struct CB_BGTexture;
struct CBHermiteCurve;
struct CBMhMaterialScrWaterLocal__disclosure;
struct CBTubeLight;
struct CBModel;
struct CBGUIDistanceField;
struct CBLight;
struct CBMhMaterialGlobal;
struct CBMhMaterialFurLocal__disclosure;
struct CBMhMaterialNPCLocal__disclosure;
struct CBMhMaterialFakeInnerEmitLocal__disclosure;
struct CBNewDOFFilter;
struct CBMhMaterialEM011Local__disclosure;
struct CBCSClear;
struct CBROPTest;
struct CBMhMaterialSimpleLocal__disclosure;
struct CBMhMaterialNPCSkinLocal__disclosure;
struct CBMhSky2GBuffer;
struct CBHazeFilter;
struct CBDOFFilter;
struct CBGodRaysFilter;
struct CBMhMaterialIvyFloor;
struct CBVRFilter;
struct CBDecal;
struct CBPrimVertexOffset;
struct CBMhEmissiveFog__disclosure;
struct CBMhMaterialPLEyeLocal__disclosure;
struct CBMhMaterialEM105Local__disclosure;
struct CBMhSkyGBuffer;
struct CB_CombinedFilter_ColorCorrect;
struct CBLightShaft;
struct CBMhMaterialEM024Local__disclosure;
struct CBWaterCustom;
struct CBMhMaterialEM036Local__disclosure;
struct CBMhMaterialVfxFloodLocal__disclosure;
struct CBBloom;
struct CBMhMaterialBurnLocal__disclosure;
struct CBPrimMaterialOffset;
struct CBToneMapping;
struct CBMhMaterialEM106Local__disclosure;
struct CBMhMaterialVfxFakeInnerLocal__disclosure;
struct CBCubeCopy;
struct CBComputeSkinning;
struct CBWaterModel;
struct CBWaterWave;
struct CBDevelopFlags;
struct CBMhMaterialVfxDistDispLocal__disclosure;
struct CBMaterialDebug;
struct CBMhMaterialEMGlobal;
struct CBVR_Debug;
struct CBMhSky2PS;
struct CBMhMaterialPLSkinLocal__disclosure;
struct CBVignetting;
struct CB_PlantOnSurface;
struct CBMhMaterialEM111Local__disclosure;
struct CBAtmosphere;
struct CBSHDiffuse;
struct CBWaterDebug;
struct CBMhMaterialEM118Local__disclosure;
struct CBMhMaterialVfxSandFallLocal__disclosure;
struct CBMhMaterialEMSLocal__disclosure;
struct CBMhMaterialFakeEyeLocal__disclosure;
struct CB_TemporalAA2;
struct CBWater;
struct CBPrimitivePick;
struct CBColorCorrect;
struct CBMotionBlurReconstruction;
struct CBTest;
struct pix_clear_constants;
struct CBFXAAParam;
struct CBGUINoiseAndFade;
struct CBMhSky2VS;
struct CBSpeedTreeLocalWind;
struct CB_CombinedFilter;
struct CBNewDOFFilter2;
struct CBSpeedTreeSystem;
struct CBMhMaterialFakeSphereLocal__disclosure;
struct CBMhMaterialEM044Local__disclosure;
struct CBMhSky2Sun;
struct CBSpeedTreeCollision__disclosure;
struct CBMhSkyLpPS;
struct CBDepthColor;
struct CBLightShaft_LightParam;
struct CBMhMaterialEM109Local__disclosure;
struct CBGodRaysIterator;
struct CBMhMaterialVfxDistDispWLocal__disclosure;
struct CBBloomSample;
struct CBPrimitiveMetaDataOcclusion;

void createClassByHash(uint i){
    
   if(i == (crcCBViewFrustum & 0xFFFFF)){
                    CBViewFrustum dataCBViewFrustum<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBMhMaterialUberLocal__disclosure & 0xFFFFF)){
                    CBMhMaterialUberLocal__disclosure dataCBMhMaterialUberLocal__disclosure<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBToneMappingSdrSim & 0xFFFFF)){
                    CBToneMappingSdrSim dataCBToneMappingSdrSim<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBWaterMaterial & 0xFFFFF)){
                    CBWaterMaterial dataCBWaterMaterial<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBMhMaterialVfxTornadoLocal__disclosure & 0xFFFFF)){
                    CBMhMaterialVfxTornadoLocal__disclosure dataCBMhMaterialVfxTornadoLocal__disclosure<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBMhMaterialIvyFloorLocal__disclosure & 0xFFFFF)){
                    CBMhMaterialIvyFloorLocal__disclosure dataCBMhMaterialIvyFloorLocal__disclosure<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBDevelopColorPick & 0xFFFFF)){
                    CBDevelopColorPick dataCBDevelopColorPick<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBPrimGpuSystem & 0xFFFFF)){
                    CBPrimGpuSystem dataCBPrimGpuSystem<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBRadialBlurFunction & 0xFFFFF)){
                    CBRadialBlurFunction dataCBRadialBlurFunction<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBMhMaterialNPCFaceLocal__disclosure & 0xFFFFF)){
                    CBMhMaterialNPCFaceLocal__disclosure dataCBMhMaterialNPCFaceLocal__disclosure<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBMhMaterialVfxWaveLocal__disclosure & 0xFFFFF)){
                    CBMhMaterialVfxWaveLocal__disclosure dataCBMhMaterialVfxWaveLocal__disclosure<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBMhMaterialNPCHairLocal__disclosure & 0xFFFFF)){
                    CBMhMaterialNPCHairLocal__disclosure dataCBMhMaterialNPCHairLocal__disclosure<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBMhMaterialFakeLensLocal__disclosure & 0xFFFFF)){
                    CBMhMaterialFakeLensLocal__disclosure dataCBMhMaterialFakeLensLocal__disclosure<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBGUIDevelop & 0xFFFFF)){
                    CBGUIDevelop dataCBGUIDevelop<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBCubeBlend & 0xFFFFF)){
                    CBCubeBlend dataCBCubeBlend<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBMhMaterialEMLocal__disclosure & 0xFFFFF)){
                    CBMhMaterialEMLocal__disclosure dataCBMhMaterialEMLocal__disclosure<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBMaterialCommon__disclosure & 0xFFFFF)){
                    CBMaterialCommon__disclosure dataCBMaterialCommon__disclosure<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBGlobalIllumination & 0xFFFFF)){
                    CBGlobalIllumination dataCBGlobalIllumination<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBMhMaterialEM117Local__disclosure & 0xFFFFF)){
                    CBMhMaterialEM117Local__disclosure dataCBMhMaterialEM117Local__disclosure<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBMhMaterialPLLocal__disclosure & 0xFFFFF)){
                    CBMhMaterialPLLocal__disclosure dataCBMhMaterialPLLocal__disclosure<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBSpeedTreePrimitiveInfo & 0xFFFFF)){
                    CBSpeedTreePrimitiveInfo dataCBSpeedTreePrimitiveInfo<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBMhMaterialEM100Local__disclosure & 0xFFFFF)){
                    CBMhMaterialEM100Local__disclosure dataCBMhMaterialEM100Local__disclosure<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBOutline & 0xFFFFF)){
                    CBOutline dataCBOutline<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcSeaDisplacement & 0xFFFFF)){
                    SeaDisplacement dataSeaDisplacement<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBBitonicSort & 0xFFFFF)){
                    CBBitonicSort dataCBBitonicSort<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBStarrySky & 0xFFFFF)){
                    CBStarrySky dataCBStarrySky<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBMhMaterialVfxWaterLocal__disclosure & 0xFFFFF)){
                    CBMhMaterialVfxWaterLocal__disclosure dataCBMhMaterialVfxWaterLocal__disclosure<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBPartialColor & 0xFFFFF)){
                    CBPartialColor dataCBPartialColor<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBMhMaterialFlowLavaLocal__disclosure & 0xFFFFF)){
                    CBMhMaterialFlowLavaLocal__disclosure dataCBMhMaterialFlowLavaLocal__disclosure<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBVRCompute & 0xFFFFF)){
                    CBVRCompute dataCBVRCompute<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBSSSSS_Profile & 0xFFFFF)){
                    CBSSSSS_Profile dataCBSSSSS_Profile<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBConstant & 0xFFFFF)){
                    CBConstant dataCBConstant<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBViewProjection & 0xFFFFF)){
                    CBViewProjection dataCBViewProjection<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBMhMaterialFlowDirLocal__disclosure & 0xFFFFF)){
                    CBMhMaterialFlowDirLocal__disclosure dataCBMhMaterialFlowDirLocal__disclosure<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBLGTPRBDebug & 0xFFFFF)){
                    CBLGTPRBDebug dataCBLGTPRBDebug<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBVRCommon & 0xFFFFF)){
                    CBVRCommon dataCBVRCommon<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCB_CombinedFilter_ImagePlane & 0xFFFFF)){
                    CB_CombinedFilter_ImagePlane dataCB_CombinedFilter_ImagePlane<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBFilter2 & 0xFFFFF)){
                    CBFilter2 dataCBFilter2<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBPrimSystem & 0xFFFFF)){
                    CBPrimSystem dataCBPrimSystem<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBLuminance & 0xFFFFF)){
                    CBLuminance dataCBLuminance<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBMhMaterialPLEditFaceLocal__disclosure & 0xFFFFF)){
                    CBMhMaterialPLEditFaceLocal__disclosure dataCBMhMaterialPLEditFaceLocal__disclosure<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBMhMaterialNPCEditFaceLocal__disclosure & 0xFFFFF)){
                    CBMhMaterialNPCEditFaceLocal__disclosure dataCBMhMaterialNPCEditFaceLocal__disclosure<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBMhMaterialStdLocal__disclosure & 0xFFFFF)){
                    CBMhMaterialStdLocal__disclosure dataCBMhMaterialStdLocal__disclosure<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBGaussian & 0xFFFFF)){
                    CBGaussian dataCBGaussian<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBRadialBlurFilter & 0xFFFFF)){
                    CBRadialBlurFilter dataCBRadialBlurFilter<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBGodRaysConfiguration & 0xFFFFF)){
                    CBGodRaysConfiguration dataCBGodRaysConfiguration<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBNormalMerge & 0xFFFFF)){
                    CBNormalMerge dataCBNormalMerge<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBMhMaterialEC021Local__disclosure & 0xFFFFF)){
                    CBMhMaterialEC021Local__disclosure dataCBMhMaterialEC021Local__disclosure<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBVRGaussian & 0xFFFFF)){
                    CBVRGaussian dataCBVRGaussian<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBInstancing & 0xFFFFF)){
                    CBInstancing dataCBInstancing<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBColorCorrectToneCurve & 0xFFFFF)){
                    CBColorCorrectToneCurve dataCBColorCorrectToneCurve<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBMhMaterialLandscapeFlowLocal__disclosure & 0xFFFFF)){
                    CBMhMaterialLandscapeFlowLocal__disclosure dataCBMhMaterialLandscapeFlowLocal__disclosure<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBMhMaterialEM103Local__disclosure & 0xFFFFF)){
                    CBMhMaterialEM103Local__disclosure dataCBMhMaterialEM103Local__disclosure<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBFilter & 0xFFFFF)){
                    CBFilter dataCBFilter<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBMhMaterialSpeedTreeStdBlendLocal__disclosure & 0xFFFFF)){
                    CBMhMaterialSpeedTreeStdBlendLocal__disclosure dataCBMhMaterialSpeedTreeStdBlendLocal__disclosure<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBSSSSS & 0xFFFFF)){
                    CBSSSSS dataCBSSSSS<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBRenderFrame & 0xFFFFF)){
                    CBRenderFrame dataCBRenderFrame<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBMhSkyPS & 0xFFFFF)){
                    CBMhSkyPS dataCBMhSkyPS<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBSystem & 0xFFFFF)){
                    CBSystem dataCBSystem<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBPick & 0xFFFFF)){
                    CBPick dataCBPick<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBSky & 0xFFFFF)){
                    CBSky dataCBSky<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBGUIGlobal & 0xFFFFF)){
                    CBGUIGlobal dataCBGUIGlobal<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBLUTMaking & 0xFFFFF)){
                    CBLUTMaking dataCBLUTMaking<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBNormalRecalc & 0xFFFFF)){
                    CBNormalRecalc dataCBNormalRecalc<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBConstantHaltonSequence & 0xFFFFF)){
                    CBConstantHaltonSequence dataCBConstantHaltonSequence<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBSpeedTreeLocalWindPF & 0xFFFFF)){
                    CBSpeedTreeLocalWindPF dataCBSpeedTreeLocalWindPF<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBGUIGBuffer & 0xFFFFF)){
                    CBGUIGBuffer dataCBGUIGBuffer<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBPrimCopyState & 0xFFFFF)){
                    CBPrimCopyState dataCBPrimCopyState<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBMhMaterialVfxWave & 0xFFFFF)){
                    CBMhMaterialVfxWave dataCBMhMaterialVfxWave<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBTestLight & 0xFFFFF)){
                    CBTestLight dataCBTestLight<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBSSLR & 0xFFFFF)){
                    CBSSLR dataCBSSLR<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBGUIIcon & 0xFFFFF)){
                    CBGUIIcon dataCBGUIIcon<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBResample & 0xFFFFF)){
                    CBResample dataCBResample<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBMhDecal & 0xFFFFF)){
                    CBMhDecal dataCBMhDecal<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBMhMaterialFakeRefractionLocal__disclosure & 0xFFFFF)){
                    CBMhMaterialFakeRefractionLocal__disclosure dataCBMhMaterialFakeRefractionLocal__disclosure<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBFog & 0xFFFFF)){
                    CBFog dataCBFog<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBVRRecompute & 0xFFFFF)){
                    CBVRRecompute dataCBVRRecompute<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBLuminanceDebugDisp & 0xFFFFF)){
                    CBLuminanceDebugDisp dataCBLuminanceDebugDisp<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBLGTPRBGen & 0xFFFFF)){
                    CBLGTPRBGen dataCBLGTPRBGen<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBMhMaterialStdBlendLocal__disclosure & 0xFFFFF)){
                    CBMhMaterialStdBlendLocal__disclosure dataCBMhMaterialStdBlendLocal__disclosure<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBMotionBlur & 0xFFFFF)){
                    CBMotionBlur dataCBMotionBlur<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBAmbientOccluder & 0xFFFFF)){
                    CBAmbientOccluder dataCBAmbientOccluder<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBLightProbes & 0xFFFFF)){
                    CBLightProbes dataCBLightProbes<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBSpeedTreeGlobalWind & 0xFFFFF)){
                    CBSpeedTreeGlobalWind dataCBSpeedTreeGlobalWind<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBMhMaterialLandscapeLocal__disclosure & 0xFFFFF)){
                    CBMhMaterialLandscapeLocal__disclosure dataCBMhMaterialLandscapeLocal__disclosure<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBMhSkyVS & 0xFFFFF)){
                    CBMhSkyVS dataCBMhSkyVS<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBHermiteCurveRGB & 0xFFFFF)){
                    CBHermiteCurveRGB dataCBHermiteCurveRGB<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBMhMaterialEM002Local__disclosure & 0xFFFFF)){
                    CBMhMaterialEM002Local__disclosure dataCBMhMaterialEM002Local__disclosure<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBSpeedTree & 0xFFFFF)){
                    CBSpeedTree dataCBSpeedTree<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBImagePlane2 & 0xFFFFF)){
                    CBImagePlane2 dataCBImagePlane2<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBMhMaterialNikuLocal__disclosure & 0xFFFFF)){
                    CBMhMaterialNikuLocal__disclosure dataCBMhMaterialNikuLocal__disclosure<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBMhMaterialVfxDispWaveLocal__disclosure & 0xFFFFF)){
                    CBMhMaterialVfxDispWaveLocal__disclosure dataCBMhMaterialVfxDispWaveLocal__disclosure<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBWaterPick & 0xFFFFF)){
                    CBWaterPick dataCBWaterPick<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBPrimitiveDebug & 0xFFFFF)){
                    CBPrimitiveDebug dataCBPrimitiveDebug<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBSystemColor & 0xFFFFF)){
                    CBSystemColor dataCBSystemColor<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBAmbientOcclusion & 0xFFFFF)){
                    CBAmbientOcclusion dataCBAmbientOcclusion<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCB_TemporalAA & 0xFFFFF)){
                    CB_TemporalAA dataCB_TemporalAA<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBMhMaterialSpeedTreeStdLocal__disclosure & 0xFFFFF)){
                    CBMhMaterialSpeedTreeStdLocal__disclosure dataCBMhMaterialSpeedTreeStdLocal__disclosure<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBBokehComposite & 0xFFFFF)){
                    CBBokehComposite dataCBBokehComposite<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBLightParameters & 0xFFFFF)){
                    CBLightParameters dataCBLightParameters<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBMhMaterialEM102Local__disclosure & 0xFFFFF)){
                    CBMhMaterialEM102Local__disclosure dataCBMhMaterialEM102Local__disclosure<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBImagePlane & 0xFFFFF)){
                    CBImagePlane dataCBImagePlane<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBPrimitiveEx & 0xFFFFF)){
                    CBPrimitiveEx dataCBPrimitiveEx<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBMhMaterialNPCEyeLocal__disclosure & 0xFFFFF)){
                    CBMhMaterialNPCEyeLocal__disclosure dataCBMhMaterialNPCEyeLocal__disclosure<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBMhMaterialFlagWaveLocal__disclosure & 0xFFFFF)){
                    CBMhMaterialFlagWaveLocal__disclosure dataCBMhMaterialFlagWaveLocal__disclosure<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBMhMaterialVfxDebufBodyLocal__disclosure & 0xFFFFF)){
                    CBMhMaterialVfxDebufBodyLocal__disclosure dataCBMhMaterialVfxDebufBodyLocal__disclosure<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBLUTBlending & 0xFFFFF)){
                    CBLUTBlending dataCBLUTBlending<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBPrimitive & 0xFFFFF)){
                    CBPrimitive dataCBPrimitive<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBErrorUnit & 0xFFFFF)){
                    CBErrorUnit dataCBErrorUnit<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBWaterWaveMaterial & 0xFFFFF)){
                    CBWaterWaveMaterial dataCBWaterWaveMaterial<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBScreen & 0xFFFFF)){
                    CBScreen dataCBScreen<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBDecalCommon & 0xFFFFF)){
                    CBDecalCommon dataCBDecalCommon<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBDebug & 0xFFFFF)){
                    CBDebug dataCBDebug<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBColorCorrectCube & 0xFFFFF)){
                    CBColorCorrectCube dataCBColorCorrectCube<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBMhDecalSM & 0xFFFFF)){
                    CBMhDecalSM dataCBMhDecalSM<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBMhMaterial_EM105_EVCLocal__disclosure & 0xFFFFF)){
                    CBMhMaterial_EM105_EVCLocal__disclosure dataCBMhMaterial_EM105_EVCLocal__disclosure<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBMhMaterialEM115Local__disclosure & 0xFFFFF)){
                    CBMhMaterialEM115Local__disclosure dataCBMhMaterialEM115Local__disclosure<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBHeightToNormal & 0xFFFFF)){
                    CBHeightToNormal dataCBHeightToNormal<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBMhMaterialPLHairLocal__disclosure & 0xFFFFF)){
                    CBMhMaterialPLHairLocal__disclosure dataCBMhMaterialPLHairLocal__disclosure<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBSpeedTreeGlobalWindPF & 0xFFFFF)){
                    CBSpeedTreeGlobalWindPF dataCBSpeedTreeGlobalWindPF<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBVRVolumeParams & 0xFFFFF)){
                    CBVRVolumeParams dataCBVRVolumeParams<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCB_BGTexture & 0xFFFFF)){
                    CB_BGTexture dataCB_BGTexture<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBHermiteCurve & 0xFFFFF)){
                    CBHermiteCurve dataCBHermiteCurve<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBMhMaterialScrWaterLocal__disclosure & 0xFFFFF)){
                    CBMhMaterialScrWaterLocal__disclosure dataCBMhMaterialScrWaterLocal__disclosure<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBTubeLight & 0xFFFFF)){
                    CBTubeLight dataCBTubeLight<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBModel & 0xFFFFF)){
                    CBModel dataCBModel<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBGUIDistanceField & 0xFFFFF)){
                    CBGUIDistanceField dataCBGUIDistanceField<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBLight & 0xFFFFF)){
                    CBLight dataCBLight<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBMhMaterialGlobal & 0xFFFFF)){
                    CBMhMaterialGlobal dataCBMhMaterialGlobal<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBMhMaterialFurLocal__disclosure & 0xFFFFF)){
                    CBMhMaterialFurLocal__disclosure dataCBMhMaterialFurLocal__disclosure<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBMhMaterialNPCLocal__disclosure & 0xFFFFF)){
                    CBMhMaterialNPCLocal__disclosure dataCBMhMaterialNPCLocal__disclosure<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBMhMaterialFakeInnerEmitLocal__disclosure & 0xFFFFF)){
                    CBMhMaterialFakeInnerEmitLocal__disclosure dataCBMhMaterialFakeInnerEmitLocal__disclosure<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBNewDOFFilter & 0xFFFFF)){
                    CBNewDOFFilter dataCBNewDOFFilter<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBMhMaterialEM011Local__disclosure & 0xFFFFF)){
                    CBMhMaterialEM011Local__disclosure dataCBMhMaterialEM011Local__disclosure<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBCSClear & 0xFFFFF)){
                    CBCSClear dataCBCSClear<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBROPTest & 0xFFFFF)){
                    CBROPTest dataCBROPTest<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBMhMaterialSimpleLocal__disclosure & 0xFFFFF)){
                    CBMhMaterialSimpleLocal__disclosure dataCBMhMaterialSimpleLocal__disclosure<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBMhMaterialNPCSkinLocal__disclosure & 0xFFFFF)){
                    CBMhMaterialNPCSkinLocal__disclosure dataCBMhMaterialNPCSkinLocal__disclosure<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBMhSky2GBuffer & 0xFFFFF)){
                    CBMhSky2GBuffer dataCBMhSky2GBuffer<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBHazeFilter & 0xFFFFF)){
                    CBHazeFilter dataCBHazeFilter<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBDOFFilter & 0xFFFFF)){
                    CBDOFFilter dataCBDOFFilter<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBGodRaysFilter & 0xFFFFF)){
                    CBGodRaysFilter dataCBGodRaysFilter<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBMhMaterialIvyFloor & 0xFFFFF)){
                    CBMhMaterialIvyFloor dataCBMhMaterialIvyFloor<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBVRFilter & 0xFFFFF)){
                    CBVRFilter dataCBVRFilter<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBDecal & 0xFFFFF)){
                    CBDecal dataCBDecal<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBPrimVertexOffset & 0xFFFFF)){
                    CBPrimVertexOffset dataCBPrimVertexOffset<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBMhEmissiveFog__disclosure & 0xFFFFF)){
                    CBMhEmissiveFog__disclosure dataCBMhEmissiveFog__disclosure<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBMhMaterialPLEyeLocal__disclosure & 0xFFFFF)){
                    CBMhMaterialPLEyeLocal__disclosure dataCBMhMaterialPLEyeLocal__disclosure<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBMhMaterialEM105Local__disclosure & 0xFFFFF)){
                    CBMhMaterialEM105Local__disclosure dataCBMhMaterialEM105Local__disclosure<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBMhSkyGBuffer & 0xFFFFF)){
                    CBMhSkyGBuffer dataCBMhSkyGBuffer<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCB_CombinedFilter_ColorCorrect & 0xFFFFF)){
                    CB_CombinedFilter_ColorCorrect dataCB_CombinedFilter_ColorCorrect<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBLightShaft & 0xFFFFF)){
                    CBLightShaft dataCBLightShaft<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBMhMaterialEM024Local__disclosure & 0xFFFFF)){
                    CBMhMaterialEM024Local__disclosure dataCBMhMaterialEM024Local__disclosure<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBWaterCustom & 0xFFFFF)){
                    CBWaterCustom dataCBWaterCustom<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBMhMaterialEM036Local__disclosure & 0xFFFFF)){
                    CBMhMaterialEM036Local__disclosure dataCBMhMaterialEM036Local__disclosure<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBMhMaterialVfxFloodLocal__disclosure & 0xFFFFF)){
                    CBMhMaterialVfxFloodLocal__disclosure dataCBMhMaterialVfxFloodLocal__disclosure<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBBloom & 0xFFFFF)){
                    CBBloom dataCBBloom<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBMhMaterialBurnLocal__disclosure & 0xFFFFF)){
                    CBMhMaterialBurnLocal__disclosure dataCBMhMaterialBurnLocal__disclosure<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBPrimMaterialOffset & 0xFFFFF)){
                    CBPrimMaterialOffset dataCBPrimMaterialOffset<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBToneMapping & 0xFFFFF)){
                    CBToneMapping dataCBToneMapping<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBMhMaterialEM106Local__disclosure & 0xFFFFF)){
                    CBMhMaterialEM106Local__disclosure dataCBMhMaterialEM106Local__disclosure<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBMhMaterialVfxFakeInnerLocal__disclosure & 0xFFFFF)){
                    CBMhMaterialVfxFakeInnerLocal__disclosure dataCBMhMaterialVfxFakeInnerLocal__disclosure<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBCubeCopy & 0xFFFFF)){
                    CBCubeCopy dataCBCubeCopy<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBComputeSkinning & 0xFFFFF)){
                    CBComputeSkinning dataCBComputeSkinning<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBWaterModel & 0xFFFFF)){
                    CBWaterModel dataCBWaterModel<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBWaterWave & 0xFFFFF)){
                    CBWaterWave dataCBWaterWave<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBDevelopFlags & 0xFFFFF)){
                    CBDevelopFlags dataCBDevelopFlags<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBMhMaterialVfxDistDispLocal__disclosure & 0xFFFFF)){
                    CBMhMaterialVfxDistDispLocal__disclosure dataCBMhMaterialVfxDistDispLocal__disclosure<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBMaterialDebug & 0xFFFFF)){
                    CBMaterialDebug dataCBMaterialDebug<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBMhMaterialEMGlobal & 0xFFFFF)){
                    CBMhMaterialEMGlobal dataCBMhMaterialEMGlobal<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBVR_Debug & 0xFFFFF)){
                    CBVR_Debug dataCBVR_Debug<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBMhSky2PS & 0xFFFFF)){
                    CBMhSky2PS dataCBMhSky2PS<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBMhMaterialPLSkinLocal__disclosure & 0xFFFFF)){
                    CBMhMaterialPLSkinLocal__disclosure dataCBMhMaterialPLSkinLocal__disclosure<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBVignetting & 0xFFFFF)){
                    CBVignetting dataCBVignetting<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCB_PlantOnSurface & 0xFFFFF)){
                    CB_PlantOnSurface dataCB_PlantOnSurface<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBMhMaterialEM111Local__disclosure & 0xFFFFF)){
                    CBMhMaterialEM111Local__disclosure dataCBMhMaterialEM111Local__disclosure<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBAtmosphere & 0xFFFFF)){
                    CBAtmosphere dataCBAtmosphere<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBSHDiffuse & 0xFFFFF)){
                    CBSHDiffuse dataCBSHDiffuse<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBWaterDebug & 0xFFFFF)){
                    CBWaterDebug dataCBWaterDebug<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBMhMaterialEM118Local__disclosure & 0xFFFFF)){
                    CBMhMaterialEM118Local__disclosure dataCBMhMaterialEM118Local__disclosure<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBMhMaterialVfxSandFallLocal__disclosure & 0xFFFFF)){
                    CBMhMaterialVfxSandFallLocal__disclosure dataCBMhMaterialVfxSandFallLocal__disclosure<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBMhMaterialEMSLocal__disclosure & 0xFFFFF)){
                    CBMhMaterialEMSLocal__disclosure dataCBMhMaterialEMSLocal__disclosure<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBMhMaterialFakeEyeLocal__disclosure & 0xFFFFF)){
                    CBMhMaterialFakeEyeLocal__disclosure dataCBMhMaterialFakeEyeLocal__disclosure<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCB_TemporalAA2 & 0xFFFFF)){
                    CB_TemporalAA2 dataCB_TemporalAA2<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBWater & 0xFFFFF)){
                    CBWater dataCBWater<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBPrimitivePick & 0xFFFFF)){
                    CBPrimitivePick dataCBPrimitivePick<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBColorCorrect & 0xFFFFF)){
                    CBColorCorrect dataCBColorCorrect<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBMotionBlurReconstruction & 0xFFFFF)){
                    CBMotionBlurReconstruction dataCBMotionBlurReconstruction<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBTest & 0xFFFFF)){
                    CBTest dataCBTest<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcpix_clear_constants & 0xFFFFF)){
                    pix_clear_constants datapix_clear_constants<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBFXAAParam & 0xFFFFF)){
                    CBFXAAParam dataCBFXAAParam<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBGUINoiseAndFade & 0xFFFFF)){
                    CBGUINoiseAndFade dataCBGUINoiseAndFade<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBMhSky2VS & 0xFFFFF)){
                    CBMhSky2VS dataCBMhSky2VS<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBSpeedTreeLocalWind & 0xFFFFF)){
                    CBSpeedTreeLocalWind dataCBSpeedTreeLocalWind<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCB_CombinedFilter & 0xFFFFF)){
                    CB_CombinedFilter dataCB_CombinedFilter<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBNewDOFFilter2 & 0xFFFFF)){
                    CBNewDOFFilter2 dataCBNewDOFFilter2<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBSpeedTreeSystem & 0xFFFFF)){
                    CBSpeedTreeSystem dataCBSpeedTreeSystem<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBMhMaterialFakeSphereLocal__disclosure & 0xFFFFF)){
                    CBMhMaterialFakeSphereLocal__disclosure dataCBMhMaterialFakeSphereLocal__disclosure<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBMhMaterialEM044Local__disclosure & 0xFFFFF)){
                    CBMhMaterialEM044Local__disclosure dataCBMhMaterialEM044Local__disclosure<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBMhSky2Sun & 0xFFFFF)){
                    CBMhSky2Sun dataCBMhSky2Sun<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBSpeedTreeCollision__disclosure & 0xFFFFF)){
                    CBSpeedTreeCollision__disclosure dataCBSpeedTreeCollision__disclosure<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBMhSkyLpPS & 0xFFFFF)){
                    CBMhSkyLpPS dataCBMhSkyLpPS<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBDepthColor & 0xFFFFF)){
                    CBDepthColor dataCBDepthColor<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBLightShaft_LightParam & 0xFFFFF)){
                    CBLightShaft_LightParam dataCBLightShaft_LightParam<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBMhMaterialEM109Local__disclosure & 0xFFFFF)){
                    CBMhMaterialEM109Local__disclosure dataCBMhMaterialEM109Local__disclosure<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBGodRaysIterator & 0xFFFFF)){
                    CBGodRaysIterator dataCBGodRaysIterator<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBMhMaterialVfxDistDispWLocal__disclosure & 0xFFFFF)){
                    CBMhMaterialVfxDistDispWLocal__disclosure dataCBMhMaterialVfxDistDispWLocal__disclosure<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBBloomSample & 0xFFFFF)){
                    CBBloomSample dataCBBloomSample<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
   if(i == (crcCBPrimitiveMetaDataOcclusion & 0xFFFFF)){
                    CBPrimitiveMetaDataOcclusion dataCBPrimitiveMetaDataOcclusion<bgcolor=0x00ffaa,optimize=false>;
                    return;
                }
}

local int crcCBViewFrustum<format=hex> = createJamcrc("CBViewFrustum");
local int crcCBMhMaterialUberLocal__disclosure<format=hex> = createJamcrc("CBMhMaterialUberLocal__disclosure");
local int crcCBToneMappingSdrSim<format=hex> = createJamcrc("CBToneMappingSdrSim");
local int crcCBWaterMaterial<format=hex> = createJamcrc("CBWaterMaterial");
local int crcCBMhMaterialVfxTornadoLocal__disclosure<format=hex> = createJamcrc("CBMhMaterialVfxTornadoLocal__disclosure");
local int crcCBMhMaterialIvyFloorLocal__disclosure<format=hex> = createJamcrc("CBMhMaterialIvyFloorLocal__disclosure");
local int crcCBDevelopColorPick<format=hex> = createJamcrc("CBDevelopColorPick");
local int crcCBPrimGpuSystem<format=hex> = createJamcrc("CBPrimGpuSystem");
local int crcCBRadialBlurFunction<format=hex> = createJamcrc("CBRadialBlurFunction");
local int crcCBMhMaterialNPCFaceLocal__disclosure<format=hex> = createJamcrc("CBMhMaterialNPCFaceLocal__disclosure");
local int crcCBMhMaterialVfxWaveLocal__disclosure<format=hex> = createJamcrc("CBMhMaterialVfxWaveLocal__disclosure");
local int crcCBMhMaterialNPCHairLocal__disclosure<format=hex> = createJamcrc("CBMhMaterialNPCHairLocal__disclosure");
local int crcCBMhMaterialFakeLensLocal__disclosure<format=hex> = createJamcrc("CBMhMaterialFakeLensLocal__disclosure");
local int crcCBGUIDevelop<format=hex> = createJamcrc("CBGUIDevelop");
local int crcCBCubeBlend<format=hex> = createJamcrc("CBCubeBlend");
local int crcCBMhMaterialEMLocal__disclosure<format=hex> = createJamcrc("CBMhMaterialEMLocal__disclosure");
local int crcCBMaterialCommon__disclosure<format=hex> = createJamcrc("CBMaterialCommon__disclosure");
local int crcCBGlobalIllumination<format=hex> = createJamcrc("CBGlobalIllumination");
local int crcCBMhMaterialEM117Local__disclosure<format=hex> = createJamcrc("CBMhMaterialEM117Local__disclosure");
local int crcCBMhMaterialPLLocal__disclosure<format=hex> = createJamcrc("CBMhMaterialPLLocal__disclosure");
local int crcCBSpeedTreePrimitiveInfo<format=hex> = createJamcrc("CBSpeedTreePrimitiveInfo");
local int crcCBMhMaterialEM100Local__disclosure<format=hex> = createJamcrc("CBMhMaterialEM100Local__disclosure");
local int crcCBOutline<format=hex> = createJamcrc("CBOutline");
local int crcSeaDisplacement<format=hex> = createJamcrc("SeaDisplacement");
local int crcCBBitonicSort<format=hex> = createJamcrc("CBBitonicSort");
local int crcCBStarrySky<format=hex> = createJamcrc("CBStarrySky");
local int crcCBMhMaterialVfxWaterLocal__disclosure<format=hex> = createJamcrc("CBMhMaterialVfxWaterLocal__disclosure");
local int crcCBPartialColor<format=hex> = createJamcrc("CBPartialColor");
local int crcCBMhMaterialFlowLavaLocal__disclosure<format=hex> = createJamcrc("CBMhMaterialFlowLavaLocal__disclosure");
local int crcCBVRCompute<format=hex> = createJamcrc("CBVRCompute");
local int crcCBSSSSS_Profile<format=hex> = createJamcrc("CBSSSSS_Profile");
local int crcCBConstant<format=hex> = createJamcrc("CBConstant");
local int crcCBViewProjection<format=hex> = createJamcrc("CBViewProjection");
local int crcCBMhMaterialFlowDirLocal__disclosure<format=hex> = createJamcrc("CBMhMaterialFlowDirLocal__disclosure");
local int crcCBLGTPRBDebug<format=hex> = createJamcrc("CBLGTPRBDebug");
local int crcCBVRCommon<format=hex> = createJamcrc("CBVRCommon");
local int crcCB_CombinedFilter_ImagePlane<format=hex> = createJamcrc("CB_CombinedFilter_ImagePlane");
local int crcCBFilter2<format=hex> = createJamcrc("CBFilter2");
local int crcCBPrimSystem<format=hex> = createJamcrc("CBPrimSystem");
local int crcCBLuminance<format=hex> = createJamcrc("CBLuminance");
local int crcCBMhMaterialPLEditFaceLocal__disclosure<format=hex> = createJamcrc("CBMhMaterialPLEditFaceLocal__disclosure");
local int crcCBMhMaterialNPCEditFaceLocal__disclosure<format=hex> = createJamcrc("CBMhMaterialNPCEditFaceLocal__disclosure");
local int crcCBMhMaterialStdLocal__disclosure<format=hex> = createJamcrc("CBMhMaterialStdLocal__disclosure");
local int crcCBGaussian<format=hex> = createJamcrc("CBGaussian");
local int crcCBRadialBlurFilter<format=hex> = createJamcrc("CBRadialBlurFilter");
local int crcCBGodRaysConfiguration<format=hex> = createJamcrc("CBGodRaysConfiguration");
local int crcCBNormalMerge<format=hex> = createJamcrc("CBNormalMerge");
local int crcCBMhMaterialEC021Local__disclosure<format=hex> = createJamcrc("CBMhMaterialEC021Local__disclosure");
local int crcCBVRGaussian<format=hex> = createJamcrc("CBVRGaussian");
local int crcCBInstancing<format=hex> = createJamcrc("CBInstancing");
local int crcCBColorCorrectToneCurve<format=hex> = createJamcrc("CBColorCorrectToneCurve");
local int crcCBMhMaterialLandscapeFlowLocal__disclosure<format=hex> = createJamcrc("CBMhMaterialLandscapeFlowLocal__disclosure");
local int crcCBMhMaterialEM103Local__disclosure<format=hex> = createJamcrc("CBMhMaterialEM103Local__disclosure");
local int crcCBFilter<format=hex> = createJamcrc("CBFilter");
local int crcCBMhMaterialSpeedTreeStdBlendLocal__disclosure<format=hex> = createJamcrc("CBMhMaterialSpeedTreeStdBlendLocal__disclosure");
local int crcCBSSSSS<format=hex> = createJamcrc("CBSSSSS");
local int crcCBRenderFrame<format=hex> = createJamcrc("CBRenderFrame");
local int crcCBMhSkyPS<format=hex> = createJamcrc("CBMhSkyPS");
local int crcCBSystem<format=hex> = createJamcrc("CBSystem");
local int crcCBPick<format=hex> = createJamcrc("CBPick");
local int crcCBSky<format=hex> = createJamcrc("CBSky");
local int crcCBGUIGlobal<format=hex> = createJamcrc("CBGUIGlobal");
local int crcCBLUTMaking<format=hex> = createJamcrc("CBLUTMaking");
local int crcCBNormalRecalc<format=hex> = createJamcrc("CBNormalRecalc");
local int crcCBConstantHaltonSequence<format=hex> = createJamcrc("CBConstantHaltonSequence");
local int crcCBSpeedTreeLocalWindPF<format=hex> = createJamcrc("CBSpeedTreeLocalWindPF");
local int crcCBGUIGBuffer<format=hex> = createJamcrc("CBGUIGBuffer");
local int crcCBPrimCopyState<format=hex> = createJamcrc("CBPrimCopyState");
local int crcCBMhMaterialVfxWave<format=hex> = createJamcrc("CBMhMaterialVfxWave");
local int crcCBTestLight<format=hex> = createJamcrc("CBTestLight");
local int crcCBSSLR<format=hex> = createJamcrc("CBSSLR");
local int crcCBGUIIcon<format=hex> = createJamcrc("CBGUIIcon");
local int crcCBResample<format=hex> = createJamcrc("CBResample");
local int crcCBMhDecal<format=hex> = createJamcrc("CBMhDecal");
local int crcCBMhMaterialFakeRefractionLocal__disclosure<format=hex> = createJamcrc("CBMhMaterialFakeRefractionLocal__disclosure");
local int crcCBFog<format=hex> = createJamcrc("CBFog");
local int crcCBVRRecompute<format=hex> = createJamcrc("CBVRRecompute");
local int crcCBLuminanceDebugDisp<format=hex> = createJamcrc("CBLuminanceDebugDisp");
local int crcCBLGTPRBGen<format=hex> = createJamcrc("CBLGTPRBGen");
local int crcCBMhMaterialStdBlendLocal__disclosure<format=hex> = createJamcrc("CBMhMaterialStdBlendLocal__disclosure");
local int crcCBMotionBlur<format=hex> = createJamcrc("CBMotionBlur");
local int crcCBAmbientOccluder<format=hex> = createJamcrc("CBAmbientOccluder");
local int crcCBLightProbes<format=hex> = createJamcrc("CBLightProbes");
local int crcCBSpeedTreeGlobalWind<format=hex> = createJamcrc("CBSpeedTreeGlobalWind");
local int crcCBMhMaterialLandscapeLocal__disclosure<format=hex> = createJamcrc("CBMhMaterialLandscapeLocal__disclosure");
local int crcCBMhSkyVS<format=hex> = createJamcrc("CBMhSkyVS");
local int crcCBHermiteCurveRGB<format=hex> = createJamcrc("CBHermiteCurveRGB");
local int crcCBMhMaterialEM002Local__disclosure<format=hex> = createJamcrc("CBMhMaterialEM002Local__disclosure");
local int crcCBSpeedTree<format=hex> = createJamcrc("CBSpeedTree");
local int crcCBImagePlane2<format=hex> = createJamcrc("CBImagePlane2");
local int crcCBMhMaterialNikuLocal__disclosure<format=hex> = createJamcrc("CBMhMaterialNikuLocal__disclosure");
local int crcCBMhMaterialVfxDispWaveLocal__disclosure<format=hex> = createJamcrc("CBMhMaterialVfxDispWaveLocal__disclosure");
local int crcCBWaterPick<format=hex> = createJamcrc("CBWaterPick");
local int crcCBPrimitiveDebug<format=hex> = createJamcrc("CBPrimitiveDebug");
local int crcCBSystemColor<format=hex> = createJamcrc("CBSystemColor");
local int crcCBAmbientOcclusion<format=hex> = createJamcrc("CBAmbientOcclusion");
local int crcCB_TemporalAA<format=hex> = createJamcrc("CB_TemporalAA");
local int crcCBMhMaterialSpeedTreeStdLocal__disclosure<format=hex> = createJamcrc("CBMhMaterialSpeedTreeStdLocal__disclosure");
local int crcCBBokehComposite<format=hex> = createJamcrc("CBBokehComposite");
local int crcCBLightParameters<format=hex> = createJamcrc("CBLightParameters");
local int crcCBMhMaterialEM102Local__disclosure<format=hex> = createJamcrc("CBMhMaterialEM102Local__disclosure");
local int crcCBImagePlane<format=hex> = createJamcrc("CBImagePlane");
local int crcCBPrimitiveEx<format=hex> = createJamcrc("CBPrimitiveEx");
local int crcCBMhMaterialNPCEyeLocal__disclosure<format=hex> = createJamcrc("CBMhMaterialNPCEyeLocal__disclosure");
local int crcCBMhMaterialFlagWaveLocal__disclosure<format=hex> = createJamcrc("CBMhMaterialFlagWaveLocal__disclosure");
local int crcCBMhMaterialVfxDebufBodyLocal__disclosure<format=hex> = createJamcrc("CBMhMaterialVfxDebufBodyLocal__disclosure");
local int crcCBLUTBlending<format=hex> = createJamcrc("CBLUTBlending");
local int crcCBPrimitive<format=hex> = createJamcrc("CBPrimitive");
local int crcCBErrorUnit<format=hex> = createJamcrc("CBErrorUnit");
local int crcCBWaterWaveMaterial<format=hex> = createJamcrc("CBWaterWaveMaterial");
local int crcCBScreen<format=hex> = createJamcrc("CBScreen");
local int crcCBDecalCommon<format=hex> = createJamcrc("CBDecalCommon");
local int crcCBDebug<format=hex> = createJamcrc("CBDebug");
local int crcCBColorCorrectCube<format=hex> = createJamcrc("CBColorCorrectCube");
local int crcCBMhDecalSM<format=hex> = createJamcrc("CBMhDecalSM");
local int crcCBMhMaterial_EM105_EVCLocal__disclosure<format=hex> = createJamcrc("CBMhMaterial_EM105_EVCLocal__disclosure");
local int crcCBMhMaterialEM115Local__disclosure<format=hex> = createJamcrc("CBMhMaterialEM115Local__disclosure");
local int crcCBHeightToNormal<format=hex> = createJamcrc("CBHeightToNormal");
local int crcCBMhMaterialPLHairLocal__disclosure<format=hex> = createJamcrc("CBMhMaterialPLHairLocal__disclosure");
local int crcCBSpeedTreeGlobalWindPF<format=hex> = createJamcrc("CBSpeedTreeGlobalWindPF");
local int crcCBVRVolumeParams<format=hex> = createJamcrc("CBVRVolumeParams");
local int crcCB_BGTexture<format=hex> = createJamcrc("CB_BGTexture");
local int crcCBHermiteCurve<format=hex> = createJamcrc("CBHermiteCurve");
local int crcCBMhMaterialScrWaterLocal__disclosure<format=hex> = createJamcrc("CBMhMaterialScrWaterLocal__disclosure");
local int crcCBTubeLight<format=hex> = createJamcrc("CBTubeLight");
local int crcCBModel<format=hex> = createJamcrc("CBModel");
local int crcCBGUIDistanceField<format=hex> = createJamcrc("CBGUIDistanceField");
local int crcCBLight<format=hex> = createJamcrc("CBLight");
local int crcCBMhMaterialGlobal<format=hex> = createJamcrc("CBMhMaterialGlobal");
local int crcCBMhMaterialFurLocal__disclosure<format=hex> = createJamcrc("CBMhMaterialFurLocal__disclosure");
local int crcCBMhMaterialNPCLocal__disclosure<format=hex> = createJamcrc("CBMhMaterialNPCLocal__disclosure");
local int crcCBMhMaterialFakeInnerEmitLocal__disclosure<format=hex> = createJamcrc("CBMhMaterialFakeInnerEmitLocal__disclosure");
local int crcCBNewDOFFilter<format=hex> = createJamcrc("CBNewDOFFilter");
local int crcCBMhMaterialEM011Local__disclosure<format=hex> = createJamcrc("CBMhMaterialEM011Local__disclosure");
local int crcCBCSClear<format=hex> = createJamcrc("CBCSClear");
local int crcCBROPTest<format=hex> = createJamcrc("CBROPTest");
local int crcCBMhMaterialSimpleLocal__disclosure<format=hex> = createJamcrc("CBMhMaterialSimpleLocal__disclosure");
local int crcCBMhMaterialNPCSkinLocal__disclosure<format=hex> = createJamcrc("CBMhMaterialNPCSkinLocal__disclosure");
local int crcCBMhSky2GBuffer<format=hex> = createJamcrc("CBMhSky2GBuffer");
local int crcCBHazeFilter<format=hex> = createJamcrc("CBHazeFilter");
local int crcCBDOFFilter<format=hex> = createJamcrc("CBDOFFilter");
local int crcCBGodRaysFilter<format=hex> = createJamcrc("CBGodRaysFilter");
local int crcCBMhMaterialIvyFloor<format=hex> = createJamcrc("CBMhMaterialIvyFloor");
local int crcCBVRFilter<format=hex> = createJamcrc("CBVRFilter");
local int crcCBDecal<format=hex> = createJamcrc("CBDecal");
local int crcCBPrimVertexOffset<format=hex> = createJamcrc("CBPrimVertexOffset");
local int crcCBMhEmissiveFog__disclosure<format=hex> = createJamcrc("CBMhEmissiveFog__disclosure");
local int crcCBMhMaterialPLEyeLocal__disclosure<format=hex> = createJamcrc("CBMhMaterialPLEyeLocal__disclosure");
local int crcCBMhMaterialEM105Local__disclosure<format=hex> = createJamcrc("CBMhMaterialEM105Local__disclosure");
local int crcCBMhSkyGBuffer<format=hex> = createJamcrc("CBMhSkyGBuffer");
local int crcCB_CombinedFilter_ColorCorrect<format=hex> = createJamcrc("CB_CombinedFilter_ColorCorrect");
local int crcCBLightShaft<format=hex> = createJamcrc("CBLightShaft");
local int crcCBMhMaterialEM024Local__disclosure<format=hex> = createJamcrc("CBMhMaterialEM024Local__disclosure");
local int crcCBWaterCustom<format=hex> = createJamcrc("CBWaterCustom");
local int crcCBMhMaterialEM036Local__disclosure<format=hex> = createJamcrc("CBMhMaterialEM036Local__disclosure");
local int crcCBMhMaterialVfxFloodLocal__disclosure<format=hex> = createJamcrc("CBMhMaterialVfxFloodLocal__disclosure");
local int crcCBBloom<format=hex> = createJamcrc("CBBloom");
local int crcCBMhMaterialBurnLocal__disclosure<format=hex> = createJamcrc("CBMhMaterialBurnLocal__disclosure");
local int crcCBPrimMaterialOffset<format=hex> = createJamcrc("CBPrimMaterialOffset");
local int crcCBToneMapping<format=hex> = createJamcrc("CBToneMapping");
local int crcCBMhMaterialEM106Local__disclosure<format=hex> = createJamcrc("CBMhMaterialEM106Local__disclosure");
local int crcCBMhMaterialVfxFakeInnerLocal__disclosure<format=hex> = createJamcrc("CBMhMaterialVfxFakeInnerLocal__disclosure");
local int crcCBCubeCopy<format=hex> = createJamcrc("CBCubeCopy");
local int crcCBComputeSkinning<format=hex> = createJamcrc("CBComputeSkinning");
local int crcCBWaterModel<format=hex> = createJamcrc("CBWaterModel");
local int crcCBWaterWave<format=hex> = createJamcrc("CBWaterWave");
local int crcCBDevelopFlags<format=hex> = createJamcrc("CBDevelopFlags");
local int crcCBMhMaterialVfxDistDispLocal__disclosure<format=hex> = createJamcrc("CBMhMaterialVfxDistDispLocal__disclosure");
local int crcCBMaterialDebug<format=hex> = createJamcrc("CBMaterialDebug");
local int crcCBMhMaterialEMGlobal<format=hex> = createJamcrc("CBMhMaterialEMGlobal");
local int crcCBVR_Debug<format=hex> = createJamcrc("CBVR_Debug");
local int crcCBMhSky2PS<format=hex> = createJamcrc("CBMhSky2PS");
local int crcCBMhMaterialPLSkinLocal__disclosure<format=hex> = createJamcrc("CBMhMaterialPLSkinLocal__disclosure");
local int crcCBVignetting<format=hex> = createJamcrc("CBVignetting");
local int crcCB_PlantOnSurface<format=hex> = createJamcrc("CB_PlantOnSurface");
local int crcCBMhMaterialEM111Local__disclosure<format=hex> = createJamcrc("CBMhMaterialEM111Local__disclosure");
local int crcCBAtmosphere<format=hex> = createJamcrc("CBAtmosphere");
local int crcCBSHDiffuse<format=hex> = createJamcrc("CBSHDiffuse");
local int crcCBWaterDebug<format=hex> = createJamcrc("CBWaterDebug");
local int crcCBMhMaterialEM118Local__disclosure<format=hex> = createJamcrc("CBMhMaterialEM118Local__disclosure");
local int crcCBMhMaterialVfxSandFallLocal__disclosure<format=hex> = createJamcrc("CBMhMaterialVfxSandFallLocal__disclosure");
local int crcCBMhMaterialEMSLocal__disclosure<format=hex> = createJamcrc("CBMhMaterialEMSLocal__disclosure");
local int crcCBMhMaterialFakeEyeLocal__disclosure<format=hex> = createJamcrc("CBMhMaterialFakeEyeLocal__disclosure");
local int crcCB_TemporalAA2<format=hex> = createJamcrc("CB_TemporalAA2");
local int crcCBWater<format=hex> = createJamcrc("CBWater");
local int crcCBPrimitivePick<format=hex> = createJamcrc("CBPrimitivePick");
local int crcCBColorCorrect<format=hex> = createJamcrc("CBColorCorrect");
local int crcCBMotionBlurReconstruction<format=hex> = createJamcrc("CBMotionBlurReconstruction");
local int crcCBTest<format=hex> = createJamcrc("CBTest");
local int crcpix_clear_constants<format=hex> = createJamcrc("pix_clear_constants");
local int crcCBFXAAParam<format=hex> = createJamcrc("CBFXAAParam");
local int crcCBGUINoiseAndFade<format=hex> = createJamcrc("CBGUINoiseAndFade");
local int crcCBMhSky2VS<format=hex> = createJamcrc("CBMhSky2VS");
local int crcCBSpeedTreeLocalWind<format=hex> = createJamcrc("CBSpeedTreeLocalWind");
local int crcCB_CombinedFilter<format=hex> = createJamcrc("CB_CombinedFilter");
local int crcCBNewDOFFilter2<format=hex> = createJamcrc("CBNewDOFFilter2");
local int crcCBSpeedTreeSystem<format=hex> = createJamcrc("CBSpeedTreeSystem");
local int crcCBMhMaterialFakeSphereLocal__disclosure<format=hex> = createJamcrc("CBMhMaterialFakeSphereLocal__disclosure");
local int crcCBMhMaterialEM044Local__disclosure<format=hex> = createJamcrc("CBMhMaterialEM044Local__disclosure");
local int crcCBMhSky2Sun<format=hex> = createJamcrc("CBMhSky2Sun");
local int crcCBSpeedTreeCollision__disclosure<format=hex> = createJamcrc("CBSpeedTreeCollision__disclosure");
local int crcCBMhSkyLpPS<format=hex> = createJamcrc("CBMhSkyLpPS");
local int crcCBDepthColor<format=hex> = createJamcrc("CBDepthColor");
local int crcCBLightShaft_LightParam<format=hex> = createJamcrc("CBLightShaft_LightParam");
local int crcCBMhMaterialEM109Local__disclosure<format=hex> = createJamcrc("CBMhMaterialEM109Local__disclosure");
local int crcCBGodRaysIterator<format=hex> = createJamcrc("CBGodRaysIterator");
local int crcCBMhMaterialVfxDistDispWLocal__disclosure<format=hex> = createJamcrc("CBMhMaterialVfxDistDispWLocal__disclosure");
local int crcCBBloomSample<format=hex> = createJamcrc("CBBloomSample");
local int crcCBPrimitiveMetaDataOcclusion<format=hex> = createJamcrc("CBPrimitiveMetaDataOcclusion");

//CBViewFrustum : 6586.shdr.src
struct CBViewFrustum {


  float4 fViewFrustum[6];            // Offset:    0 Size:    96

};

//CBMhMaterialUberLocal__disclosure : 5483.shdr.src
struct CBMhMaterialUberLocal__disclosure {


  float4 fBaseMapFactor__uiColor;    // Offset:    0 Size:    16 [unused]
  float3 fEmissiveMapFactor__uiColor;// Offset:   16 Size:    12 [unused]
  float fMetalic__uiUNorm;           // Offset:   28 Size:     4 [unused]
  float fRoughness__uiUNorm;         // Offset:   32 Size:     4 [unused]
  float fSpecular__uiUNorm;          // Offset:   36 Size:     4 [unused]
  float fSubSurfaceBlend__uiUNorm;   // Offset:   40 Size:     4 [unused]
  uint iSubSurfaceProfile;           // Offset:   44 Size:     4 [unused]
  float fTranslucency__uiUNorm;      // Offset:   48 Size:     4 [unused]
  bool bBaseColorEmissive;           // Offset:   52 Size:     4 [unused]
  float fAnimEmitMin;                // Offset:   56 Size:     4 [unused]
  float fAnimEmitSpeed;              // Offset:   60 Size:     4 [unused]
  bool bUseCMM;                      // Offset:   64 Size:     4 [unused]
  // align: 68 to 80
  ubyte align0[12];
  float4 fAddColorA__uiColor;        // Offset:   80 Size:    16 [unused]
  float4 fAddColorB__uiColor;        // Offset:   96 Size:    16 [unused]
  float4 fAddColorC__uiColor;        // Offset:  112 Size:    16 [unused]
  float4 fAddColorD__uiColor;        // Offset:  128 Size:    16 [unused]
  float4 fFurParam__uiUNorm;         // Offset:  144 Size:    16 [unused]
  float fFurTile;                    // Offset:  160 Size:     4 [unused]
  float3 fSecondaryEmitColor__uiColor;// Offset:  164 Size:    12 [unused]
  float4 fSecondaryEmit_Control;     // Offset:  176 Size:    16
  float fFilmThickness__uiUNorm;     // Offset:  192 Size:     4 [unused]
  float fFilmBlend__uiUNorm;         // Offset:  196 Size:     4 [unused]
  // align: 200 to 208
  ubyte align1[8];
  float3 fEmissiveBlendColor__uiColor;// Offset:  208 Size:    12 [unused]
  float fEmissiveBlendColorBlend__uiUNorm;// Offset:  220 Size:     4 [unused]
  float3 fEmissiveBlendRimParam;     // Offset:  224 Size:    12 [unused]
  float fRefraction__uiSNorm;        // Offset:  236 Size:     4 [unused]
  float fRefractionRotation__uiSNorm;// Offset:  240 Size:     4 [unused]
  float fVPushScale;                 // Offset:  244 Size:     4
  float fVPushWave;                  // Offset:  248 Size:     4
  float fVPushSpeed;                 // Offset:  252 Size:     4
  bool bUseFlipUV;                   // Offset:  256 Size:     4 [unused]
  bool bUseEmitMask;                 // Offset:  260 Size:     4
  bool bUseRoughColor;               // Offset:  264 Size:     4 [unused]
  // align: 268 to 272
  ubyte align2[4];
  float2 fRoughMask__uiUNorm;        // Offset:  272 Size:     8 [unused]
  bool bUsePaint;                    // Offset:  280 Size:     4 [unused]
  // align: 284 to 288
  ubyte align3[4];
  float2 fPaintMapRC;                // Offset:  288 Size:     8 [unused]
  float fPaintMapNum;                // Offset:  296 Size:     4 [unused]
  // align: 300 to 304
  ubyte align4[4];
  float4 fPaintMapOffset__uiSNorm;   // Offset:  304 Size:    16 [unused]
  float4 fPaintColor__uiColor;       // Offset:  320 Size:    16 [unused]
  float fPaintRoughness__uiUNorm;    // Offset:  336 Size:     4 [unused]
  float fPaintMetal__uiUNorm;        // Offset:  340 Size:     4 [unused]
  bool bUseOffset;                   // Offset:  344 Size:     4
  float fInnerOffsetScale;           // Offset:  348 Size:     4
  bool bUseFly;                      // Offset:  352 Size:     4
  uint iWingNum;                     // Offset:  356 Size:     4

};

//CBToneMappingSdrSim : 4381.shdr.src
struct CBToneMappingSdrSim {


  uint iToneMapType;                 // Offset:    0 Size:     4
  bool bLuminanceVersion;            // Offset:    4 Size:     4
  float fShouldStr;                  // Offset:    8 Size:     4
  float fLinearStr;                  // Offset:   12 Size:     4
  float fIntermediate;               // Offset:   16 Size:     4
  float fS1;                         // Offset:   20 Size:     4
  float fS2;                         // Offset:   24 Size:     4
  float fS3;                         // Offset:   28 Size:     4
  float fS4;                         // Offset:   32 Size:     4
  uint iLUTSize;                     // Offset:   36 Size:     4
  bool bIsLinearToPQ;                // Offset:   40 Size:     4
  bool bIsPQToLinear;                // Offset:   44 Size:     4
  bool bEnableColorGrading;          // Offset:   48 Size:     4
  bool bEnableSdrSimulation;         // Offset:   52 Size:     4
  bool bEnableMaxLuminanceTest;      // Offset:   56 Size:     4

};

//CBWaterMaterial : 5488.shdr.src
struct CBWaterMaterial {


  row_major float4x4 fReflectionViewProj;// Offset:    0 Size:    64 [unused]
  float fReflectionFactor;           // Offset:   64 Size:     4 [unused]
  float fCubemapBlendRate;           // Offset:   68 Size:     4 [unused]
  float fRefractionFactor;           // Offset:   72 Size:     4 [unused]
  float fRefactionIndex;             // Offset:   76 Size:     4 [unused]
  float3 fColExtinction;             // Offset:   80 Size:    12 [unused]
  // align: 92 to 96
  ubyte align0[4];
  float3 fColScatter;                // Offset:   96 Size:    12 [unused]
  float fScatteringCoeff;            // Offset:  108 Size:     4 [unused]
  float fFresnelBias;                // Offset:  112 Size:     4 [unused]
  float3 normalATiling;              // Offset:  116 Size:    12 [unused]
  float3 normalBTiling;              // Offset:  128 Size:    12 [unused]
  // align: 140 to 144
  ubyte align1[4];
  float3 normalAMoveDir;             // Offset:  144 Size:    12 [unused]
  // align: 156 to 160
  ubyte align2[4];
  float3 normalBMoveDir;             // Offset:  160 Size:    12 [unused]
  // align: 172 to 176
  ubyte align3[4];
  float2 materialTiling;             // Offset:  176 Size:     8 [unused]
  // align: 184 to 192
  ubyte align4[8];
  float3 materialColor;              // Offset:  192 Size:    12 [unused]
  float fWaterDeltaTime;             // Offset:  204 Size:     4 [unused]
  float fDepthFadeInv;               // Offset:  208 Size:     4 [unused]
  uint iLightGroup;                  // Offset:  212 Size:     4
  uint iFlags;                       // Offset:  216 Size:     4 [unused]
  float fMaxDepth;                   // Offset:  220 Size:     4 [unused]
  float3 causticsTiling;             // Offset:  224 Size:    12 [unused]
  // align: 236 to 240
  ubyte align5[4];
  float3 causticsMoveDir;            // Offset:  240 Size:    12 [unused]
  float fCausticsDensityLow;         // Offset:  252 Size:     4 [unused]
  float3 whitecapTiling;             // Offset:  256 Size:    12 [unused]
  // align: 268 to 272
  ubyte align6[4];
  float3 whitecapMoveDir;            // Offset:  272 Size:    12 [unused]
  float fWhitecapRoughness;          // Offset:  284 Size:     4 [unused]
  float fWhitecapDepthThreshold;     // Offset:  288 Size:     4 [unused]
  float fWhitecapDepthFade;          // Offset:  292 Size:     4 [unused]
  float fWhitecapHeightWPosUnder;    // Offset:  296 Size:     4 [unused]
  float fWhitecapHeightWPosThreshold;// Offset:  300 Size:     4 [unused]
  float fWhitecapHeightFade;         // Offset:  304 Size:     4 [unused]
  float fWhitecapHeightPower;        // Offset:  308 Size:     4 [unused]

};

//CBMhMaterialVfxTornadoLocal__disclosure : 3738.shdr.src
struct CBMhMaterialVfxTornadoLocal__disclosure {


  float4 fBaseMapFactor__uiColor;    // Offset:    0 Size:    16 [unused]
  float3 fEmissiveMapFactor__uiColor;// Offset:   16 Size:    12 [unused]
  // align: 28 to 32
  ubyte align0[4];
  float4 fUVTransformA;              // Offset:   32 Size:    16
  float4 fUVTransformB;              // Offset:   48 Size:    16 [unused]
  float4 fUVTransformC;              // Offset:   64 Size:    16 [unused]
  float fVolumeBlend__uiSNorm;       // Offset:   80 Size:     4 [unused]
  float fVolumeBlendDistance;        // Offset:   84 Size:     4 [unused]
  // align: 88 to 96
  ubyte align1[8];
  float3 fRGBchFactor_uiColor;       // Offset:   96 Size:    12 [unused]
  // align: 108 to 112
  ubyte align2[4];
  float3 fEmissiveRGBchFactor_uiColor;// Offset:  112 Size:    12 [unused]
  float fEmissivePow;                // Offset:  124 Size:     4 [unused]
  float fEmissiveGradationPow;       // Offset:  128 Size:     4 [unused]
  float fOpacityFactor;              // Offset:  132 Size:     4 [unused]
  float fOpacityPow;                 // Offset:  136 Size:     4 [unused]
  float fVerticalOpacityPow;         // Offset:  140 Size:     4 [unused]
  float fVerticalOpacityPowInv;      // Offset:  144 Size:     4 [unused]
  float fNormalFactor__uiUNorm;      // Offset:  148 Size:     4 [unused]
  float fDispFactor;                 // Offset:  152 Size:     4
  float fFresnelPow;                 // Offset:  156 Size:     4 [unused]
  float fFlowSpeed;                  // Offset:  160 Size:     4 [unused]
  float fFlowStrength;               // Offset:  164 Size:     4 [unused]
  float fUVOffsetSpeed;              // Offset:  168 Size:     4
  // align: 172 to 176
  ubyte align3[4];
  float2 fUVOffsetSpeedFactorA;      // Offset:  176 Size:     8
  float2 fUVOffsetSpeedFactorB;      // Offset:  184 Size:     8 [unused]
  float2 fUVOffsetSpeedFactorC;      // Offset:  192 Size:     8 [unused]
  float fAngleFade;                  // Offset:  200 Size:     4 [unused]
  float fTranslucency__uiUNorm;      // Offset:  204 Size:     4 [unused]
  float fTotalOpacity__uiUNorm;      // Offset:  208 Size:     4 [unused]
  float fMetalic__uiUNorm;           // Offset:  212 Size:     4 [unused]
  float fRoughness__uiUNorm;         // Offset:  216 Size:     4 [unused]
  float fSpecular__uiUNorm;          // Offset:  220 Size:     4 [unused]
  float fInnerOffsetScale;           // Offset:  224 Size:     4
  float fVelocityAttn;               // Offset:  228 Size:     4 [unused]
  bool bGBufferIdMaskEnable;         // Offset:  232 Size:     4 [unused]
  uint iGBufferIdMask;               // Offset:  236 Size:     4 [unused]
  float fNormalDecalBlend__uiUNorm;  // Offset:  240 Size:     4 [unused]

};

//CBMhMaterialIvyFloorLocal__disclosure : 3226.shdr.src
struct CBMhMaterialIvyFloorLocal__disclosure {


  float fWaveLength;                 // Offset:    0 Size:     4
  float fSinkLength;                 // Offset:    4 Size:     4
  float fLocalWindWeight;            // Offset:    8 Size:     4 [unused]

};

//CBDevelopColorPick : 3787.shdr.src
struct CBDevelopColorPick {


  uint2 mousePos;                    // Offset:    0 Size:     8
  bool gammaCorrect;                 // Offset:    8 Size:     4

};

//CBPrimGpuSystem : 6105.shdr.src
struct CBPrimGpuSystem {


  uint iEmitterCount;                // Offset:    0 Size:     4
  uint iTotalSpawnCount;             // Offset:    4 Size:     4 [unused]
  uint iTotalParticleMax;            // Offset:    8 Size:     4 [unused]
  uint iResetUnusedIndexHead;        // Offset:   12 Size:     4 [unused]
  uint iResetUnusedIndexCount;       // Offset:   16 Size:     4 [unused]
  float3 fMainCameraDir;             // Offset:   20 Size:    12 [unused]
  uint iGpuStateFlags;               // Offset:   32 Size:     4 [unused]
  uint iGpuUpdateCounter;            // Offset:   36 Size:     4 [unused]

};

//CBRadialBlurFunction : 6147.shdr.src
struct CBRadialBlurFunction {


  int iRadialFilterSampleColorScale; // Offset:    0 Size:     4
  int iRadialFilterAlpha;            // Offset:    4 Size:     4
  int iRadialBlurWidth;              // Offset:    8 Size:     4
  int iRadialBlurAlpha;              // Offset:   12 Size:     4

};

//CBMhMaterialNPCFaceLocal__disclosure : 3645.shdr.src
struct CBMhMaterialNPCFaceLocal__disclosure {


  float4 fBaseMapFactor__uiColor;    // Offset:    0 Size:    16
  float3 fEmissiveMapFactor__uiColor;// Offset:   16 Size:    12 [unused]
  float fMetalic__uiUNorm;           // Offset:   28 Size:     4 [unused]
  float fRoughness__uiUNorm;         // Offset:   32 Size:     4 [unused]
  float fSpecular__uiUNorm;          // Offset:   36 Size:     4 [unused]
  float fSubSurfaceBlend__uiUNorm;   // Offset:   40 Size:     4 [unused]
  uint iSubSurfaceProfile;           // Offset:   44 Size:     4 [unused]
  float fTranslucency__uiUNorm;      // Offset:   48 Size:     4 [unused]
  bool bBaseColorEmissive;           // Offset:   52 Size:     4 [unused]
  bool bBackFaceNormalFilp;          // Offset:   56 Size:     4 [unused]
  float fAnimEmitMin;                // Offset:   60 Size:     4 [unused]
  float fAnimEmitSpeed;              // Offset:   64 Size:     4 [unused]
  float2 fAddColorUV__uiUNorm;       // Offset:   68 Size:     8 [unused]
  // align: 76 to 80
  ubyte align0[4];
  float4 fAddNormalMaskA__uiUNorm;   // Offset:   80 Size:    16 [unused]
  float4 fAddNormalMaskB__uiUNorm;   // Offset:   96 Size:    16 [unused]
  float4 fAddNormalMaskC__uiUNorm;   // Offset:  112 Size:    16 [unused]
  float4 fAddNormalMaskD__uiUNorm;   // Offset:  128 Size:    16 [unused]
  bool bUseSkin;                     // Offset:  144 Size:     4 [unused]
  float fDetailNormalBlend__uiUNorm; // Offset:  148 Size:     4 [unused]
  // align: 152 to 160
  ubyte align1[8];
  float4 fUVTransformDetailNormal;   // Offset:  160 Size:    16 [unused]

};

//CBMhMaterialVfxWaveLocal__disclosure : 6653.shdr.src
struct CBMhMaterialVfxWaveLocal__disclosure {


  float fConstant;                   // Offset:    0 Size:     4
  // align: 4 to 16
  ubyte align0[12];
  float4 fUVTransformA;              // Offset:   16 Size:    16
  float4 fUVTransformB;              // Offset:   32 Size:    16 [unused]
  float4 fBaseMapFactor__uiColor;    // Offset:   48 Size:    16 [unused]
  float3 fEmissiveMapFactor__uiColor;// Offset:   64 Size:    12 [unused]
  // align: 76 to 80
  ubyte align1[4];
  float3 fEmissiveBlendColor__uiColor;// Offset:   80 Size:    12 [unused]
  float fEmissiveBlendColorBlend__uiUNorm;// Offset:   92 Size:     4 [unused]
  float fDetailNormalBlend__uiUNorm; // Offset:   96 Size:     4 [unused]
  float fSubSurfaceBlend__uiUNorm;   // Offset:  100 Size:     4 [unused]
  float fDisplacementLevel;          // Offset:  104 Size:     4
  bool fWriteSplash;                 // Offset:  108 Size:     4 [unused]
  float fSplashAngle;                // Offset:  112 Size:     4 [unused]
  // align: 116 to 128
  ubyte align2[12];
  float4 fSplashColor__uiColor;      // Offset:  128 Size:    16 [unused]
  float fSplashLevel__uiUNorm;       // Offset:  144 Size:     4 [unused]
  float fSplashOffsetX;              // Offset:  148 Size:     4 [unused]
  bool fWriteShadow;                 // Offset:  152 Size:     4 [unused]
  // align: 156 to 160
  ubyte align3[4];
  float4 fShadowColor__uiColor;      // Offset:  160 Size:    16 [unused]
  float fShadowLevel__uiUNorm;       // Offset:  176 Size:     4 [unused]
  float fNoiseLength__uiUNorm;       // Offset:  180 Size:     4 [unused]
  float fNoiseDetail__uiUNorm;       // Offset:  184 Size:     4 [unused]
  float fSplashSpeed;                // Offset:  188 Size:     4 [unused]

};

//CBMhMaterialNPCHairLocal__disclosure : 2675.shdr.src
struct CBMhMaterialNPCHairLocal__disclosure {


  float4 fBaseMapFactor__uiColor;    // Offset:    0 Size:    16 [unused]
  float3 fEmissiveMapFactor__uiColor;// Offset:   16 Size:    12 [unused]
  float fMetalic__uiUNorm;           // Offset:   28 Size:     4 [unused]
  float fRoughness__uiUNorm;         // Offset:   32 Size:     4 [unused]
  float fSpecular__uiUNorm;          // Offset:   36 Size:     4 [unused]
  float fSubSurfaceBlend__uiUNorm;   // Offset:   40 Size:     4 [unused]
  uint iSubSurfaceProfile;           // Offset:   44 Size:     4 [unused]
  float fTranslucency__uiUNorm;      // Offset:   48 Size:     4 [unused]
  bool bBaseColorEmissive;           // Offset:   52 Size:     4 [unused]
  bool bBackFaceNormalFilp;          // Offset:   56 Size:     4 [unused]
  float fAnimEmitMin;                // Offset:   60 Size:     4 [unused]
  float fAnimEmitSpeed;              // Offset:   64 Size:     4 [unused]
  // align: 68 to 80
  ubyte align0[12];
  float4 fPrimaryColor__uiColor;     // Offset:   80 Size:    16 [unused]
  float4 fSecondaryColor__uiColor;   // Offset:   96 Size:    16 [unused]
  float fPrimaryExpo__uiUNorm;       // Offset:  112 Size:     4 [unused]
  float fSecondaryExpo__uiUNorm;     // Offset:  116 Size:     4 [unused]
  float fPrimaryShift__uiSNorm;      // Offset:  120 Size:     4 [unused]
  float fSecondaryShift__uiSNorm;    // Offset:  124 Size:     4 [unused]
  float fShininess;                  // Offset:  128 Size:     4 [unused]
  float3 fFakeLight__uiDirection;    // Offset:  132 Size:    12 [unused]
  float fFurNMHeight;                // Offset:  144 Size:     4 [unused]
  // align: 148 to 160
  ubyte align1[12];
  float4 fFurParam__uiUNorm;         // Offset:  160 Size:    16 [unused]
  float fFurTile;                    // Offset:  176 Size:     4 [unused]
  // align: 180 to 192
  ubyte align2[12];
  float4 fVertexAO__uiColor;         // Offset:  192 Size:    16 [unused]
  float fVColorNormalBlend__uiUNorm; // Offset:  208 Size:     4
  float fRimWidth__uiUNorm;          // Offset:  212 Size:     4 [unused]
  float fRimNormalBlend__uiUNorm;    // Offset:  216 Size:     4 [unused]
  bool bUseRimTranslucency;          // Offset:  220 Size:     4 [unused]
  bool bUseOffset;                   // Offset:  224 Size:     4
  float fInnerOffsetScale;           // Offset:  228 Size:     4
  float fDetailNormalBlend__uiUNorm; // Offset:  232 Size:     4 [unused]
  // align: 236 to 240
  ubyte align3[4];
  float4 fUVTransformDetailNormal;   // Offset:  240 Size:    16 [unused]

};

//CBMhMaterialFakeLensLocal__disclosure : 1274.shdr.src
struct CBMhMaterialFakeLensLocal__disclosure {


  float4 fBaseMapFactor__uiColor;    // Offset:    0 Size:    16
  float3 fEmissiveMapFactor__uiColor;// Offset:   16 Size:    12 [unused]
  float fMetalic__uiUNorm;           // Offset:   28 Size:     4 [unused]
  float fRoughness__uiUNorm;         // Offset:   32 Size:     4 [unused]
  float fSpecular__uiUNorm;          // Offset:   36 Size:     4 [unused]
  float fSubSurfaceBlend__uiUNorm;   // Offset:   40 Size:     4 [unused]
  uint iSubSurfaceProfile;           // Offset:   44 Size:     4 [unused]
  float fDetailNormalBlend__uiUNorm; // Offset:   48 Size:     4 [unused]
  // align: 52 to 64
  ubyte align0[12];
  float4 fUVTransformA;              // Offset:   64 Size:    16
  float4 fUVTransformB;              // Offset:   80 Size:    16 [unused]
  float fTranslucency__uiUNorm;      // Offset:   96 Size:     4 [unused]
  float fOffset_A__uiUNorm;          // Offset:  100 Size:     4 [unused]
  float fOffset_B__uiUNorm;          // Offset:  104 Size:     4 [unused]
  // align: 108 to 112
  ubyte align1[4];
  float3 fCoating_A__uiColor;        // Offset:  112 Size:    12 [unused]
  // align: 124 to 128
  ubyte align2[4];
  float3 fCoating_B__uiColor;        // Offset:  128 Size:    12 [unused]
  // align: 140 to 144
  ubyte align3[4];
  float3 fCoating_C__uiColor;        // Offset:  144 Size:    12 [unused]
  // align: 156 to 160
  ubyte align4[4];
  float3 fCoating_D__uiColor;        // Offset:  160 Size:    12 [unused]
  float fWakuIntensity__uiUNorm;     // Offset:  172 Size:     4 [unused]
  float fWakuSize__uiUNorm;          // Offset:  176 Size:     4 [unused]

};

//CBGUIDevelop : 219.shdr.src
struct CBGUIDevelop {


  float3 fGUIOverlapDrawColor;       // Offset:    0 Size:    12

};

//CBCubeBlend : 876.shdr.src
struct CBCubeBlend {


  float fCubeBlendRate;              // Offset:    0 Size:     4

};

//CBMhMaterialEMLocal__disclosure : 5647.shdr.src
struct CBMhMaterialEMLocal__disclosure {


  float4 fBaseMapFactor__uiColor;    // Offset:    0 Size:    16 [unused]
  float3 fEmissiveMapFactor__uiColor;// Offset:   16 Size:    12 [unused]
  float fMetalic__uiUNorm;           // Offset:   28 Size:     4 [unused]
  float fRoughness__uiUNorm;         // Offset:   32 Size:     4 [unused]
  float fSpecular__uiUNorm;          // Offset:   36 Size:     4 [unused]
  float fSubSurfaceBlend__uiUNorm;   // Offset:   40 Size:     4 [unused]
  uint iSubSurfaceProfile;           // Offset:   44 Size:     4 [unused]
  float fTranslucency__uiUNorm;      // Offset:   48 Size:     4 [unused]
  bool bBaseColorEmissive;           // Offset:   52 Size:     4 [unused]
  float2 fPaintUVTile;               // Offset:   56 Size:     8 [unused]
  float fAddNormalBlend__uiUNorm;    // Offset:   64 Size:     4 [unused]
  // align: 68 to 80
  ubyte align0[12];
  float4 fAddNormalMaskA__uiSNorm;   // Offset:   80 Size:    16 [unused]
  float4 fAddNormalMaskB__uiSNorm;   // Offset:   96 Size:    16 [unused]
  float fAddNormalMaskC__uiUNorm;    // Offset:  112 Size:     4 [unused]
  float fAddNormalMaskD__uiUNorm;    // Offset:  116 Size:     4 [unused]
  bool bBackFaceShading;             // Offset:  120 Size:     4 [unused]
  // align: 124 to 128
  ubyte align1[4];
  float4 fBackFaceColor__uiColor;    // Offset:  128 Size:    16 [unused]
  bool bBackFaceNormalFilp;          // Offset:  144 Size:     4 [unused]
  float3 fKizuColor__uiColor;        // Offset:  148 Size:    12 [unused]
  bool bLegendary;                   // Offset:  160 Size:     4 [unused]
  // align: 164 to 176
  ubyte align2[12];
  float4 fLegendColor__uiColor;      // Offset:  176 Size:    16 [unused]
  float2 fLegendMetalMask__uiUNorm;  // Offset:  192 Size:     8 [unused]
  float fLegendRoughness;            // Offset:  200 Size:     4 [unused]
  // align: 204 to 208
  ubyte align3[4];
  float2 fLegendFilm__uiUNorm;       // Offset:  208 Size:     8 [unused]
  float fLegendSSSMask__uiUNorm;     // Offset:  216 Size:     4 [unused]
  float fPartsMaskA__uiUNorm;        // Offset:  220 Size:     4 [unused]
  float fPartsMaskB__uiUNorm;        // Offset:  224 Size:     4 [unused]
  float fPartsMaskC__uiUNorm;        // Offset:  228 Size:     4 [unused]
  float fPartsMaskD__uiUNorm;        // Offset:  232 Size:     4 [unused]
  float fPartsMaskX__uiUNorm;        // Offset:  236 Size:     4 [unused]
  float fPartsMaskY__uiUNorm;        // Offset:  240 Size:     4 [unused]
  float fPartsMaskZ__uiUNorm;        // Offset:  244 Size:     4 [unused]
  float fPartsMaskW__uiUNorm;        // Offset:  248 Size:     4 [unused]
  bool bUseOffset;                   // Offset:  252 Size:     4
  float3 fFlowDirDir__uiDirection;   // Offset:  256 Size:    12 [unused]
  // align: 268 to 272
  ubyte align4[4];
  float4 fFlowControl__uiUNorm;      // Offset:  272 Size:    16 [unused]
  float fFlowTile;                   // Offset:  288 Size:     4 [unused]
  // align: 292 to 304
  ubyte align5[12];
  float4 fFlowColor__uiColor;        // Offset:  304 Size:    16 [unused]
  float4 fFlowMatControl__uiUNorm;   // Offset:  320 Size:    16 [unused]
  float fFilmThickness__uiUNorm;     // Offset:  336 Size:     4 [unused]
  float fFilmBlend__uiUNorm;         // Offset:  340 Size:     4 [unused]
  float fRefraction__uiUNorm;        // Offset:  344 Size:     4 [unused]
  float fRefractionBlend__uiUNorm;   // Offset:  348 Size:     4 [unused]

};

//CBMaterialCommon__disclosure : 99.shdr.src
struct CBMaterialCommon__disclosure {


  bool bBypass;                      // Offset:    0 Size:     4
  bool bDecalMask;                   // Offset:    4 Size:     4
  bool bEmissive;                    // Offset:    8 Size:     4 [unused]
  uint iGBufferId;                   // Offset:   12 Size:     4
  uint iOutlineId;                   // Offset:   16 Size:     4 [unused]

};

//CBGlobalIllumination : 4659.shdr.src
struct CBGlobalIllumination {


  float fSpecularIntensity;          // Offset:    0 Size:     4 [unused]
  float fSpecularTemporalBlendRate;  // Offset:    4 Size:     4
  float fSpecularDifference;         // Offset:    8 Size:     4 [unused]

};

//CBMhMaterialEM117Local__disclosure : 4584.shdr.src
struct CBMhMaterialEM117Local__disclosure {


  float4 fBaseMapFactor__uiColor;    // Offset:    0 Size:    16 [unused]
  float3 fEmissiveMapFactor__uiColor;// Offset:   16 Size:    12 [unused]
  float fMetalic__uiUNorm;           // Offset:   28 Size:     4 [unused]
  float fRoughness__uiUNorm;         // Offset:   32 Size:     4 [unused]
  float fSpecular__uiUNorm;          // Offset:   36 Size:     4 [unused]
  float fSubSurfaceBlend__uiUNorm;   // Offset:   40 Size:     4 [unused]
  uint iSubSurfaceProfile;           // Offset:   44 Size:     4 [unused]
  float fTranslucency__uiUNorm;      // Offset:   48 Size:     4 [unused]
  bool bBaseColorEmissive;           // Offset:   52 Size:     4 [unused]
  float2 fPaintUVTile;               // Offset:   56 Size:     8 [unused]
  float fAddNormalBlend__uiUNorm;    // Offset:   64 Size:     4 [unused]
  // align: 68 to 80
  ubyte align0[12];
  float4 fAddNormalMaskA__uiSNorm;   // Offset:   80 Size:    16 [unused]
  float4 fAddNormalMaskB__uiSNorm;   // Offset:   96 Size:    16 [unused]
  float fAddNormalMaskC__uiUNorm;    // Offset:  112 Size:     4 [unused]
  float fAddNormalMaskD__uiUNorm;    // Offset:  116 Size:     4 [unused]
  bool bBackFaceShading;             // Offset:  120 Size:     4 [unused]
  // align: 124 to 128
  ubyte align1[4];
  float4 fBackFaceColor__uiColor;    // Offset:  128 Size:    16 [unused]
  bool bBackFaceNormalFilp;          // Offset:  144 Size:     4 [unused]
  float3 fKizuColor__uiColor;        // Offset:  148 Size:    12 [unused]
  bool bLegendary;                   // Offset:  160 Size:     4 [unused]
  // align: 164 to 176
  ubyte align2[12];
  float4 fLegendColor__uiColor;      // Offset:  176 Size:    16 [unused]
  float2 fLegendMetalMask__uiUNorm;  // Offset:  192 Size:     8 [unused]
  float fLegendRoughness;            // Offset:  200 Size:     4 [unused]
  // align: 204 to 208
  ubyte align3[4];
  float2 fLegendFilm__uiUNorm;       // Offset:  208 Size:     8 [unused]
  float fLegendSSSMask__uiUNorm;     // Offset:  216 Size:     4 [unused]
  float fPartsMaskA__uiUNorm;        // Offset:  220 Size:     4 [unused]
  float fPartsMaskB__uiUNorm;        // Offset:  224 Size:     4 [unused]
  float fPartsMaskC__uiUNorm;        // Offset:  228 Size:     4 [unused]
  float fPartsMaskD__uiUNorm;        // Offset:  232 Size:     4 [unused]
  float fPartsMaskX__uiUNorm;        // Offset:  236 Size:     4 [unused]
  float fPartsMaskY__uiUNorm;        // Offset:  240 Size:     4 [unused]
  float fPartsMaskZ__uiUNorm;        // Offset:  244 Size:     4 [unused]
  float fPartsMaskW__uiUNorm;        // Offset:  248 Size:     4 [unused]
  bool bUseOffset;                   // Offset:  252 Size:     4
  float3 fFlowDirDir__uiDirection;   // Offset:  256 Size:    12 [unused]
  // align: 268 to 272
  ubyte align4[4];
  float4 fFlowControl__uiUNorm;      // Offset:  272 Size:    16 [unused]
  float fFlowTile;                   // Offset:  288 Size:     4 [unused]
  // align: 292 to 304
  ubyte align5[12];
  float4 fFlowColor__uiColor;        // Offset:  304 Size:    16 [unused]
  float4 fFlowMatControl__uiUNorm;   // Offset:  320 Size:    16 [unused]
  float fFilmThickness__uiUNorm;     // Offset:  336 Size:     4 [unused]
  float fFilmBlend__uiUNorm;         // Offset:  340 Size:     4 [unused]
  float fRefraction__uiUNorm;        // Offset:  344 Size:     4 [unused]
  float fRefractionBlend__uiUNorm;   // Offset:  348 Size:     4 [unused]
  float4 fDetailBlend__uiUNorm;      // Offset:  352 Size:    16 [unused]
  float4 fDetailTile;                // Offset:  368 Size:    16 [unused]
  float4 fDetailA_Color__uiColor;    // Offset:  384 Size:    16 [unused]
  float4 fDetailB_Color__uiColor;    // Offset:  400 Size:    16 [unused]
  float4 fDetailC_Color__uiColor;    // Offset:  416 Size:    16 [unused]
  float4 fDetailD_Color__uiColor;    // Offset:  432 Size:    16 [unused]
  float4 fDetail_Roughness__uiUNorm; // Offset:  448 Size:    16 [unused]
  float4 fDetail_Metal__uiUNorm;     // Offset:  464 Size:    16 [unused]

};

//CBMhMaterialPLLocal__disclosure : 5085.shdr.src
struct CBMhMaterialPLLocal__disclosure {


  float4 fBaseMapFactor__uiColor;    // Offset:    0 Size:    16
  float3 fEmissiveMapFactor__uiColor;// Offset:   16 Size:    12 [unused]
  float fMetalic__uiUNorm;           // Offset:   28 Size:     4 [unused]
  float fRoughness__uiUNorm;         // Offset:   32 Size:     4 [unused]
  float fSpecular__uiUNorm;          // Offset:   36 Size:     4 [unused]
  float fSubSurfaceBlend__uiUNorm;   // Offset:   40 Size:     4 [unused]
  uint iSubSurfaceProfile;           // Offset:   44 Size:     4 [unused]
  float fTranslucency__uiUNorm;      // Offset:   48 Size:     4 [unused]
  bool bBaseColorEmissive;           // Offset:   52 Size:     4 [unused]
  bool bBackFaceNormalFilp;          // Offset:   56 Size:     4 [unused]
  float fAnimEmitMin;                // Offset:   60 Size:     4 [unused]
  float fAnimEmitSpeed;              // Offset:   64 Size:     4 [unused]
  bool bUseCMM;                      // Offset:   68 Size:     4 [unused]
  // align: 72 to 80
  ubyte align0[8];
  float4 fAddColorA__uiColor;        // Offset:   80 Size:    16 [unused]
  float4 fAddColorB__uiColor;        // Offset:   96 Size:    16 [unused]
  float4 fAddColorC__uiColor;        // Offset:  112 Size:    16 [unused]
  float4 fAddColorD__uiColor;        // Offset:  128 Size:    16 [unused]
  float4 fFurParam__uiUNorm;         // Offset:  144 Size:    16 [unused]
  float fFurTile;                    // Offset:  160 Size:     4 [unused]
  float fFilmThickness__uiUNorm;     // Offset:  164 Size:     4 [unused]
  float fFilmBlend__uiUNorm;         // Offset:  168 Size:     4 [unused]
  // align: 172 to 176
  ubyte align1[4];
  float3 fEmissiveBlendColor__uiColor;// Offset:  176 Size:    12 [unused]
  float fEmissiveBlendColorBlend__uiUNorm;// Offset:  188 Size:     4 [unused]
  float3 fEmissiveBlendRimParam;     // Offset:  192 Size:    12 [unused]
  float fDetailNormalBlend__uiUNorm; // Offset:  204 Size:     4 [unused]
  float4 fUVTransformDetailNormal;   // Offset:  208 Size:    16 [unused]

};

//CBSpeedTreePrimitiveInfo : 5718.shdr.src
struct CBSpeedTreePrimitiveInfo {


  uint4 iPrimitiveInfo;              // Offset:    0 Size:    16

};

//CBMhMaterialEM100Local__disclosure : 1798.shdr.src
struct CBMhMaterialEM100Local__disclosure {


  float4 fBaseMapFactor__uiColor;    // Offset:    0 Size:    16 [unused]
  float3 fEmissiveMapFactor__uiColor;// Offset:   16 Size:    12 [unused]
  float fMetalic__uiUNorm;           // Offset:   28 Size:     4 [unused]
  float fRoughness__uiUNorm;         // Offset:   32 Size:     4 [unused]
  float fSpecular__uiUNorm;          // Offset:   36 Size:     4 [unused]
  float fSubSurfaceBlend__uiUNorm;   // Offset:   40 Size:     4 [unused]
  uint iSubSurfaceProfile;           // Offset:   44 Size:     4 [unused]
  float fTranslucency__uiUNorm;      // Offset:   48 Size:     4 [unused]
  bool bBaseColorEmissive;           // Offset:   52 Size:     4 [unused]
  float2 fPaintUVTile;               // Offset:   56 Size:     8 [unused]
  float fAddNormalBlend__uiUNorm;    // Offset:   64 Size:     4 [unused]
  // align: 68 to 80
  ubyte align0[12];
  float4 fAddNormalMaskA__uiSNorm;   // Offset:   80 Size:    16 [unused]
  float4 fAddNormalMaskB__uiSNorm;   // Offset:   96 Size:    16 [unused]
  float fAddNormalMaskC__uiUNorm;    // Offset:  112 Size:     4 [unused]
  float fAddNormalMaskD__uiUNorm;    // Offset:  116 Size:     4 [unused]
  bool bBackFaceShading;             // Offset:  120 Size:     4 [unused]
  // align: 124 to 128
  ubyte align1[4];
  float4 fBackFaceColor__uiColor;    // Offset:  128 Size:    16 [unused]
  bool bBackFaceNormalFilp;          // Offset:  144 Size:     4 [unused]
  float3 fKizuColor__uiColor;        // Offset:  148 Size:    12 [unused]
  bool bLegendary;                   // Offset:  160 Size:     4 [unused]
  // align: 164 to 176
  ubyte align2[12];
  float4 fLegendColor__uiColor;      // Offset:  176 Size:    16 [unused]
  float2 fLegendMetalMask__uiUNorm;  // Offset:  192 Size:     8 [unused]
  float fLegendRoughness;            // Offset:  200 Size:     4 [unused]
  // align: 204 to 208
  ubyte align3[4];
  float2 fLegendFilm__uiUNorm;       // Offset:  208 Size:     8 [unused]
  float fLegendSSSMask__uiUNorm;     // Offset:  216 Size:     4 [unused]
  float fPartsMaskA__uiUNorm;        // Offset:  220 Size:     4 [unused]
  float fPartsMaskB__uiUNorm;        // Offset:  224 Size:     4 [unused]
  float fPartsMaskC__uiUNorm;        // Offset:  228 Size:     4 [unused]
  float fPartsMaskD__uiUNorm;        // Offset:  232 Size:     4 [unused]
  float fPartsMaskX__uiUNorm;        // Offset:  236 Size:     4 [unused]
  float fPartsMaskY__uiUNorm;        // Offset:  240 Size:     4 [unused]
  float fPartsMaskZ__uiUNorm;        // Offset:  244 Size:     4 [unused]
  float fPartsMaskW__uiUNorm;        // Offset:  248 Size:     4 [unused]
  bool bUseOffset;                   // Offset:  252 Size:     4
  float3 fFlowDirDir__uiDirection;   // Offset:  256 Size:    12 [unused]
  // align: 268 to 272
  ubyte align4[4];
  float4 fFlowControl__uiUNorm;      // Offset:  272 Size:    16 [unused]
  float fFlowTile;                   // Offset:  288 Size:     4 [unused]
  // align: 292 to 304
  ubyte align5[12];
  float4 fFlowColor__uiColor;        // Offset:  304 Size:    16 [unused]
  float4 fFlowMatControl__uiUNorm;   // Offset:  320 Size:    16 [unused]
  float4 fMaskBlend__uiUNorm;        // Offset:  336 Size:    16 [unused]
  float2 fMaskBlend_A__uiUNorm;      // Offset:  352 Size:     8 [unused]
  float2 fMaskBlend_B__uiUNorm;      // Offset:  360 Size:     8 [unused]
  float fFilmThickness__uiUNorm;     // Offset:  368 Size:     4 [unused]
  float fFilmBlend__uiUNorm;         // Offset:  372 Size:     4 [unused]
  float fRefraction__uiUNorm;        // Offset:  376 Size:     4 [unused]
  float fRefractionBlend__uiUNorm;   // Offset:  380 Size:     4 [unused]
  float4 fFurParam__uiUNorm;         // Offset:  384 Size:    16 [unused]
  float fFurTile;                    // Offset:  400 Size:     4 [unused]
  bool bUseFlipUV;                   // Offset:  404 Size:     4 [unused]

};

//CBOutline : 5189.shdr.src
struct CBOutline {


  float4 fLineColor;                 // Offset:    0 Size:    16 [unused]
  uint iTargetID;                    // Offset:   16 Size:     4 [unused]
  uint iSampleCount;                 // Offset:   20 Size:     4 [unused]
  uint iMarkerNum;                   // Offset:   24 Size:     4
  // align: 28 to 32
  ubyte align0[4];
  float4 fMarkerPosition[3];         // Offset:   32 Size:    48 [unused]
  float fRadius;                     // Offset:   80 Size:     4 [unused]
  float fFadeStartLength;            // Offset:   84 Size:     4 [unused]
  float fBlinkSpeed;                 // Offset:   88 Size:     4 [unused]
  float fBlinkMin;                   // Offset:   92 Size:     4 [unused]
  bool bDepthTest;                   // Offset:   96 Size:     4 [unused]

};

//SeaDisplacement : 5927.shdr.src
struct SeaDisplacement {


  row_major float4x4 fWorldMat;      // Offset:    0 Size:    64
  uint iVBStride;                    // Offset:   64 Size:     4
  uint iBaseVertexOffset;            // Offset:   68 Size:     4
  uint iVertexCount;                 // Offset:   72 Size:     4 [unused]
  uint iVBOffsetPosition;            // Offset:   76 Size:     4
  uint iVBOffsetTexcoord;            // Offset:   80 Size:     4
  float fWorldScaleY;                // Offset:   84 Size:     4
  float fSupposedVertexDistance;     // Offset:   88 Size:     4
  // align: 92 to 96
  ubyte align0[4];
  float2 fWindParam;                 // Offset:   96 Size:     8
  float fNoiseDensity;               // Offset:  104 Size:     4
  float fChoppyCoef;                 // Offset:  108 Size:     4

};

//CBBitonicSort : 5650.shdr.src
struct CBBitonicSort {


  uint iSortArrayLength;             // Offset:    0 Size:     4
  uint iCompareFlipSize;             // Offset:    4 Size:     4
  uint iCompareStride;               // Offset:    8 Size:     4 [unused]
  uint iCompareDir;                  // Offset:   12 Size:     4

};

//CBStarrySky : 5384.shdr.src
struct CBStarrySky {


  row_major float4x4 fRotMatrix;     // Offset:    0 Size:    64
  float2 fSize;                      // Offset:   64 Size:     8
  float fFactor;                     // Offset:   72 Size:     4 [unused]
  float fIntensity;                  // Offset:   76 Size:     4
  float fScintillation;              // Offset:   80 Size:     4

};

//CBMhMaterialVfxWaterLocal__disclosure : 3117.shdr.src
struct CBMhMaterialVfxWaterLocal__disclosure {


  float4 fBaseMapFactor__uiColor;    // Offset:    0 Size:    16 [unused]
  float3 fDistortionFactor__uiColor; // Offset:   16 Size:    12 [unused]
  // align: 28 to 32
  ubyte align0[4];
  float3 fCubeMapFactor__uiColor;    // Offset:   32 Size:    12 [unused]
  float fMetalic__uiUNorm;           // Offset:   44 Size:     4 [unused]
  float fRoughness__uiUNorm;         // Offset:   48 Size:     4 [unused]
  float VertexPow;                   // Offset:   52 Size:     4 [unused]
  float fOpacityFactor;              // Offset:   56 Size:     4 [unused]
  float fVertexOpacityFactor;        // Offset:   60 Size:     4 [unused]
  float fNormalFactor__uiUNorm;      // Offset:   64 Size:     4 [unused]
  // align: 68 to 80
  ubyte align1[12];
  float4 fUVTransformA;              // Offset:   80 Size:    16 [unused]
  float fVolumeBlend__uiSNorm;       // Offset:   96 Size:     4 [unused]
  bool bVertexColor;                 // Offset:  100 Size:     4 [unused]
  float fSpecularFactor;             // Offset:  104 Size:     4 [unused]
  float fRaflectionAngle__uiSNorm;   // Offset:  108 Size:     4 [unused]
  float fDistortionAngle;            // Offset:  112 Size:     4 [unused]
  float fDistortion;                 // Offset:  116 Size:     4 [unused]
  float fRimRate;                    // Offset:  120 Size:     4 [unused]
  float fRimOpacityPow;              // Offset:  124 Size:     4 [unused]
  float fRimOpacityFactor;           // Offset:  128 Size:     4 [unused]
  float fTranslucency__uiUNorm;      // Offset:  132 Size:     4 [unused]
  bool bSceneEnvMap;                 // Offset:  136 Size:     4 [unused]
  float fDiffuseChroma__uiUNorm;     // Offset:  140 Size:     4 [unused]
  float fSpecularChroma__uiUNorm;    // Offset:  144 Size:     4 [unused]
  float fInnerOffsetScale;           // Offset:  148 Size:     4
  float fVelocityAttn;               // Offset:  152 Size:     4 [unused]
  float fNormalDecalBlend__uiUNorm;  // Offset:  156 Size:     4 [unused]

};

//CBPartialColor : 4359.shdr.src
struct CBPartialColor {


  row_major float4x4 color_matrix;   // Offset:    0 Size:    64
  float compensate;                  // Offset:   64 Size:     4

};

//CBMhMaterialFlowLavaLocal__disclosure : 6730.shdr.src
struct CBMhMaterialFlowLavaLocal__disclosure {


  float4 fBaseMapFactor__uiColor;    // Offset:    0 Size:    16
  float3 fEmissiveMapFactor__uiColor;// Offset:   16 Size:    12 [unused]
  float fMetalic__uiUNorm;           // Offset:   28 Size:     4 [unused]
  float fRoughness__uiUNorm;         // Offset:   32 Size:     4 [unused]
  float fSpecular__uiUNorm;          // Offset:   36 Size:     4 [unused]
  float fSubSurfaceBlend__uiUNorm;   // Offset:   40 Size:     4 [unused]
  uint iSubSurfaceProfile;           // Offset:   44 Size:     4 [unused]
  float fDetailNormalBlend__uiUNorm; // Offset:   48 Size:     4 [unused]
  // align: 52 to 64
  ubyte align0[12];
  float4 fUVTransformA;              // Offset:   64 Size:    16
  float4 fUVTransformB;              // Offset:   80 Size:    16 [unused]
  float fTranslucency__uiUNorm;      // Offset:   96 Size:     4 [unused]
  float3 fEmissiveBlendColor__uiColor;// Offset:  100 Size:    12 [unused]
  float fEmissiveBlendColorBlend__uiUNorm;// Offset:  112 Size:     4 [unused]
  float3 fEmissiveBlendRimParam;     // Offset:  116 Size:    12 [unused]
  float3 fFlowDirDir__uiDirection;   // Offset:  128 Size:    12
  float fFlowDirUVPhaseShift__uiUNorm;// Offset:  140 Size:     4
  bool bFlowDirLocalSpace;           // Offset:  144 Size:     4
  float fFlowControl;                // Offset:  148 Size:     4
  float2 fEmitControl__uiUNorm;      // Offset:  152 Size:     8 [unused]

};

//CBVRCompute : 996.shdr.src
struct CBVRCompute {


  uint iCountOffset;                 // Offset:    0 Size:     4

};

//CBSSSSS_Profile : 1649.shdr.src
struct CBSSSSS_Profile {


  float4 fRGBBlurWeight[16];         // Offset:    0 Size:   256
  float4 fBlurOffset[8];             // Offset:  256 Size:   128
  float4 fBlurTargetDist;            // Offset:  384 Size:    16

};

//CBConstant : 4787.shdr.src
struct CBConstant {


  uint iUserConstant;                // Offset:    0 Size:     4

};

//CBViewProjection : 999.shdr.src
struct CBViewProjection {


  row_major float4x4 fViewProj;      // Offset:    0 Size:    64 [unused]
  row_major float4x4 fView;          // Offset:   64 Size:    64 [unused]
  row_major float4x4 fProj;          // Offset:  128 Size:    64 [unused]
  row_major float4x4 fViewI;         // Offset:  192 Size:    64 [unused]
  row_major float4x4 fProjI;         // Offset:  256 Size:    64 [unused]
  row_major float4x4 fViewProjI;     // Offset:  320 Size:    64 [unused]
  float3 fCameraPos;                 // Offset:  384 Size:    12 [unused]
  // align: 396 to 400
  ubyte align0[4];
  float3 fCameraDir;                 // Offset:  400 Size:    12 [unused]
  // align: 412 to 416
  ubyte align1[4];
  float3 fZToLinear;                 // Offset:  416 Size:    12
  float fCameraNearClip;             // Offset:  428 Size:     4 [unused]
  float fCameraFarClip;              // Offset:  432 Size:     4 [unused]
  float fCameraTargetDist;           // Offset:  436 Size:     4 [unused]
  // align: 440 to 448
  ubyte align2[8];
  float4 fPassThrough;               // Offset:  448 Size:    16 [unused]
  float3 fLODBasePos;                // Offset:  464 Size:    12 [unused]
  // align: 476 to 480
  ubyte align3[4];
  row_major float4x4 fViewProjPF;    // Offset:  480 Size:    64 [unused]
  row_major float4x4 fViewProjIPF;   // Offset:  544 Size:    64 [unused]
  row_major float4x4 fViewPF;        // Offset:  608 Size:    64 [unused]
  row_major float4x4 fProjPF;        // Offset:  672 Size:    64 [unused]
  row_major float4x4 fViewProjIViewProjPF;// Offset:  736 Size:    64 [unused]
  row_major float4x4 fNoJitterProj;  // Offset:  800 Size:    64 [unused]
  row_major float4x4 fNoJitterViewProj;// Offset:  864 Size:    64 [unused]
  row_major float4x4 fNoJitterViewProjI;// Offset:  928 Size:    64 [unused]
  row_major float4x4 fNoJitterViewProjIViewProjPF;// Offset:  992 Size:    64 [unused]

};

//CBMhMaterialFlowDirLocal__disclosure : 1478.shdr.src
struct CBMhMaterialFlowDirLocal__disclosure {


  float4 fBaseMapFactor__uiColor;    // Offset:    0 Size:    16
  float3 fEmissiveMapFactor__uiColor;// Offset:   16 Size:    12 [unused]
  float fMetalic__uiUNorm;           // Offset:   28 Size:     4 [unused]
  float fRoughness__uiUNorm;         // Offset:   32 Size:     4 [unused]
  float fSpecular__uiUNorm;          // Offset:   36 Size:     4 [unused]
  float fSubSurfaceBlend__uiUNorm;   // Offset:   40 Size:     4 [unused]
  uint iSubSurfaceProfile;           // Offset:   44 Size:     4 [unused]
  float fDetailNormalBlend__uiUNorm; // Offset:   48 Size:     4 [unused]
  // align: 52 to 64
  ubyte align0[12];
  float4 fUVTransformA;              // Offset:   64 Size:    16
  float4 fUVTransformB;              // Offset:   80 Size:    16 [unused]
  float fTranslucency__uiUNorm;      // Offset:   96 Size:     4 [unused]
  float3 fEmissiveBlendColor__uiColor;// Offset:  100 Size:    12 [unused]
  float fEmissiveBlendColorBlend__uiUNorm;// Offset:  112 Size:     4 [unused]
  float3 fEmissiveBlendRimParam;     // Offset:  116 Size:    12 [unused]
  float3 fFlowDirDir__uiDirection;   // Offset:  128 Size:    12
  float fFlowDirUVPhaseShift__uiUNorm;// Offset:  140 Size:     4
  bool bFlowDirLocalSpace;           // Offset:  144 Size:     4
  float fFlowDirFlowSpeed__uiUNorm;  // Offset:  148 Size:     4

};

//CBLGTPRBDebug : 5729.shdr.src
struct CBLGTPRBDebug {


  float fProbeSize;                  // Offset:    0 Size:     4 [unused]
  float3 lineColor;                  // Offset:    4 Size:    12
  uint iProbeDebugType;              // Offset:   16 Size:     4 [unused]

};

//CBVRCommon : 997.shdr.src
struct CBVRCommon {


  uint iNumVolumes;                  // Offset:    0 Size:     4 [unused]
  float fGIFactor;                   // Offset:    4 Size:     4 [unused]
  float fGIFactorShadow;             // Offset:    8 Size:     4 [unused]
  // align: 12 to 16
  ubyte align0[4];
  uint2 froxelDim;                   // Offset:   16 Size:     8
  uint2 checkerDim;                  // Offset:   24 Size:     8 [unused]
  float2 froxelDimInv;               // Offset:   32 Size:     8 [unused]
  float2 checkerDimInv;              // Offset:   40 Size:     8 [unused]
  float3 froxelZMinMax;              // Offset:   48 Size:    12 [unused]
  // align: 60 to 64
  ubyte align1[4];
  float fOrdered3x3[9];              // Offset:   64 Size:   132 [unused]
  // align: 196 to 208
  ubyte align2[12];
  float fOrdered4x4[16];             // Offset:  208 Size:   244 [unused]
  // align: 452 to 464
  ubyte align3[12];
  float fOrdered8x8[64];             // Offset:  464 Size:  1012 [unused]
  // align: 1476 to 1488
  ubyte align4[12];
  float2 haltonXY[8];                // Offset: 1488 Size:   120 [unused]
  float fVRDeltaTime;                // Offset: 1608 Size:     4 [unused]
  uint iJitterType;                  // Offset: 1612 Size:     4 [unused]
  uint iFrameCount;                  // Offset: 1616 Size:     4 [unused]
  bool bAlphaDitherFarClip;          // Offset: 1620 Size:     4 [unused]

};

//CB_CombinedFilter_ImagePlane : 6309.shdr.src
struct CB_CombinedFilter_ImagePlane {


  uint iBlendType;                   // Offset:    0 Size:     4
  // align: 4 to 16
  ubyte align0[12];
  row_major float4x4 fUVTransform;   // Offset:   16 Size:    64 [unused]
  float4 fPlaneColor;                // Offset:   80 Size:    16

};

//CBFilter2 : 6308.shdr.src
struct CBFilter2 {


  float2 fFilterUVMin;               // Offset:    0 Size:     8
  float2 fFilterUVMax;               // Offset:    8 Size:     8
  float fFilterSampleOffsets[11];    // Offset:   16 Size:   164
  // align: 180 to 192
  ubyte align0[12];
  float fFilterSampleWeights[11];    // Offset:  192 Size:   164
  float fFilterThreshold;            // Offset:  356 Size:     4 [unused]

};

//CBPrimSystem : 999.shdr.src
struct CBPrimSystem {


  float fPrimGammaCorrect;           // Offset:    0 Size:     4
  float fPrimAlphaLowerLimit;        // Offset:    4 Size:     4
  float fPrimGlobalLightReflectance; // Offset:    8 Size:     4 [unused]
  int iPrimMainLightIndex;           // Offset:   12 Size:     4 [unused]

};

//CBLuminance : 730.shdr.src
struct CBLuminance {


  uint iView;                        // Offset:    0 Size:     4
  float fKeyValue;                   // Offset:    4 Size:     4 [unused]
  bool bClearHistory;                // Offset:    8 Size:     4 [unused]
  float fLuminanceLogScale;          // Offset:   12 Size:     4 [unused]
  float fLuminanceLogBias;           // Offset:   16 Size:     4 [unused]
  float fLuminanceExpScale;          // Offset:   20 Size:     4 [unused]
  float fLuminanceExpBias;           // Offset:   24 Size:     4 [unused]
  float fWhiteRange;                 // Offset:   28 Size:     4 [unused]
  float fExposureValue;              // Offset:   32 Size:     4
  float fDarkSensitivity;            // Offset:   36 Size:     4 [unused]
  float fLightSensitivity;           // Offset:   40 Size:     4 [unused]
  float fDarkAdaptationLimit;        // Offset:   44 Size:     4 [unused]
  float fLightAdaptationLimit;       // Offset:   48 Size:     4 [unused]

};

//CBMhMaterialPLEditFaceLocal__disclosure : 3907.shdr.src
struct CBMhMaterialPLEditFaceLocal__disclosure {


  float4 fBaseMapFactor__uiColor;    // Offset:    0 Size:    16
  float3 fEmissiveMapFactor__uiColor;// Offset:   16 Size:    12 [unused]
  float fMetalic__uiUNorm;           // Offset:   28 Size:     4 [unused]
  float fRoughness__uiUNorm;         // Offset:   32 Size:     4 [unused]
  float fSpecular__uiUNorm;          // Offset:   36 Size:     4 [unused]
  float fSubSurfaceBlend__uiUNorm;   // Offset:   40 Size:     4 [unused]
  uint iSubSurfaceProfile;           // Offset:   44 Size:     4 [unused]
  float fTranslucency__uiUNorm;      // Offset:   48 Size:     4 [unused]
  bool bBaseColorEmissive;           // Offset:   52 Size:     4 [unused]
  bool bBackFaceNormalFilp;          // Offset:   56 Size:     4 [unused]
  float fAnimEmitMin;                // Offset:   60 Size:     4 [unused]
  float fAnimEmitSpeed;              // Offset:   64 Size:     4 [unused]
  float2 fAddColorUV__uiUNorm;       // Offset:   68 Size:     8 [unused]
  // align: 76 to 80
  ubyte align0[4];
  float4 fAddNormalMaskA__uiUNorm;   // Offset:   80 Size:    16 [unused]
  float4 fAddNormalMaskB__uiUNorm;   // Offset:   96 Size:    16 [unused]
  float4 fAddNormalMaskC__uiUNorm;   // Offset:  112 Size:    16 [unused]
  float4 fAddNormalMaskD__uiUNorm;   // Offset:  128 Size:    16 [unused]
  bool bUseSkin;                     // Offset:  144 Size:     4 [unused]
  float2 fPaintMapRC;                // Offset:  148 Size:     8 [unused]
  float fPaintMapNum;                // Offset:  156 Size:     4 [unused]
  float4 fPaintMapOffset__uiSNorm;   // Offset:  160 Size:    16 [unused]
  float4 fPaintColor__uiColor;       // Offset:  176 Size:    16 [unused]
  float fPaintRoughness__uiUNorm;    // Offset:  192 Size:     4 [unused]
  float fPaintMetal__uiUNorm;        // Offset:  196 Size:     4 [unused]
  float fPaintMapNumB;               // Offset:  200 Size:     4 [unused]
  // align: 204 to 208
  ubyte align1[4];
  float4 fPaintMapOffsetB__uiSNorm;  // Offset:  208 Size:    16 [unused]
  float4 fPaintColorB__uiColor;      // Offset:  224 Size:    16 [unused]
  float fPaintRoughnessB__uiUNorm;   // Offset:  240 Size:     4 [unused]
  float fPaintMetalB__uiUNorm;       // Offset:  244 Size:     4 [unused]
  float2 fFaceNormalBlend__uiUNorm;  // Offset:  248 Size:     8
  float fMayuMapNum;                 // Offset:  256 Size:     4 [unused]
  float2 fMayuMapOffset__uiSNorm;    // Offset:  260 Size:     8 [unused]
  // align: 268 to 272
  ubyte align2[4];
  float2 fMayuMapRC;                 // Offset:  272 Size:     8 [unused]
  // align: 280 to 288
  ubyte align3[8];
  float4 fMayuColor__uiColor;        // Offset:  288 Size:    16 [unused]
  bool bPaintEmit;                   // Offset:  304 Size:     4 [unused]
  bool bPaintEmitB;                  // Offset:  308 Size:     4 [unused]
  float fDetailNormalBlend__uiUNorm; // Offset:  312 Size:     4 [unused]
  // align: 316 to 320
  ubyte align4[4];
  float4 fUVTransformDetailNormal;   // Offset:  320 Size:    16 [unused]

};

//CBMhMaterialNPCEditFaceLocal__disclosure : 3782.shdr.src
struct CBMhMaterialNPCEditFaceLocal__disclosure {


  float4 fBaseMapFactor__uiColor;    // Offset:    0 Size:    16
  float3 fEmissiveMapFactor__uiColor;// Offset:   16 Size:    12 [unused]
  float fMetalic__uiUNorm;           // Offset:   28 Size:     4 [unused]
  float fRoughness__uiUNorm;         // Offset:   32 Size:     4 [unused]
  float fSpecular__uiUNorm;          // Offset:   36 Size:     4 [unused]
  float fSubSurfaceBlend__uiUNorm;   // Offset:   40 Size:     4 [unused]
  uint iSubSurfaceProfile;           // Offset:   44 Size:     4 [unused]
  float fTranslucency__uiUNorm;      // Offset:   48 Size:     4 [unused]
  bool bBaseColorEmissive;           // Offset:   52 Size:     4 [unused]
  bool bBackFaceNormalFilp;          // Offset:   56 Size:     4 [unused]
  float fAnimEmitMin;                // Offset:   60 Size:     4 [unused]
  float fAnimEmitSpeed;              // Offset:   64 Size:     4 [unused]
  float2 fAddColorUV__uiUNorm;       // Offset:   68 Size:     8 [unused]
  // align: 76 to 80
  ubyte align0[4];
  float4 fAddNormalMaskA__uiUNorm;   // Offset:   80 Size:    16 [unused]
  float4 fAddNormalMaskB__uiUNorm;   // Offset:   96 Size:    16 [unused]
  float4 fAddNormalMaskC__uiUNorm;   // Offset:  112 Size:    16 [unused]
  float4 fAddNormalMaskD__uiUNorm;   // Offset:  128 Size:    16 [unused]
  bool bUseSkin;                     // Offset:  144 Size:     4 [unused]
  float2 fPaintMapRC;                // Offset:  148 Size:     8 [unused]
  float fPaintMapNum;                // Offset:  156 Size:     4 [unused]
  float4 fPaintMapOffset__uiSNorm;   // Offset:  160 Size:    16 [unused]
  float4 fPaintColor__uiColor;       // Offset:  176 Size:    16 [unused]
  float fPaintRoughness__uiUNorm;    // Offset:  192 Size:     4 [unused]
  float fPaintMetal__uiUNorm;        // Offset:  196 Size:     4 [unused]
  float fPaintMapNumB;               // Offset:  200 Size:     4 [unused]
  // align: 204 to 208
  ubyte align1[4];
  float4 fPaintMapOffsetB__uiSNorm;  // Offset:  208 Size:    16 [unused]
  float4 fPaintColorB__uiColor;      // Offset:  224 Size:    16 [unused]
  float fPaintRoughnessB__uiUNorm;   // Offset:  240 Size:     4 [unused]
  float fPaintMetalB__uiUNorm;       // Offset:  244 Size:     4 [unused]
  float2 fFaceNormalBlend__uiUNorm;  // Offset:  248 Size:     8
  float fMayuMapNum;                 // Offset:  256 Size:     4 [unused]
  float2 fMayuMapOffset__uiSNorm;    // Offset:  260 Size:     8 [unused]
  // align: 268 to 272
  ubyte align2[4];
  float2 fMayuMapRC;                 // Offset:  272 Size:     8 [unused]
  // align: 280 to 288
  ubyte align3[8];
  float4 fMayuColor__uiColor;        // Offset:  288 Size:    16 [unused]
  bool bPaintEmit;                   // Offset:  304 Size:     4 [unused]
  bool bPaintEmitB;                  // Offset:  308 Size:     4 [unused]
  float fDetailNormalBlend__uiUNorm; // Offset:  312 Size:     4 [unused]
  // align: 316 to 320
  ubyte align4[4];
  float4 fUVTransformDetailNormal;   // Offset:  320 Size:    16 [unused]

};

//CBMhMaterialStdLocal__disclosure : 3218.shdr.src
struct CBMhMaterialStdLocal__disclosure {


  float4 fBaseMapFactor__uiColor;    // Offset:    0 Size:    16
  float3 fEmissiveMapFactor__uiColor;// Offset:   16 Size:    12 [unused]
  float fMetalic__uiUNorm;           // Offset:   28 Size:     4 [unused]
  float fRoughness__uiUNorm;         // Offset:   32 Size:     4 [unused]
  float fSpecular__uiUNorm;          // Offset:   36 Size:     4 [unused]
  float fSubSurfaceBlend__uiUNorm;   // Offset:   40 Size:     4 [unused]
  uint iSubSurfaceProfile;           // Offset:   44 Size:     4 [unused]
  float fDetailNormalBlend__uiUNorm; // Offset:   48 Size:     4 [unused]
  // align: 52 to 64
  ubyte align0[12];
  float4 fUVTransformA;              // Offset:   64 Size:    16
  float4 fUVTransformB;              // Offset:   80 Size:    16 [unused]
  float4 fBaseMapModulation__uiUNorm;// Offset:   96 Size:    16 [unused]
  float fTranslucency__uiUNorm;      // Offset:  112 Size:     4 [unused]
  float3 fEmissiveBlendColor__uiColor;// Offset:  116 Size:    12 [unused]
  float fEmissiveBlendColorBlend__uiUNorm;// Offset:  128 Size:     4 [unused]
  float3 fEmissiveBlendRimParam;     // Offset:  132 Size:    12 [unused]
  bool bSpecialBlend;                // Offset:  144 Size:     4 [unused]
  float fFurNormalBlend__uiUNorm;    // Offset:  148 Size:     4 [unused]
  float fFurHeight__uiUNorm;         // Offset:  152 Size:     4 [unused]
  float fFurMapBlend__uiUNorm;       // Offset:  156 Size:     4 [unused]
  float fFurEdgeBlend__uiUNorm;      // Offset:  160 Size:     4 [unused]
  float fFurTile;                    // Offset:  164 Size:     4 [unused]
  bool bFakeRefraction;              // Offset:  168 Size:     4 [unused]
  float fRefraction__uiUNorm;        // Offset:  172 Size:     4 [unused]
  float3 fWetBlendDir__uiDirection;  // Offset:  176 Size:    12 [unused]
  float fWetBlendPlaneNormal__uiUNorm;// Offset:  188 Size:     4 [unused]
  float3 fWetBlendOp;                // Offset:  192 Size:    12 [unused]
  bool bWetNormalBlend;              // Offset:  204 Size:     4 [unused]
  float2 fWetNormalBlendRange__uiUNorm;// Offset:  208 Size:     8 [unused]

};

//CBGaussian : 960.shdr.src
struct CBGaussian {


  float4 fOffset0;                   // Offset:    0 Size:    16
  float4 fOffset1;                   // Offset:   16 Size:    16
  float4 fWeight0;                   // Offset:   32 Size:    16
  float4 fWeight1;                   // Offset:   48 Size:    16
  float fEdgeSharpness;              // Offset:   64 Size:     4 [unused]

};

//CBRadialBlurFilter : 6147.shdr.src
struct CBRadialBlurFilter {


  float2 fRadialBlurCenter;          // Offset:    0 Size:     8
  float fRadialBlurStart;            // Offset:    8 Size:     4
  float fRadialBlurWidth;            // Offset:   12 Size:     4
  float4 fRadialBlurColor;           // Offset:   16 Size:    16
  float fRadialBlurThrethold;        // Offset:   32 Size:     4
  float fRadialBlurWidthScale;       // Offset:   36 Size:     4
  float fRadialBlurWidthOffset;      // Offset:   40 Size:     4
  uint fRadialBlurSampleCount;       // Offset:   44 Size:     4
  float3 fRadialBlurChromaticAberration;// Offset:   48 Size:    12
  float fRadialBlurBlurScreenAlpha;  // Offset:   60 Size:     4
  float fRadialBlurBlurCurve[256];   // Offset:   64 Size:  4084

};

//CBGodRaysConfiguration : 599.shdr.src
struct CBGodRaysConfiguration {


  bool isUseOcclusionFactorFromTexture;// Offset:    0 Size:     4 [unused]
  bool isUseAlphaOcclusion;          // Offset:    4 Size:     4 [unused]
  bool isUseScaleOcclusion;          // Offset:    8 Size:     4 [unused]
  bool isGrayColor;                  // Offset:   12 Size:     4
  int iThreshold;                    // Offset:   16 Size:     4

};

//CBNormalMerge : 2877.shdr.src
struct CBNormalMerge {


  uint iNmSrcOffset;                 // Offset:    0 Size:     4 [unused]
  uint iNmVertexCount;               // Offset:    4 Size:     4
  uint iNmDestOffset;                // Offset:    8 Size:     4
  uint iNmDestStride;                // Offset:   12 Size:     4
  uint iNmRedirectOffset;            // Offset:   16 Size:     4
  bool iNmBlendFlag;                 // Offset:   20 Size:     4
  uint iNmStride;                    // Offset:   24 Size:     4
  uint iNmOffset;                    // Offset:   28 Size:     4
  uint iNmRateOffset;                // Offset:   32 Size:     4

};

//CBMhMaterialEC021Local__disclosure : 3279.shdr.src
struct CBMhMaterialEC021Local__disclosure {


  float4 fBaseMapFactor__uiColor;    // Offset:    0 Size:    16
  float3 fEmissiveMapFactor__uiColor;// Offset:   16 Size:    12 [unused]
  float fMetalic__uiUNorm;           // Offset:   28 Size:     4 [unused]
  float fRoughness__uiUNorm;         // Offset:   32 Size:     4 [unused]
  float fSpecular__uiUNorm;          // Offset:   36 Size:     4 [unused]
  float fSubSurfaceBlend__uiUNorm;   // Offset:   40 Size:     4 [unused]
  uint iSubSurfaceProfile;           // Offset:   44 Size:     4 [unused]
  float fTranslucency__uiUNorm;      // Offset:   48 Size:     4 [unused]
  // align: 52 to 64
  ubyte align0[12];
  float4 fUVTransformA;              // Offset:   64 Size:    16
  bool bUseColorMask;                // Offset:   80 Size:     4 [unused]
  // align: 84 to 96
  ubyte align1[12];
  float4 fAddColorA__uiColor;        // Offset:   96 Size:    16 [unused]
  float4 fAddColorB__uiColor;        // Offset:  112 Size:    16 [unused]
  float4 fAddColorC__uiColor;        // Offset:  128 Size:    16 [unused]
  float4 fAddColorD__uiColor;        // Offset:  144 Size:    16 [unused]
  float4 fBaseMapMod__uiUNorm;       // Offset:  160 Size:    16 [unused]
  float4 fBaseMapModLimitMax__uiUNorm;// Offset:  176 Size:    16 [unused]
  float4 fBaseMapModLimitMin__uiUNorm;// Offset:  192 Size:    16 [unused]
  float3 fEmissiveBlendColor__uiColor;// Offset:  208 Size:    12 [unused]
  float fEmissiveBlendColorBlend__uiUNorm;// Offset:  220 Size:     4 [unused]
  float3 fEmissiveBlendRimParam;     // Offset:  224 Size:    12 [unused]
  float fFilmThickness__uiUNorm;     // Offset:  236 Size:     4 [unused]
  float fFilmBlend__uiUNorm;         // Offset:  240 Size:     4 [unused]
  bool bBaseColorEmissive;           // Offset:  244 Size:     4 [unused]
  // align: 248 to 256
  ubyte align2[8];
  float4 fFurParam__uiUNorm;         // Offset:  256 Size:    16 [unused]
  float fFurTile;                    // Offset:  272 Size:     4 [unused]
  float fFinWave;                    // Offset:  276 Size:     4 [unused]
  float fFinSpeed;                   // Offset:  280 Size:     4 [unused]
  // align: 284 to 288
  ubyte align3[4];
  float3 fFinColor__uiColor;         // Offset:  288 Size:    12 [unused]

};

//CBVRGaussian : 1003.shdr.src
struct CBVRGaussian {


  float4 fOffsets;                   // Offset:    0 Size:    16
  float fWeights[5];                 // Offset:   16 Size:    68
  float fEdgeSharpness;              // Offset:   84 Size:     4

};

//CBInstancing : 99.shdr.src
struct CBInstancing {


  uint iInstanceIndex;               // Offset:    0 Size:     4

};

//CBColorCorrectToneCurve : 6440.shdr.src
struct CBColorCorrectToneCurve {


  float4 fToneColor[256];            // Offset:    0 Size:  4096

};

//CBMhMaterialLandscapeFlowLocal__disclosure : 1983.shdr.src
struct CBMhMaterialLandscapeFlowLocal__disclosure {


  float4 fBaseMapFactor__uiColor;    // Offset:    0 Size:    16 [unused]
  float3 fEmissiveMapFactor__uiColor;// Offset:   16 Size:    12 [unused]
  float fMetalic__uiUNorm;           // Offset:   28 Size:     4 [unused]
  float fRoughness__uiUNorm;         // Offset:   32 Size:     4 [unused]
  float fSpecular__uiUNorm;          // Offset:   36 Size:     4 [unused]
  float fSubSurfaceBlend__uiUNorm;   // Offset:   40 Size:     4 [unused]
  uint iSubSurfaceProfile;           // Offset:   44 Size:     4 [unused]
  float fDetailNormalBlend__uiUNorm; // Offset:   48 Size:     4 [unused]
  // align: 52 to 64
  ubyte align0[12];
  float4 fUVTransformA;              // Offset:   64 Size:    16 [unused]
  float4 fUVTransformB;              // Offset:   80 Size:    16 [unused]
  float fTranslucency__uiUNorm;      // Offset:   96 Size:     4 [unused]
  // align: 100 to 112
  ubyte align1[12];
  float4 fUVTransformC;              // Offset:  112 Size:    16 [unused]
  float4 fUVTransformD;              // Offset:  128 Size:    16 [unused]
  float4 fUVTransformE;              // Offset:  144 Size:    16 [unused]
  float fParallaxFactor__uiUNorm;    // Offset:  160 Size:     4 [unused]
  float fParallaxMinSampleNum__uiUNorm;// Offset:  164 Size:     4 [unused]
  float fParallaxMaxSampleNum__uiUNorm;// Offset:  168 Size:     4 [unused]
  float fBlendHeightMin__uiUNorm;    // Offset:  172 Size:     4 [unused]
  float fBlendHeightMax__uiUNorm;    // Offset:  176 Size:     4 [unused]
  float fParallaxAttenDistanceBegin; // Offset:  180 Size:     4 [unused]
  float fParallaxAttenDistanceEnd;   // Offset:  184 Size:     4 [unused]
  float fParallaxVertexOffset;       // Offset:  188 Size:     4
  bool bSpecialBlend;                // Offset:  192 Size:     4 [unused]
  bool bWetNormalBlend;              // Offset:  196 Size:     4 [unused]
  float2 fWetNormalBlendRange__uiUNorm;// Offset:  200 Size:     8 [unused]
  float3 fFlowDirDir__uiDirection;   // Offset:  208 Size:    12 [unused]
  // align: 220 to 224
  ubyte align2[4];
  float2 fFlowDirUVPhaseShift__uiUNorm;// Offset:  224 Size:     8 [unused]
  float fFlowDirFlowSpeed__uiUNorm;  // Offset:  232 Size:     4 [unused]
  bool bFlowDirVfxNormalBlend;       // Offset:  236 Size:     4 [unused]

};

//CBMhMaterialEM103Local__disclosure : 1573.shdr.src
struct CBMhMaterialEM103Local__disclosure {


  float4 fBaseMapFactor__uiColor;    // Offset:    0 Size:    16 [unused]
  float3 fEmissiveMapFactor__uiColor;// Offset:   16 Size:    12 [unused]
  float fMetalic__uiUNorm;           // Offset:   28 Size:     4 [unused]
  float fRoughness__uiUNorm;         // Offset:   32 Size:     4 [unused]
  float fSpecular__uiUNorm;          // Offset:   36 Size:     4 [unused]
  float fSubSurfaceBlend__uiUNorm;   // Offset:   40 Size:     4 [unused]
  uint iSubSurfaceProfile;           // Offset:   44 Size:     4 [unused]
  float fTranslucency__uiUNorm;      // Offset:   48 Size:     4 [unused]
  bool bBaseColorEmissive;           // Offset:   52 Size:     4 [unused]
  float2 fPaintUVTile;               // Offset:   56 Size:     8 [unused]
  float fAddNormalBlend__uiUNorm;    // Offset:   64 Size:     4 [unused]
  // align: 68 to 80
  ubyte align0[12];
  float4 fAddNormalMaskA__uiSNorm;   // Offset:   80 Size:    16 [unused]
  float4 fAddNormalMaskB__uiSNorm;   // Offset:   96 Size:    16 [unused]
  float fAddNormalMaskC__uiUNorm;    // Offset:  112 Size:     4 [unused]
  float fAddNormalMaskD__uiUNorm;    // Offset:  116 Size:     4 [unused]
  bool bBackFaceShading;             // Offset:  120 Size:     4 [unused]
  // align: 124 to 128
  ubyte align1[4];
  float4 fBackFaceColor__uiColor;    // Offset:  128 Size:    16 [unused]
  bool bBackFaceNormalFilp;          // Offset:  144 Size:     4 [unused]
  float3 fKizuColor__uiColor;        // Offset:  148 Size:    12 [unused]
  bool bLegendary;                   // Offset:  160 Size:     4 [unused]
  // align: 164 to 176
  ubyte align2[12];
  float4 fLegendColor__uiColor;      // Offset:  176 Size:    16 [unused]
  float2 fLegendMetalMask__uiUNorm;  // Offset:  192 Size:     8 [unused]
  float fLegendRoughness;            // Offset:  200 Size:     4 [unused]
  // align: 204 to 208
  ubyte align3[4];
  float2 fLegendFilm__uiUNorm;       // Offset:  208 Size:     8 [unused]
  float fLegendSSSMask__uiUNorm;     // Offset:  216 Size:     4 [unused]
  float fPartsMaskA__uiUNorm;        // Offset:  220 Size:     4 [unused]
  float fPartsMaskB__uiUNorm;        // Offset:  224 Size:     4 [unused]
  float fPartsMaskC__uiUNorm;        // Offset:  228 Size:     4 [unused]
  float fPartsMaskD__uiUNorm;        // Offset:  232 Size:     4 [unused]
  float fPartsMaskX__uiUNorm;        // Offset:  236 Size:     4 [unused]
  float fPartsMaskY__uiUNorm;        // Offset:  240 Size:     4 [unused]
  float fPartsMaskZ__uiUNorm;        // Offset:  244 Size:     4 [unused]
  float fPartsMaskW__uiUNorm;        // Offset:  248 Size:     4 [unused]
  bool bUseOffset;                   // Offset:  252 Size:     4
  float3 fFlowDirDir__uiDirection;   // Offset:  256 Size:    12 [unused]
  // align: 268 to 272
  ubyte align4[4];
  float4 fFlowControl__uiUNorm;      // Offset:  272 Size:    16 [unused]
  float fFlowTile;                   // Offset:  288 Size:     4 [unused]
  // align: 292 to 304
  ubyte align5[12];
  float4 fFlowColor__uiColor;        // Offset:  304 Size:    16 [unused]
  float4 fFlowMatControl__uiUNorm;   // Offset:  320 Size:    16 [unused]
  float fFilmThickness__uiUNorm;     // Offset:  336 Size:     4 [unused]
  float fFilmBlend__uiUNorm;         // Offset:  340 Size:     4 [unused]
  float fRefraction__uiUNorm;        // Offset:  344 Size:     4 [unused]
  float fRefractionBlend__uiUNorm;   // Offset:  348 Size:     4 [unused]
  float fAlbedoBlend__uiUNorm;       // Offset:  352 Size:     4 [unused]
  bool bPartsAlpha;                  // Offset:  356 Size:     4 [unused]
  // align: 360 to 368
  ubyte align6[8];
  float4 fBlendBaseMapFactor__uiColor;// Offset:  368 Size:    16 [unused]
  float4 fBlendMatFactor;            // Offset:  384 Size:    16 [unused]
  bool bUseBlendDisplace;            // Offset:  400 Size:     4
  float fVAnimV__uiUNorm;            // Offset:  404 Size:     4
  float fVAnimPosScale;              // Offset:  408 Size:     4
  bool bInvertX;                     // Offset:  412 Size:     4

};

//CBFilter : 960.shdr.src
struct CBFilter {


  float4 fFilterRegion;              // Offset:    0 Size:    16
  float fFilterMipLevel;             // Offset:   16 Size:     4

};

//CBMhMaterialSpeedTreeStdBlendLocal__disclosure : 5722.shdr.src
struct CBMhMaterialSpeedTreeStdBlendLocal__disclosure {


  float4 fBaseMapFactor__uiColor;    // Offset:    0 Size:    16
  float3 fEmissiveMapFactor__uiColor;// Offset:   16 Size:    12 [unused]
  float fMetalic__uiUNorm;           // Offset:   28 Size:     4 [unused]
  float fRoughness__uiUNorm;         // Offset:   32 Size:     4 [unused]
  float fSpecular__uiUNorm;          // Offset:   36 Size:     4 [unused]
  float fSubSurfaceBlend__uiUNorm;   // Offset:   40 Size:     4 [unused]
  uint iSubSurfaceProfile;           // Offset:   44 Size:     4 [unused]
  float fDetailNormalBlend__uiUNorm; // Offset:   48 Size:     4 [unused]
  // align: 52 to 64
  ubyte align0[12];
  float4 fUVTransformA;              // Offset:   64 Size:    16
  float4 fUVTransformB;              // Offset:   80 Size:    16 [unused]
  float fTranslucency__uiUNorm;      // Offset:   96 Size:     4 [unused]
  // align: 100 to 112
  ubyte align1[12];
  float4 fBlendBaseMapFactor__uiColor;// Offset:  112 Size:    16 [unused]
  float3 fBlendEmissiveMapFactor__uiColor;// Offset:  128 Size:    12 [unused]
  float fBlendMetalic__uiUNorm;      // Offset:  140 Size:     4 [unused]
  float fBlendRoughness__uiUNorm;    // Offset:  144 Size:     4 [unused]
  float fBlendDetailNormalBlend__uiUNorm;// Offset:  148 Size:     4 [unused]
  float fBlendSubSurfaceBlend__uiUNorm;// Offset:  152 Size:     4 [unused]
  float fBlendRoughnessThreshold__uiUNorm;// Offset:  156 Size:     4 [unused]
  float fBlendRoughnessFillValue__uiUNorm;// Offset:  160 Size:     4 [unused]
  // align: 164 to 176
  ubyte align2[12];
  float4 fBlendUVTransformA;         // Offset:  176 Size:    16 [unused]
  float4 fBlendUVTransformB;         // Offset:  192 Size:    16 [unused]
  bool bUseUVSecondaryMtA;           // Offset:  208 Size:     4
  bool bUseUVSecondaryMtB;           // Offset:  212 Size:     4 [unused]
  bool bUseUVSecondaryMtBM;          // Offset:  216 Size:     4 [unused]
  bool bUseUVSecondaryDetailNMtA;    // Offset:  220 Size:     4 [unused]
  bool bUseUVSecondaryDetailNMtB;    // Offset:  224 Size:     4 [unused]
  bool bLightProbeEmissive;          // Offset:  228 Size:     4 [unused]
  // align: 232 to 240
  ubyte align3[8];
  float3 fEmissiveBlendColor__uiColor;// Offset:  240 Size:    12 [unused]
  float fEmissiveBlendColorBlend__uiUNorm;// Offset:  252 Size:     4 [unused]
  float3 fEmissiveBlendRimParam;     // Offset:  256 Size:    12 [unused]
  bool bSpecialBlend;                // Offset:  268 Size:     4 [unused]
  bool bWetNormalBlend;              // Offset:  272 Size:     4 [unused]
  float2 fWetNormalBlendRange__uiUNorm;// Offset:  276 Size:     8 [unused]

};

//CBSSSSS : 5840.shdr.src
struct CBSSSSS {


  float fBlurMaxDist;                // Offset:    0 Size:     4
  float fBlurEdgeSharpness;          // Offset:    4 Size:     4 [unused]
  uint iDiviserFactor;               // Offset:    8 Size:     4

};

//CBRenderFrame : 99.shdr.src
struct CBRenderFrame {


  uint iRenderFrame;                 // Offset:    0 Size:     4 [unused]
  uint iTotalTime;                   // Offset:    4 Size:     4 [unused]
  uint iTotalTimeEx;                 // Offset:    8 Size:     4
  float fFPS;                        // Offset:   12 Size:     4 [unused]
  float fDeltaTime;                  // Offset:   16 Size:     4 [unused]
  float fSSAOEffect;                 // Offset:   20 Size:     4 [unused]
  bool bSSSEnable;                   // Offset:   24 Size:     4 [unused]
  bool bIsRenderingWater;            // Offset:   28 Size:     4
  float fWaterDepthBias;             // Offset:   32 Size:     4 [unused]
  uint iGpuMode;                     // Offset:   36 Size:     4 [unused]
  float2 fDitherSize;                // Offset:   40 Size:     8 [unused]
  bool bHdrOutput;                   // Offset:   48 Size:     4 [unused]
  float fHdrOutputWhiteLevel;        // Offset:   52 Size:     4 [unused]
  float fHdrOutputGamutMappingRatio; // Offset:   56 Size:     4 [unused]

};

//CBMhSkyPS : 5169.shdr.src
struct CBMhSkyPS {


  uint fSkyMode;                     // Offset:    0 Size:     4 [unused]
  float3 fEmissiveMapFactor;         // Offset:    4 Size:    12 [unused]
  float4 fSkySunMapFactor;           // Offset:   16 Size:    16 [unused]
  float4 fSkyStarrySkyMapFactor;     // Offset:   32 Size:    16 [unused]
  float3 fSkyFlowDir;                // Offset:   48 Size:    12 [unused]
  float fSkyUVPhaseShiftH;           // Offset:   60 Size:     4 [unused]
  float fSkyUVPhaseShiftV;           // Offset:   64 Size:     4 [unused]
  float fSkyBlend;                   // Offset:   68 Size:     4 [unused]
  float2 fSkySunUVTransform;         // Offset:   72 Size:     8 [unused]
  float fSkyFlowSpeed;               // Offset:   80 Size:     4 [unused]
  float fSkyFlowTime;                // Offset:   84 Size:     4 [unused]
  // align: 88 to 96
  ubyte align0[8];
  float3 fSkyWaterReflectionFactor;  // Offset:   96 Size:    12 [unused]
  bool bSkyIsRenderingWater;         // Offset:  108 Size:     4 [unused]
  uint2 iSkyAddress;                 // Offset:  112 Size:     8

};

//CBSystem : 994.shdr.src
struct CBSystem {


  uint4 iRegion;                     // Offset:    0 Size:    16
  float fSourceMipLevel;             // Offset:   16 Size:     4 [unused]
  float fGammaCorrect;               // Offset:   20 Size:     4 [unused]
  float fGammaCorrectEx;             // Offset:   24 Size:     4 [unused]
  uint iDisplayColorSpace;           // Offset:   28 Size:     4 [unused]

};

//CBPick : 999.shdr.src
struct CBPick {


  uint2 iPickPoint;                  // Offset:    0 Size:     8

};

//CBSky : 5831.shdr.src
struct CBSky {


  float fSunSolidAngle;              // Offset:    0 Size:     4

};

//CBGUIGlobal : 965.shdr.src
struct CBGUIGlobal {


  row_major float4x4 fGUIWMatrix;    // Offset:    0 Size:    64 [unused]
  row_major float4x4 fGUIWMatrixPF;  // Offset:   64 Size:    64 [unused]
  row_major float4x4 fGUIMatrix;     // Offset:  128 Size:    64 [unused]
  row_major float4x4 fGUIMatrixPF;   // Offset:  192 Size:    64 [unused]
  float4 fGUIStaticColor;            // Offset:  256 Size:    16 [unused]
  float4 fGUIColorScale;             // Offset:  272 Size:    16
  float4 fGUIAmbientColor;           // Offset:  288 Size:    16
  float4 fGUISaturationParam;        // Offset:  304 Size:    16
  float4 fGUIAlphaMaskRect;          // Offset:  320 Size:    16 [unused]
  float4 fGUIFontFilter;             // Offset:  336 Size:    16 [unused]
  float4 fGUIUVClamp;                // Offset:  352 Size:    16
  float2 fGUIInvTextureSize;         // Offset:  368 Size:     8 [unused]
  float2 fGUIInvTextureSize2;        // Offset:  376 Size:     8 [unused]
  float fGUIZBias;                   // Offset:  384 Size:     4 [unused]
  uint iGUIShaderState;              // Offset:  388 Size:     4

};

//CBLUTMaking : 3361.shdr.src
struct CBLUTMaking {


  uint iLUTSize;                     // Offset:    0 Size:     4
  uint iMaxWidth;                    // Offset:    4 Size:     4
  float fMaxLuminance;               // Offset:    8 Size:     4
  bool bIsPQToLinear;                // Offset:   12 Size:     4

};

//CBNormalRecalc : 1017.shdr.src
struct CBNormalRecalc {


  uint iIBOffset;                    // Offset:    0 Size:     4
  uint iSkinningVertexBase;          // Offset:    4 Size:     4
  uint iTriangleCount;               // Offset:    8 Size:     4
  uint iVertexOffset;                // Offset:   12 Size:     4
  uint iRedirectOffset;              // Offset:   16 Size:     4

};

//CBConstantHaltonSequence : 6434.shdr.src
struct CBConstantHaltonSequence {


  float4 fHaltonSequence[64];        // Offset:    0 Size:  1024

};

//CBSpeedTreeLocalWindPF : 5123.shdr.src
struct CBSpeedTreeLocalWindPF {


  struct CBSpeedTreeLocalWindPF_SpeedTreeLocalWind
  {

      float3 pos;                    // Offset:    0
      float radius;                  // Offset:   12
      float3 dir;                    // Offset:   16
      float strength;                // Offset:   28
      float oscillateStrength;       // Offset:   32
      float oscillateSpeed;          // Offset:   36
      uint moveType;                 // Offset:   40
      float padding;                 // Offset:   44

  } gSpeedTreeLocalWindBufferPF[128];// Offset:    0 Size:  6144

};

//CBGUIGBuffer : 965.shdr.src
struct CBGUIGBuffer {


  uint iGUIGBufferLightChannel;      // Offset:    0 Size:     4
  float3 fGUIGBufferEmissiveColor;   // Offset:    4 Size:    12
  float3 fGUIGBufferParam;           // Offset:   16 Size:    12

};

//CBPrimCopyState : 6422.shdr.src
struct CBPrimCopyState {


  float fNormalSlope;                // Offset:    0 Size:     4

};

//CBMhMaterialVfxWave : 6653.shdr.src
struct CBMhMaterialVfxWave {


  uint iPointNum;                    // Offset:    0 Size:     4
  float fViewTime;                   // Offset:    4 Size:     4 [unused]

};

//CBTestLight : 934.shdr.src
struct CBTestLight {


  float3 fTestLightDir;              // Offset:    0 Size:    12
  // align: 12 to 16
  ubyte align0[4];
  float3 fTestLightColor;            // Offset:   16 Size:    12

};

//CBSSLR : 2582.shdr.src
struct CBSSLR {


  int iSSLRReductionLevel;           // Offset:    0 Size:     4 [unused]
  float fSSLRFactor;                 // Offset:    4 Size:     4 [unused]
  float fSSLRScale;                  // Offset:    8 Size:     4 [unused]
  uint iLoopCount;                   // Offset:   12 Size:     4 [unused]
  float fEliminateDepth;             // Offset:   16 Size:     4 [unused]
  float fDitherRadius;               // Offset:   20 Size:     4 [unused]
  float fImportanceBias;             // Offset:   24 Size:     4 [unused]
  float fMipScale;                   // Offset:   28 Size:     4 [unused]
  float fMipBias;                    // Offset:   32 Size:     4 [unused]
  float fAccurateThreshold;          // Offset:   36 Size:     4 [unused]
  float fEnvMapIntensity;            // Offset:   40 Size:     4
  float fSSLRIntensity;              // Offset:   44 Size:     4 [unused]

};

//CBGUIIcon : 3314.shdr.src
struct CBGUIIcon {


  float4 fGUINoiseColor;             // Offset:    0 Size:    16
  float4 fGUIEmissiveColor;          // Offset:   16 Size:    16
  float3 fGUISpecularColor;          // Offset:   32 Size:    12
  // align: 44 to 48
  ubyte align0[4];
  float3 fGUIIconLightColor;         // Offset:   48 Size:    12
  // align: 60 to 64
  ubyte align1[4];
  float3 fGUIIconLightDir;           // Offset:   64 Size:    12

};

//CBResample : 5823.shdr.src
struct CBResample {


  float2 fResampleScreenSize;        // Offset:    0 Size:     8
  float2 fResampleScale;             // Offset:    8 Size:     8

};

//CBMhDecal : 4085.shdr.src
struct CBMhDecal {


  int iDecalShadingMode;             // Offset:    0 Size:     4
  int iDecalBlendMode;               // Offset:    4 Size:     4
  float fDecalNormalBlendRate;       // Offset:    8 Size:     4 [unused]
  bool fDecalAlphaTest;              // Offset:   12 Size:     4
  float fDecalAlphaTestRef;          // Offset:   16 Size:     4
  float3 fDecalEmissiveMapFactor;    // Offset:   20 Size:    12
  float fDecalTransparency;          // Offset:   32 Size:     4
  bool2 fDecalFlipUV;                // Offset:   36 Size:     8
  // align: 44 to 48
  ubyte align0[4];
  bool3 bDecalNormalMapFlip;         // Offset:   48 Size:    12 [unused]
  bool bDecalFlowMap;                // Offset:   60 Size:     4
  float fDecalFlowTime;              // Offset:   64 Size:     4
  float fDecalFlowStrength;          // Offset:   68 Size:     4
  // align: 72 to 80
  ubyte align1[8];
  float4 fDecalUVTransform;          // Offset:   80 Size:    16 [unused]
  float2 fDecalAlphaCorrectionMinMax;// Offset:   96 Size:     8
  float fDecalBlendFactorIntensity;  // Offset:  104 Size:     4
  int iDecalAlphaMapChannel;         // Offset:  108 Size:     4
  float fDecalEdgeFade;              // Offset:  112 Size:     4
  float2 fDecalDistanceFadeRange;    // Offset:  116 Size:     8
  bool bDecalEmissiveBoost;          // Offset:  124 Size:     4
  float2 fDecalEmissiveBoostParam;   // Offset:  128 Size:     8
  float fDecalNormalBlendPow;        // Offset:  136 Size:     4 [unused]
  bool bDecalNormalBC5;              // Offset:  140 Size:     4 [unused]

};

//CBMhMaterialFakeRefractionLocal__disclosure : 5994.shdr.src
struct CBMhMaterialFakeRefractionLocal__disclosure {


  float4 fBaseMapFactor__uiColor;    // Offset:    0 Size:    16
  float3 fEmissiveMapFactor__uiColor;// Offset:   16 Size:    12 [unused]
  float fMetalic__uiUNorm;           // Offset:   28 Size:     4 [unused]
  float fRoughness__uiUNorm;         // Offset:   32 Size:     4 [unused]
  float fSpecular__uiUNorm;          // Offset:   36 Size:     4 [unused]
  float fSubSurfaceBlend__uiUNorm;   // Offset:   40 Size:     4 [unused]
  uint iSubSurfaceProfile;           // Offset:   44 Size:     4 [unused]
  float fDetailNormalBlend__uiUNorm; // Offset:   48 Size:     4 [unused]
  // align: 52 to 64
  ubyte align0[12];
  float4 fUVTransformA;              // Offset:   64 Size:    16
  float4 fUVTransformB;              // Offset:   80 Size:    16 [unused]
  float fTranslucency__uiUNorm;      // Offset:   96 Size:     4 [unused]
  float fRefraction__uiUNorm;        // Offset:  100 Size:     4 [unused]

};

//CBFog : 998.shdr.src
struct CBFog {


  uint iFogType;                     // Offset:    0 Size:     4
  uint iDistanceFogFlags;            // Offset:    4 Size:     4
  float fFogStart;                   // Offset:    8 Size:     4
  float fFogInvRange;                // Offset:   12 Size:     4
  float fFogDensity;                 // Offset:   16 Size:     4
  float3 fFogColor;                  // Offset:   20 Size:    12
  float fFogHStart;                  // Offset:   32 Size:     4
  float3 fFogHColor;                 // Offset:   36 Size:    12
  float fFogHInvRange;               // Offset:   48 Size:     4
  float fFogHDensity;                // Offset:   52 Size:     4
  float2 fFogHUVOffset;              // Offset:   56 Size:     8
  float fFogHUVScale;                // Offset:   64 Size:     4
  float fFogHSlopeBias;              // Offset:   68 Size:     4
  float fFogCurveIntensity;          // Offset:   72 Size:     4
  float fMipFogBlend;                // Offset:   76 Size:     4
  float fMipFogIntensity;            // Offset:   80 Size:     4
  float3 fMipFogColor;               // Offset:   84 Size:    12
  float3 fSkyCenter;                 // Offset:   96 Size:    12
  float fSkyRadius;                  // Offset:  108 Size:     4
  row_major float4x4 fMipFogRotMatrix;// Offset:  112 Size:    64

};

//CBVRRecompute : 2370.shdr.src
struct CBVRRecompute {


  float fDepthTreshold;              // Offset:    0 Size:     4 [unused]
  float fAngleTreshold;              // Offset:    4 Size:     4 [unused]
  float fMaxDepth;                   // Offset:    8 Size:     4 [unused]
  // align: 12 to 16
  ubyte align0[4];
  float3 fDepthTreshold2;            // Offset:   16 Size:    12 [unused]
  // align: 28 to 32
  ubyte align1[4];
  float3 fAngleTreshold2;            // Offset:   32 Size:    12 [unused]
  // align: 44 to 48
  ubyte align2[4];
  float3 fMaxDepth2;                 // Offset:   48 Size:    12

};

//CBLuminanceDebugDisp : 3334.shdr.src
struct CBLuminanceDebugDisp {


  uint iLuminanceDispMode;           // Offset:    0 Size:     4
  // align: 4 to 16
  ubyte align0[12];
  float4 fLuminanceDebugDispColor;   // Offset:   16 Size:    16
  float2 fLuminanceDebugDispMinMax;  // Offset:   32 Size:     8

};

//CBLGTPRBGen : 6184.shdr.src
struct CBLGTPRBGen {


  uint iCurrentIndex;                // Offset:    0 Size:     4
  uint iWindowType;                  // Offset:    4 Size:     4

};

//CBMhMaterialStdBlendLocal__disclosure : 5270.shdr.src
struct CBMhMaterialStdBlendLocal__disclosure {


  float4 fBaseMapFactor__uiColor;    // Offset:    0 Size:    16
  float3 fEmissiveMapFactor__uiColor;// Offset:   16 Size:    12 [unused]
  float fMetalic__uiUNorm;           // Offset:   28 Size:     4 [unused]
  float fRoughness__uiUNorm;         // Offset:   32 Size:     4 [unused]
  float fSpecular__uiUNorm;          // Offset:   36 Size:     4 [unused]
  float fSubSurfaceBlend__uiUNorm;   // Offset:   40 Size:     4 [unused]
  uint iSubSurfaceProfile;           // Offset:   44 Size:     4 [unused]
  float fDetailNormalBlend__uiUNorm; // Offset:   48 Size:     4 [unused]
  // align: 52 to 64
  ubyte align0[12];
  float4 fUVTransformA;              // Offset:   64 Size:    16
  float4 fUVTransformB;              // Offset:   80 Size:    16 [unused]
  float fTranslucency__uiUNorm;      // Offset:   96 Size:     4 [unused]
  float3 fEmissiveBlendColor__uiColor;// Offset:  100 Size:    12 [unused]
  float fEmissiveBlendColorBlend__uiUNorm;// Offset:  112 Size:     4 [unused]
  float3 fEmissiveBlendRimParam;     // Offset:  116 Size:    12 [unused]
  float4 fBlendBaseMapFactor__uiColor;// Offset:  128 Size:    16 [unused]
  float3 fBlendEmissiveMapFactor__uiColor;// Offset:  144 Size:    12 [unused]
  float fBlendMetalic__uiUNorm;      // Offset:  156 Size:     4 [unused]
  float fBlendRoughness__uiUNorm;    // Offset:  160 Size:     4 [unused]
  float fBlendDetailNormalBlend__uiUNorm;// Offset:  164 Size:     4 [unused]
  float fBlendSubSurfaceBlend__uiUNorm;// Offset:  168 Size:     4 [unused]
  // align: 172 to 176
  ubyte align1[4];
  float4 fBlendUVTransformA;         // Offset:  176 Size:    16 [unused]
  float4 fBlendUVTransformB;         // Offset:  192 Size:    16 [unused]
  float3 fBlendDir__uiDirection;     // Offset:  208 Size:    12 [unused]
  float fBlendPlaneNormal__uiUNorm;  // Offset:  220 Size:     4 [unused]
  float3 fBlendOp;                   // Offset:  224 Size:    12 [unused]
  bool bUseUVSecondaryMtA;           // Offset:  236 Size:     4
  bool bUseUVSecondaryMtB;           // Offset:  240 Size:     4 [unused]
  bool bUseUVSecondaryMtBM;          // Offset:  244 Size:     4 [unused]
  float fFurNormalBlend__uiUNorm;    // Offset:  248 Size:     4 [unused]
  float fFurHeight__uiUNorm;         // Offset:  252 Size:     4 [unused]
  float fFurMapBlend__uiUNorm;       // Offset:  256 Size:     4 [unused]
  float fFurEdgeBlend__uiUNorm;      // Offset:  260 Size:     4 [unused]
  float fFurTile;                    // Offset:  264 Size:     4 [unused]
  // align: 268 to 272
  ubyte align2[4];
  float3 fWetBlendDir__uiDirection;  // Offset:  272 Size:    12 [unused]
  float fWetBlendPlaneNormal__uiUNorm;// Offset:  284 Size:     4 [unused]
  float3 fWetBlendOp;                // Offset:  288 Size:    12 [unused]
  bool bSpecialBlend;                // Offset:  300 Size:     4 [unused]
  bool bWetNormalBlend;              // Offset:  304 Size:     4 [unused]
  float2 fWetNormalBlendRange__uiUNorm;// Offset:  308 Size:     8 [unused]

};

//CBMotionBlur : 3655.shdr.src
struct CBMotionBlur {


  int iMotionBlurSampleNum;          // Offset:    0 Size:     4
  float fMotionBlurShutterSpeed;     // Offset:    4 Size:     4
  float fMaxAdditionalVelocity;      // Offset:    8 Size:     4
  // align: 12 to 16
  ubyte align0[4];
  row_major float4x4 fTransform;     // Offset:   16 Size:    64
  float fMotionBlurFurShutterSpeed;  // Offset:   80 Size:     4

};

//CBAmbientOccluder : 1020.shdr.src
struct CBAmbientOccluder {


  float fIntensity;                  // Offset:    0 Size:     4

};

//CBLightProbes : 992.shdr.src
struct CBLightProbes {


  bool bLightProbesEnable;           // Offset:    0 Size:     4
  float3 probesGridInvCellSize;      // Offset:    4 Size:    12
  float3 probesGridPosition;         // Offset:   16 Size:    12
  // align: 28 to 32
  ubyte align0[4];
  uint3 probesGridSize;              // Offset:   32 Size:    12
  // align: 44 to 48
  ubyte align1[4];
  float3 fProbesGridHalf;            // Offset:   48 Size:    12
  // align: 60 to 64
  ubyte align2[4];
  float3 probeColor;                 // Offset:   64 Size:    12
  // align: 76 to 80
  ubyte align3[4];
  float4 fOutsideSHCoef[7];          // Offset:   80 Size:   112
  float4 fShadowSHCoef[7];           // Offset:  192 Size:   112 [unused]
  float lightProbesHemisphereTopIntensity;// Offset:  304 Size:     4 [unused]
  float lightProbesHemisphereBottomIntensity;// Offset:  308 Size:     4 [unused]
  uint iProbeFlags;                  // Offset:  312 Size:     4
  float fDaytimeInterpolation;       // Offset:  316 Size:     4

};

//CBSpeedTreeGlobalWind : 5167.shdr.src
struct CBSpeedTreeGlobalWind {


  struct CBSpeedTreeGlobalWind_SpeedTreeGlobalWind
  {

      row_major uint4x4 fBillboardTexCoords[3];// Offset:    0
      float4 fWindVector;            // Offset:  192
      float4 fWindGlobal;            // Offset:  208
      float4 fWindBranch;            // Offset:  224
      float4 fWindBranchTwitch;      // Offset:  240
      float4 fWindLeaf1Tumble;       // Offset:  256
      float4 fWindLeaf2Tumble;       // Offset:  272
      float3 fWindBranchAnchor;      // Offset:  288
      float fWindBranchAdherences_x; // Offset:  300
      float fWindBranchAdherences_y; // Offset:  304
      float fWindBranchAdherences_z; // Offset:  308
      float fWindFrondRipple_x;      // Offset:  312
      float fWindFrondRipple_y;      // Offset:  316
      float fWindFrondRipple_z;      // Offset:  320
      float3 fWindLeaf1Twitch;       // Offset:  324
      float3 fWindLeaf2Twitch;       // Offset:  336
      float fLocalGlobalDistance;    // Offset:  348
      float2 fWindLeaf1Ripple;       // Offset:  352
      float2 fWindLeaf2Ripple;       // Offset:  360
      float2 fWindBranchWhip;        // Offset:  368
      float2 fWindTurbulences;       // Offset:  376
      float2 fLocalBranchDistance;   // Offset:  384
      uint iWindAttr;                // Offset:  392
      float padding_0;               // Offset:  396

  } gSpeedTreeGlobalWindBuffer[160]; // Offset:    0 Size: 64000

};

//CBMhMaterialLandscapeLocal__disclosure : 1890.shdr.src
struct CBMhMaterialLandscapeLocal__disclosure {


  float4 fBaseMapFactor__uiColor;    // Offset:    0 Size:    16 [unused]
  float3 fEmissiveMapFactor__uiColor;// Offset:   16 Size:    12 [unused]
  float fMetalic__uiUNorm;           // Offset:   28 Size:     4 [unused]
  float fRoughness__uiUNorm;         // Offset:   32 Size:     4 [unused]
  float fSpecular__uiUNorm;          // Offset:   36 Size:     4 [unused]
  float fSubSurfaceBlend__uiUNorm;   // Offset:   40 Size:     4 [unused]
  uint iSubSurfaceProfile;           // Offset:   44 Size:     4 [unused]
  float fDetailNormalBlend__uiUNorm; // Offset:   48 Size:     4 [unused]
  // align: 52 to 64
  ubyte align0[12];
  float4 fUVTransformA;              // Offset:   64 Size:    16 [unused]
  float4 fUVTransformB;              // Offset:   80 Size:    16 [unused]
  float fTranslucency__uiUNorm;      // Offset:   96 Size:     4 [unused]
  // align: 100 to 112
  ubyte align1[12];
  float4 fUVTransformC;              // Offset:  112 Size:    16 [unused]
  float4 fUVTransformD;              // Offset:  128 Size:    16 [unused]
  float4 fUVTransformE;              // Offset:  144 Size:    16 [unused]
  float fParallaxFactor__uiUNorm;    // Offset:  160 Size:     4 [unused]
  float fParallaxMinSampleNum__uiUNorm;// Offset:  164 Size:     4 [unused]
  float fParallaxMaxSampleNum__uiUNorm;// Offset:  168 Size:     4 [unused]
  float fBlendHeightMin__uiUNorm;    // Offset:  172 Size:     4 [unused]
  float fBlendHeightMax__uiUNorm;    // Offset:  176 Size:     4 [unused]
  float fParallaxAttenDistanceBegin; // Offset:  180 Size:     4 [unused]
  float fParallaxAttenDistanceEnd;   // Offset:  184 Size:     4 [unused]
  float fParallaxVertexOffset;       // Offset:  188 Size:     4
  bool bSpecialBlend;                // Offset:  192 Size:     4 [unused]
  bool bWetNormalBlend;              // Offset:  196 Size:     4 [unused]
  float2 fWetNormalBlendRange__uiUNorm;// Offset:  200 Size:     8 [unused]

};

//CBMhSkyVS : 5086.shdr.src
struct CBMhSkyVS {


  row_major float3x4 fSkyWorld;      // Offset:    0 Size:    48

};

//CBHermiteCurveRGB : 6353.shdr.src
struct CBHermiteCurveRGB {


  float2 fHermiteParamR[64];         // Offset:    0 Size:  1016
  // align: 1016 to 1024
  ubyte align0[8];
  float2 fHermiteParamG[64];         // Offset: 1024 Size:  1016
  // align: 2040 to 2048
  ubyte align1[8];
  float2 fHermiteParamB[64];         // Offset: 2048 Size:  1016

};

//CBMhMaterialEM002Local__disclosure : 2570.shdr.src
struct CBMhMaterialEM002Local__disclosure {


  float4 fBaseMapFactor__uiColor;    // Offset:    0 Size:    16 [unused]
  float3 fEmissiveMapFactor__uiColor;// Offset:   16 Size:    12 [unused]
  float fMetalic__uiUNorm;           // Offset:   28 Size:     4 [unused]
  float fRoughness__uiUNorm;         // Offset:   32 Size:     4 [unused]
  float fSpecular__uiUNorm;          // Offset:   36 Size:     4 [unused]
  float fSubSurfaceBlend__uiUNorm;   // Offset:   40 Size:     4 [unused]
  uint iSubSurfaceProfile;           // Offset:   44 Size:     4 [unused]
  float fTranslucency__uiUNorm;      // Offset:   48 Size:     4 [unused]
  bool bBaseColorEmissive;           // Offset:   52 Size:     4 [unused]
  float2 fPaintUVTile;               // Offset:   56 Size:     8 [unused]
  float fAddNormalBlend__uiUNorm;    // Offset:   64 Size:     4 [unused]
  // align: 68 to 80
  ubyte align0[12];
  float4 fAddNormalMaskA__uiSNorm;   // Offset:   80 Size:    16 [unused]
  float4 fAddNormalMaskB__uiSNorm;   // Offset:   96 Size:    16 [unused]
  float fAddNormalMaskC__uiUNorm;    // Offset:  112 Size:     4 [unused]
  float fAddNormalMaskD__uiUNorm;    // Offset:  116 Size:     4 [unused]
  bool bBackFaceShading;             // Offset:  120 Size:     4 [unused]
  // align: 124 to 128
  ubyte align1[4];
  float4 fBackFaceColor__uiColor;    // Offset:  128 Size:    16 [unused]
  bool bBackFaceNormalFilp;          // Offset:  144 Size:     4 [unused]
  float3 fKizuColor__uiColor;        // Offset:  148 Size:    12 [unused]
  bool bLegendary;                   // Offset:  160 Size:     4 [unused]
  // align: 164 to 176
  ubyte align2[12];
  float4 fLegendColor__uiColor;      // Offset:  176 Size:    16 [unused]
  float2 fLegendMetalMask__uiUNorm;  // Offset:  192 Size:     8 [unused]
  float fLegendRoughness;            // Offset:  200 Size:     4 [unused]
  // align: 204 to 208
  ubyte align3[4];
  float2 fLegendFilm__uiUNorm;       // Offset:  208 Size:     8 [unused]
  float fLegendSSSMask__uiUNorm;     // Offset:  216 Size:     4 [unused]
  float fPartsMaskA__uiUNorm;        // Offset:  220 Size:     4 [unused]
  float fPartsMaskB__uiUNorm;        // Offset:  224 Size:     4 [unused]
  float fPartsMaskC__uiUNorm;        // Offset:  228 Size:     4 [unused]
  float fPartsMaskD__uiUNorm;        // Offset:  232 Size:     4 [unused]
  float fPartsMaskX__uiUNorm;        // Offset:  236 Size:     4 [unused]
  float fPartsMaskY__uiUNorm;        // Offset:  240 Size:     4 [unused]
  float fPartsMaskZ__uiUNorm;        // Offset:  244 Size:     4 [unused]
  float fPartsMaskW__uiUNorm;        // Offset:  248 Size:     4 [unused]
  bool bUseOffset;                   // Offset:  252 Size:     4
  float3 fFlowDirDir__uiDirection;   // Offset:  256 Size:    12 [unused]
  // align: 268 to 272
  ubyte align4[4];
  float4 fFlowControl__uiUNorm;      // Offset:  272 Size:    16 [unused]
  float fFlowTile;                   // Offset:  288 Size:     4 [unused]
  // align: 292 to 304
  ubyte align5[12];
  float4 fFlowColor__uiColor;        // Offset:  304 Size:    16 [unused]
  float4 fFlowMatControl__uiUNorm;   // Offset:  320 Size:    16 [unused]
  float4 fMaskBlend__uiUNorm;        // Offset:  336 Size:    16 [unused]
  float2 fMaskBlend_A__uiUNorm;      // Offset:  352 Size:     8 [unused]
  float2 fMaskBlend_B__uiUNorm;      // Offset:  360 Size:     8 [unused]
  float fFilmThickness__uiUNorm;     // Offset:  368 Size:     4 [unused]
  float fFilmBlend__uiUNorm;         // Offset:  372 Size:     4 [unused]
  float fRefraction__uiUNorm;        // Offset:  376 Size:     4 [unused]
  float fRefractionBlend__uiUNorm;   // Offset:  380 Size:     4 [unused]

};

//CBSpeedTree : 5167.shdr.src
struct CBSpeedTree {


  float2 fSpeedTreeParam;            // Offset:    0 Size:     8
  // align: 8 to 16
  ubyte align0[8];
  int3 iSpeedTreeParam;              // Offset:   16 Size:    12

};

//CBImagePlane2 : 1182.shdr.src
struct CBImagePlane2 {


  float2 fFilterUVMin;               // Offset:    0 Size:     8
  float2 fFilterUVMax;               // Offset:    8 Size:     8

};

//CBMhMaterialNikuLocal__disclosure : 4850.shdr.src
struct CBMhMaterialNikuLocal__disclosure {


  float4 fBaseMapFactor__uiColor;    // Offset:    0 Size:    16
  float3 fEmissiveMapFactor__uiColor;// Offset:   16 Size:    12 [unused]
  float fMetalic__uiUNorm;           // Offset:   28 Size:     4 [unused]
  float fRoughness__uiUNorm;         // Offset:   32 Size:     4 [unused]
  float fSpecular__uiUNorm;          // Offset:   36 Size:     4 [unused]
  float fSubSurfaceBlend__uiUNorm;   // Offset:   40 Size:     4 [unused]
  uint iSubSurfaceProfile;           // Offset:   44 Size:     4 [unused]
  float fTranslucency__uiUNorm;      // Offset:   48 Size:     4 [unused]
  // align: 52 to 64
  ubyte align0[12];
  float4 fUVTransformA;              // Offset:   64 Size:    16
  float4 fNikuMode__uiUNorm;         // Offset:   80 Size:    16

};

//CBMhMaterialVfxDispWaveLocal__disclosure : 1361.shdr.src
struct CBMhMaterialVfxDispWaveLocal__disclosure {


  float4 fUVTransformA;              // Offset:    0 Size:    16
  float4 fUVTransformB;              // Offset:   16 Size:    16
  float3 fAdditionalRot;             // Offset:   32 Size:    12
  // align: 44 to 48
  ubyte align0[4];
  float3 fWaveAxis__uiSNorm;         // Offset:   48 Size:    12
  // align: 60 to 64
  ubyte align1[4];
  float3 fWaveScale__uiUNorm;        // Offset:   64 Size:    12
  float fWaveAngle;                  // Offset:   76 Size:     4
  float fDetailDisplacement;         // Offset:   80 Size:     4
  float fYAxisDepth;                 // Offset:   84 Size:     4
  float fWhiteWaterPow;              // Offset:   88 Size:     4 [unused]
  float fFitRange;                   // Offset:   92 Size:     4
  float4 fBaseMapFactor__uiColor;    // Offset:   96 Size:    16 [unused]
  float3 fDistortionFactor__uiColor; // Offset:  112 Size:    12 [unused]
  // align: 124 to 128
  ubyte align2[4];
  float3 fCubeMapFactor__uiColor;    // Offset:  128 Size:    12 [unused]
  float fNormalFactor__uiUNorm;      // Offset:  140 Size:     4 [unused]
  float fRaflectionAngle__uiSNorm;   // Offset:  144 Size:     4 [unused]
  float fDistortionAngle;            // Offset:  148 Size:     4 [unused]
  float fDistortion;                 // Offset:  152 Size:     4 [unused]
  float fOpacityFactor;              // Offset:  156 Size:     4 [unused]
  float fVolumeBlend__uiSNorm;       // Offset:  160 Size:     4 [unused]
  float fMetalic__uiUNorm;           // Offset:  164 Size:     4 [unused]
  float fRoughness__uiUNorm;         // Offset:  168 Size:     4 [unused]
  float fSpecularFactor;             // Offset:  172 Size:     4 [unused]
  float fTranslucency__uiUNorm;      // Offset:  176 Size:     4 [unused]
  float fDiffuseChroma__uiUNorm;     // Offset:  180 Size:     4 [unused]
  float fSpecularChroma__uiUNorm;    // Offset:  184 Size:     4 [unused]
  bool bSceneEnvMap;                 // Offset:  188 Size:     4 [unused]
  float fInnerOffsetScale;           // Offset:  192 Size:     4
  float fVelocityAttn;               // Offset:  196 Size:     4 [unused]
  float fNormalDecalBlend__uiUNorm;  // Offset:  200 Size:     4 [unused]

};

//CBWaterPick : 393.shdr.src
struct CBWaterPick {


  uint2 iWaterAddress;               // Offset:    0 Size:     8

};

//CBPrimitiveDebug : 2380.shdr.src
struct CBPrimitiveDebug {


  float3 fWorldOffset;               // Offset:    0 Size:    12

};

//CBSystemColor : 6558.shdr.src
struct CBSystemColor {


  float4 fSystemColor;               // Offset:    0 Size:    16

};

//CBAmbientOcclusion : 6565.shdr.src
struct CBAmbientOcclusion {


  int iSSAOPrimaryReductionLevel;    // Offset:    0 Size:     4
  uint iSSAOPrimaryFactor;           // Offset:    4 Size:     4 [unused]
  float fSSAOPrimaryScale;           // Offset:    8 Size:     4 [unused]
  float fApproximateSSAOSamplePerPixel;// Offset:   12 Size:     4 [unused]
  uint iApproximateSSAOMaxSampleNum; // Offset:   16 Size:     4 [unused]
  float fApproximateSSAOBias;        // Offset:   20 Size:     4 [unused]
  float fApproximateSSAOWeight;      // Offset:   24 Size:     4 [unused]
  // align: 28 to 32
  ubyte align0[4];
  row_major float4x4 fApproximateSSAORadiusMat;// Offset:   32 Size:    64 [unused]
  float fPrimaryShadowRadius;        // Offset:   96 Size:     4 [unused]
  uint iPrimaryShadowSampleNum;      // Offset:  100 Size:     4 [unused]
  float fPrimaryShadowUpsampleThresholdMin;// Offset:  104 Size:     4 [unused]
  float fPrimaryShadowUpsampleThresholdMax;// Offset:  108 Size:     4 [unused]
  float fPrimaryShadowUpsampleThresholdDiffInv;// Offset:  112 Size:     4 [unused]

};

//CB_TemporalAA : 4386.shdr.src
struct CB_TemporalAA {


  float2 fReprojectionOffset;        // Offset:    0 Size:     8
  float2 fReprojectionScale;         // Offset:    8 Size:     8
  float2 fTemporalOffset;            // Offset:   16 Size:     8
  float2 fTemporalScale;             // Offset:   24 Size:     8
  float2 fTemporalClampMin;          // Offset:   32 Size:     8
  float2 fTemporalClampMax;          // Offset:   40 Size:     8
  float fBlendRate;                  // Offset:   48 Size:     4
  bool bVelocityBase;                // Offset:   52 Size:     4

};

//CBMhMaterialSpeedTreeStdLocal__disclosure : 5022.shdr.src
struct CBMhMaterialSpeedTreeStdLocal__disclosure {


  float4 fBaseMapFactor__uiColor;    // Offset:    0 Size:    16
  float3 fEmissiveMapFactor__uiColor;// Offset:   16 Size:    12 [unused]
  float fMetalic__uiUNorm;           // Offset:   28 Size:     4 [unused]
  float fRoughness__uiUNorm;         // Offset:   32 Size:     4 [unused]
  float fSpecular__uiUNorm;          // Offset:   36 Size:     4 [unused]
  float fSubSurfaceBlend__uiUNorm;   // Offset:   40 Size:     4 [unused]
  uint iSubSurfaceProfile;           // Offset:   44 Size:     4 [unused]
  float fDetailNormalBlend__uiUNorm; // Offset:   48 Size:     4 [unused]
  // align: 52 to 64
  ubyte align0[12];
  float4 fUVTransformA;              // Offset:   64 Size:    16
  float4 fUVTransformB;              // Offset:   80 Size:    16 [unused]
  float4 fBaseMapModulation__uiUNorm;// Offset:   96 Size:    16 [unused]
  float fTranslucency__uiUNorm;      // Offset:  112 Size:     4 [unused]
  bool bLightProbeEmissive;          // Offset:  116 Size:     4 [unused]
  // align: 120 to 128
  ubyte align1[8];
  float3 fEmissiveBlendColor__uiColor;// Offset:  128 Size:    12 [unused]
  float fEmissiveBlendColorBlend__uiUNorm;// Offset:  140 Size:     4 [unused]
  float3 fEmissiveBlendRimParam;     // Offset:  144 Size:    12 [unused]
  bool bSpecialBlend;                // Offset:  156 Size:     4 [unused]
  float fRoughnessThreshold__uiUNorm;// Offset:  160 Size:     4 [unused]
  float fRoughnessFillValue__uiUNorm;// Offset:  164 Size:     4 [unused]
  bool bWetNormalBlend;              // Offset:  168 Size:     4 [unused]
  // align: 172 to 176
  ubyte align2[4];
  float2 fWetNormalBlendRange__uiUNorm;// Offset:  176 Size:     8 [unused]

};

//CBBokehComposite : 6170.shdr.src
struct CBBokehComposite {


  float fBokehMipBias;               // Offset:    0 Size:     4
  float fBokehMipScale;              // Offset:    4 Size:     4
  float fBokehAlphaScale;            // Offset:    8 Size:     4
  float fBokehRangeScale;            // Offset:   12 Size:     4 [unused]
  float fBokehDitherScale;           // Offset:   16 Size:     4 [unused]
  int iBokehSampleCount;             // Offset:   20 Size:     4
  // align: 24 to 32
  ubyte align0[8];
  float2 fBokehTap[25];              // Offset:   32 Size:   392

};

//CBLightParameters : 996.shdr.src
struct CBLightParameters {


  struct CBLightParameters_LightParameter
  {

      float3 position;               // Offset:    0
      float boundingRadius;          // Offset:   12
      float3 direction;              // Offset:   16
      float falloff;                 // Offset:   28
      float4 attenuation;            // Offset:   32
      float3 color;                  // Offset:   48
      uint misc;                     // Offset:   60
      float min_roughness;           // Offset:   64
      uint3 padding;                 // Offset:   68
      row_major float4x4 shadow_mat; // Offset:   80
      row_major float4x4 texproj_mat;// Offset:  144
      float4 shadow_extra;           // Offset:  208
      uint shadowmap_size;           // Offset:  224
      uint3 shadowmap_region;        // Offset:  228

  } gLightParameters[256];           // Offset:    0 Size: 61440

};

//CBMhMaterialEM102Local__disclosure : 4928.shdr.src
struct CBMhMaterialEM102Local__disclosure {


  float4 fBaseMapFactor__uiColor;    // Offset:    0 Size:    16 [unused]
  float3 fEmissiveMapFactor__uiColor;// Offset:   16 Size:    12 [unused]
  float fMetalic__uiUNorm;           // Offset:   28 Size:     4 [unused]
  float fRoughness__uiUNorm;         // Offset:   32 Size:     4 [unused]
  float fSpecular__uiUNorm;          // Offset:   36 Size:     4 [unused]
  float fSubSurfaceBlend__uiUNorm;   // Offset:   40 Size:     4 [unused]
  uint iSubSurfaceProfile;           // Offset:   44 Size:     4 [unused]
  float fTranslucency__uiUNorm;      // Offset:   48 Size:     4 [unused]
  bool bBaseColorEmissive;           // Offset:   52 Size:     4 [unused]
  float2 fPaintUVTile;               // Offset:   56 Size:     8 [unused]
  float fAddNormalBlend__uiUNorm;    // Offset:   64 Size:     4 [unused]
  // align: 68 to 80
  ubyte align0[12];
  float4 fAddNormalMaskA__uiSNorm;   // Offset:   80 Size:    16 [unused]
  float4 fAddNormalMaskB__uiSNorm;   // Offset:   96 Size:    16 [unused]
  float fAddNormalMaskC__uiUNorm;    // Offset:  112 Size:     4 [unused]
  float fAddNormalMaskD__uiUNorm;    // Offset:  116 Size:     4 [unused]
  bool bBackFaceShading;             // Offset:  120 Size:     4 [unused]
  // align: 124 to 128
  ubyte align1[4];
  float4 fBackFaceColor__uiColor;    // Offset:  128 Size:    16 [unused]
  bool bBackFaceNormalFilp;          // Offset:  144 Size:     4 [unused]
  float3 fKizuColor__uiColor;        // Offset:  148 Size:    12 [unused]
  bool bLegendary;                   // Offset:  160 Size:     4 [unused]
  // align: 164 to 176
  ubyte align2[12];
  float4 fLegendColor__uiColor;      // Offset:  176 Size:    16 [unused]
  float2 fLegendMetalMask__uiUNorm;  // Offset:  192 Size:     8 [unused]
  float fLegendRoughness;            // Offset:  200 Size:     4 [unused]
  // align: 204 to 208
  ubyte align3[4];
  float2 fLegendFilm__uiUNorm;       // Offset:  208 Size:     8 [unused]
  float fLegendSSSMask__uiUNorm;     // Offset:  216 Size:     4 [unused]
  float fPartsMaskA__uiUNorm;        // Offset:  220 Size:     4 [unused]
  float fPartsMaskB__uiUNorm;        // Offset:  224 Size:     4 [unused]
  float fPartsMaskC__uiUNorm;        // Offset:  228 Size:     4 [unused]
  float fPartsMaskD__uiUNorm;        // Offset:  232 Size:     4 [unused]
  float fPartsMaskX__uiUNorm;        // Offset:  236 Size:     4 [unused]
  float fPartsMaskY__uiUNorm;        // Offset:  240 Size:     4 [unused]
  float fPartsMaskZ__uiUNorm;        // Offset:  244 Size:     4 [unused]
  float fPartsMaskW__uiUNorm;        // Offset:  248 Size:     4 [unused]
  bool bUseOffset;                   // Offset:  252 Size:     4
  float3 fFlowDirDir__uiDirection;   // Offset:  256 Size:    12 [unused]
  // align: 268 to 272
  ubyte align4[4];
  float4 fFlowControl__uiUNorm;      // Offset:  272 Size:    16 [unused]
  float fFlowTile;                   // Offset:  288 Size:     4 [unused]
  // align: 292 to 304
  ubyte align5[12];
  float4 fFlowColor__uiColor;        // Offset:  304 Size:    16 [unused]
  float4 fFlowMatControl__uiUNorm;   // Offset:  320 Size:    16 [unused]
  float4 fMaskBlend__uiUNorm;        // Offset:  336 Size:    16 [unused]
  float2 fMaskBlend_A__uiUNorm;      // Offset:  352 Size:     8 [unused]
  float2 fMaskBlend_B__uiUNorm;      // Offset:  360 Size:     8 [unused]
  float fFilmThickness__uiUNorm;     // Offset:  368 Size:     4 [unused]
  float fFilmBlend__uiUNorm;         // Offset:  372 Size:     4 [unused]
  float fRefraction__uiUNorm;        // Offset:  376 Size:     4 [unused]
  float fRefractionBlend__uiUNorm;   // Offset:  380 Size:     4 [unused]
  float4 fFurParam__uiUNorm;         // Offset:  384 Size:    16 [unused]
  float fFurTile;                    // Offset:  400 Size:     4 [unused]
  float fAlbedoBlend__uiSNorm;       // Offset:  404 Size:     4 [unused]
  bool bAlbedoOverUVsecondary;       // Offset:  408 Size:     4 [unused]

};

//CBImagePlane : 1183.shdr.src
struct CBImagePlane {


  float4 fImagePlaneColor;           // Offset:    0 Size:    16
  row_major float4x4 fImagePlaneUVTransform;// Offset:   16 Size:    64 [unused]
  uint fImagePlaneTechnique;         // Offset:   80 Size:     4
  uint fBlendType;                   // Offset:   84 Size:     4
  bool bIsScreenPass;                // Offset:   88 Size:     4
  float fGamma;                      // Offset:   92 Size:     4

};

//CBPrimitiveEx : 998.shdr.src
struct CBPrimitiveEx {


  float4 fPrimParamEx0;              // Offset:    0 Size:    16
  float4 fPrimParamEx1;              // Offset:   16 Size:    16
  float4 fPrimParamEx2;              // Offset:   32 Size:    16
  uint4 iPrimParamEx3;               // Offset:   48 Size:    16

};

//CBMhMaterialNPCEyeLocal__disclosure : 2438.shdr.src
struct CBMhMaterialNPCEyeLocal__disclosure {


  float4 fBaseMapFactor__uiColor;    // Offset:    0 Size:    16
  float3 fEmissiveMapFactor__uiColor;// Offset:   16 Size:    12 [unused]
  float fMetalic__uiUNorm;           // Offset:   28 Size:     4 [unused]
  float fRoughness__uiUNorm;         // Offset:   32 Size:     4 [unused]
  float fSpecular__uiUNorm;          // Offset:   36 Size:     4 [unused]
  float fSubSurfaceBlend__uiUNorm;   // Offset:   40 Size:     4 [unused]
  uint iSubSurfaceProfile;           // Offset:   44 Size:     4 [unused]
  float fTranslucency__uiUNorm;      // Offset:   48 Size:     4 [unused]
  bool bBaseColorEmissive;           // Offset:   52 Size:     4 [unused]
  bool bBackFaceNormalFilp;          // Offset:   56 Size:     4 [unused]
  float fAnimEmitMin;                // Offset:   60 Size:     4 [unused]
  float fAnimEmitSpeed;              // Offset:   64 Size:     4 [unused]
  float fParallaxFactor__uiUNorm;    // Offset:   68 Size:     4
  float fDetailNormalBlend__uiUNorm; // Offset:   72 Size:     4 [unused]
  // align: 76 to 80
  ubyte align0[4];
  float4 fUVTransformDetailNormal;   // Offset:   80 Size:    16 [unused]

};

//CBMhMaterialFlagWaveLocal__disclosure : 6288.shdr.src
struct CBMhMaterialFlagWaveLocal__disclosure {


  float4 fBaseMapFactor__uiColor;    // Offset:    0 Size:    16 [unused]
  float3 fEmissiveMapFactor__uiColor;// Offset:   16 Size:    12 [unused]
  float fMetalic__uiUNorm;           // Offset:   28 Size:     4 [unused]
  float fRoughness__uiUNorm;         // Offset:   32 Size:     4 [unused]
  float fSpecular__uiUNorm;          // Offset:   36 Size:     4 [unused]
  float fSubSurfaceBlend__uiUNorm;   // Offset:   40 Size:     4 [unused]
  uint iSubSurfaceProfile;           // Offset:   44 Size:     4 [unused]
  float fTranslucency__uiUNorm;      // Offset:   48 Size:     4 [unused]
  // align: 52 to 64
  ubyte align0[12];
  float4 fUVTransformA;              // Offset:   64 Size:    16 [unused]
  float fVPushScale;                 // Offset:   80 Size:     4
  float fVPushWave;                  // Offset:   84 Size:     4 [unused]
  float fVPushSpeed;                 // Offset:   88 Size:     4
  // align: 92 to 96
  ubyte align1[4];
  float4 fFlagUvEditA;               // Offset:   96 Size:    16
  float4 fFlagUvEditB;               // Offset:  112 Size:    16
  float4 fFlagControl;               // Offset:  128 Size:    16
  float4 fDisplaceControl;           // Offset:  144 Size:    16
  float fDispFactor;                 // Offset:  160 Size:     4

};

//CBMhMaterialVfxDebufBodyLocal__disclosure : 849.shdr.src
struct CBMhMaterialVfxDebufBodyLocal__disclosure {


  float4 fUVTransformA;              // Offset:    0 Size:    16 [unused]
  float4 fBaseMapFactor__uiColor;    // Offset:   16 Size:    16 [unused]
  float3 fEmissiveMapFactor__uiColor;// Offset:   32 Size:    12 [unused]
  float fNormalFactor__uiUNorm;      // Offset:   44 Size:     4 [unused]
  float fMetalic__uiUNorm;           // Offset:   48 Size:     4 [unused]
  float fRoughness__uiUNorm;         // Offset:   52 Size:     4 [unused]
  float fTranslucency__uiUNorm;      // Offset:   56 Size:     4 [unused]
  float fSpecularFactor;             // Offset:   60 Size:     4 [unused]
  float fOpacityFactor;              // Offset:   64 Size:     4 [unused]
  float fRimOpacityPow;              // Offset:   68 Size:     4 [unused]
  float fVolumeBlend__uiSNorm;       // Offset:   72 Size:     4 [unused]
  // align: 76 to 80
  ubyte align0[4];
  float3 fFlowDir__uiDirection;      // Offset:   80 Size:    12 [unused]
  float fFlowStrength;               // Offset:   92 Size:     4 [unused]
  float fFlowSpeed;                  // Offset:   96 Size:     4 [unused]
  float fDiffuseChroma__uiUNorm;     // Offset:  100 Size:     4 [unused]
  float fSpecularChroma__uiUNorm;    // Offset:  104 Size:     4 [unused]
  float fInnerOffsetScale;           // Offset:  108 Size:     4
  float fVelocityAttn;               // Offset:  112 Size:     4 [unused]
  float fNormalDecalBlend__uiUNorm;  // Offset:  116 Size:     4 [unused]

};

//CBLUTBlending : 1081.shdr.src
struct CBLUTBlending {


  float fLUTBlend;                   // Offset:    0 Size:     4
  float fVfxLUTBlend;                // Offset:    4 Size:     4
  bool bIsBlend;                     // Offset:    8 Size:     4
  bool bIsVfxBlend;                  // Offset:   12 Size:     4

};

//CBPrimitive : 999.shdr.src
struct CBPrimitive {


  float4 fPrimParam0;                // Offset:    0 Size:    16 [unused]
  float4 fPrimParam1;                // Offset:   16 Size:    16
  float4 fPrimParam2;                // Offset:   32 Size:    16 [unused]
  float4 fPrimParam3;                // Offset:   48 Size:    16 [unused]
  float4 fPrimParam4;                // Offset:   64 Size:    16
  float4 fPrimParam5;                // Offset:   80 Size:    16 [unused]
  float4 fPrimParam6;                // Offset:   96 Size:    16 [unused]
  float4 fPrimParam7;                // Offset:  112 Size:    16 [unused]
  float4 fPrimParam8;                // Offset:  128 Size:    16 [unused]
  float4 fPrimParam9;                // Offset:  144 Size:    16 [unused]
  uint4 iPrimParam0;                 // Offset:  160 Size:    16

};

//CBErrorUnit : 1989.shdr.src
struct CBErrorUnit {


  uint2 iErrorUnitAddress;           // Offset:    0 Size:     8
  uint iErrorUnitPass;               // Offset:    8 Size:     4
  uint iErrorUnitPrio;               // Offset:   12 Size:     4

};

//CBWaterWaveMaterial : 5751.shdr.src
struct CBWaterWaveMaterial {


  row_major float4x4 fReflectionViewProj;// Offset:    0 Size:    64 [unused]
  float2 fUserNormalTiling;          // Offset:   64 Size:     8
  float fUserNormalIntensity;        // Offset:   72 Size:     4
  float fUserNormalMoveSpeed;        // Offset:   76 Size:     4
  float2 fUserNormalMoveDirection;   // Offset:   80 Size:     8
  float2 fUserNormal2Tiling;         // Offset:   88 Size:     8
  float fUserNormal2Intensity;       // Offset:   96 Size:     4
  float fUserNormal2MoveSpeed;       // Offset:  100 Size:     4
  float2 fUserNormal2MoveDirection;  // Offset:  104 Size:     8
  float fInvDepthMax;                // Offset:  112 Size:     4
  float fReflectionDistortion;       // Offset:  116 Size:     4 [unused]
  float fFresnelBias;                // Offset:  120 Size:     4
  float fHorizonBias;                // Offset:  124 Size:     4
  float3 fExtinctionCoefficient;     // Offset:  128 Size:    12
  float fMurkiness;                  // Offset:  140 Size:     4
  float3 fWaterColor;                // Offset:  144 Size:    12
  float fRefractionDistortion;       // Offset:  156 Size:     4
  float2 fCausticsTiling;            // Offset:  160 Size:     8
  float fCausticsIntensity;          // Offset:  168 Size:     4
  float fCausticsMoveSpeed;          // Offset:  172 Size:     4
  float2 fCausticsMoveDirection;     // Offset:  176 Size:     8
  float fCausticsDensityLow;         // Offset:  184 Size:     4
  float fRefactionIndex;             // Offset:  188 Size:     4
  float2 fSlopeVariance;             // Offset:  192 Size:     8
  float2 fSunlightReflectanceRange;  // Offset:  200 Size:     8
  float fReflectanceBiasRate;        // Offset:  208 Size:     4
  float fInvDepthFade;               // Offset:  212 Size:     4
  float fSunlightReflectionIntensity;// Offset:  216 Size:     4
  float fCubemapBlendRate;           // Offset:  220 Size:     4
  uint iLightGroup;                  // Offset:  224 Size:     4

};

//CBScreen : 998.shdr.src
struct CBScreen {


  float2 fScreenOffset;              // Offset:    0 Size:     8 [unused]
  float2 fScreenScale;               // Offset:    8 Size:     8 [unused]
  float2 fScreenSize;                // Offset:   16 Size:     8 [unused]
  float2 fScreenInverseSize;         // Offset:   24 Size:     8
  uint2 iViewOffset;                 // Offset:   32 Size:     8 [unused]
  uint2 iViewSize;                   // Offset:   40 Size:     8 [unused]
  float2 fViewOffset;                // Offset:   48 Size:     8 [unused]
  float2 fViewSize;                  // Offset:   56 Size:     8 [unused]
  float2 fViewInverseSize;           // Offset:   64 Size:     8 [unused]
  float fContentScale;               // Offset:   72 Size:     4 [unused]
  float fContentScalePF;             // Offset:   76 Size:     4 [unused]
  float fContentScaleBase;           // Offset:   80 Size:     4 [unused]
  float fContentScaleActual;         // Offset:   84 Size:     4 [unused]
  float fContentScaleInverse;        // Offset:   88 Size:     4 [unused]
  float fContentScaleBaseInverse;    // Offset:   92 Size:     4 [unused]
  float fContentScaleActualInverse;  // Offset:   96 Size:     4 [unused]
  float fContentScalePassScreen;     // Offset:  100 Size:     4 [unused]
  bool bCheckerboard;                // Offset:  104 Size:     4 [unused]

};

//CBDecalCommon : 32.shdr.src
struct CBDecalCommon {


  float4 fDecalColor;                // Offset:    0 Size:    16
  float3 fDecalCenter;               // Offset:   16 Size:    12
  // align: 28 to 32
  ubyte align0[4];
  float3 fDecalRange;                // Offset:   32 Size:    12
  // align: 44 to 48
  ubyte align1[4];
  float4 fDecalUVRange;              // Offset:   48 Size:    16
  float3 fDecalTangent;              // Offset:   64 Size:    12
  // align: 76 to 80
  ubyte align2[4];
  float3 fDecalBinormal;             // Offset:   80 Size:    12

};

//CBDebug : 3585.shdr.src
struct CBDebug {


  int iDebugView;                    // Offset:    0 Size:     4
  int iDebugViewChannel;             // Offset:    4 Size:     4
  int iDebugLightMaxCount;           // Offset:    8 Size:     4 [unused]
  float fDebugViewBgAlpha;           // Offset:   12 Size:     4 [unused]
  float fDebugViewFgAlpha;           // Offset:   16 Size:     4 [unused]
  float2 fDebugViewScaling;          // Offset:   20 Size:     8

};

//CBColorCorrectCube : 6115.shdr.src
struct CBColorCorrectCube {


  float fLinearFactor;               // Offset:    0 Size:     4
  float fDepthNear;                  // Offset:    4 Size:     4 [unused]
  float fDepthFar;                   // Offset:    8 Size:     4 [unused]

};

//CBMhDecalSM : 4085.shdr.src
struct CBMhDecalSM {


  float fFireFactor;                 // Offset:    0 Size:     4
  float fFireLifeFactor;             // Offset:    4 Size:     4
  float fFireAlphaFactor;            // Offset:    8 Size:     4
  float fFireColorRate;              // Offset:   12 Size:     4
  bool bFireLighting;                // Offset:   16 Size:     4
  float3 fFireColor;                 // Offset:   20 Size:    12
  float fSmokeFactor;                // Offset:   32 Size:     4
  float fSmokeLifeFactor;            // Offset:   36 Size:     4
  bool bSmokeLighting;               // Offset:   40 Size:     4
  // align: 44 to 48
  ubyte align0[4];
  float3 fSmokeColor;                // Offset:   48 Size:    12
  float fWaterColorRate;             // Offset:   60 Size:     4
  float3 fWaterColorSpecular;        // Offset:   64 Size:    12
  // align: 76 to 80
  ubyte align1[4];
  float3 fWaterColorSheet;           // Offset:   80 Size:    12
  float fWaterIntensitySpecular;     // Offset:   92 Size:     4
  float fWaterLerpGtoB;              // Offset:   96 Size:     4
  float fWaterIntensitySheet;        // Offset:  100 Size:     4
  float fWaterSpecularLifeFactor;    // Offset:  104 Size:     4
  float fWaterSheetLifeFactor;       // Offset:  108 Size:     4
  float fWaterGtoBLifeFactor;        // Offset:  112 Size:     4
  float fWaterIntensityCubeMap;      // Offset:  116 Size:     4
  float fWaterNormalSharpness;       // Offset:  120 Size:     4
  float fWaterIntensityAlpha;        // Offset:  124 Size:     4

};

//CBMhMaterial_EM105_EVCLocal__disclosure : 4506.shdr.src
struct CBMhMaterial_EM105_EVCLocal__disclosure {


  float4 fBaseMapFactor__uiColor;    // Offset:    0 Size:    16 [unused]
  float3 fEmissiveMapFactor__uiColor;// Offset:   16 Size:    12 [unused]
  float fMetalic__uiUNorm;           // Offset:   28 Size:     4 [unused]
  float fRoughness__uiUNorm;         // Offset:   32 Size:     4 [unused]
  float fSpecular__uiUNorm;          // Offset:   36 Size:     4 [unused]
  float fSubSurfaceBlend__uiUNorm;   // Offset:   40 Size:     4 [unused]
  uint iSubSurfaceProfile;           // Offset:   44 Size:     4 [unused]
  float fTranslucency__uiUNorm;      // Offset:   48 Size:     4 [unused]
  bool bBaseColorEmissive;           // Offset:   52 Size:     4 [unused]
  float2 fPaintUVTile;               // Offset:   56 Size:     8 [unused]
  float fAddNormalBlend__uiUNorm;    // Offset:   64 Size:     4 [unused]
  // align: 68 to 80
  ubyte align0[12];
  float4 fAddNormalMaskA__uiSNorm;   // Offset:   80 Size:    16 [unused]
  float4 fAddNormalMaskB__uiSNorm;   // Offset:   96 Size:    16 [unused]
  float fAddNormalMaskC__uiUNorm;    // Offset:  112 Size:     4 [unused]
  float fAddNormalMaskD__uiUNorm;    // Offset:  116 Size:     4 [unused]
  bool bBackFaceShading;             // Offset:  120 Size:     4 [unused]
  // align: 124 to 128
  ubyte align1[4];
  float4 fBackFaceColor__uiColor;    // Offset:  128 Size:    16 [unused]
  bool bBackFaceNormalFilp;          // Offset:  144 Size:     4 [unused]
  float3 fKizuColor__uiColor;        // Offset:  148 Size:    12 [unused]
  bool bLegendary;                   // Offset:  160 Size:     4 [unused]
  // align: 164 to 176
  ubyte align2[12];
  float4 fLegendColor__uiColor;      // Offset:  176 Size:    16 [unused]
  float2 fLegendMetalMask__uiUNorm;  // Offset:  192 Size:     8 [unused]
  float fLegendRoughness;            // Offset:  200 Size:     4 [unused]
  // align: 204 to 208
  ubyte align3[4];
  float2 fLegendFilm__uiUNorm;       // Offset:  208 Size:     8 [unused]
  float fLegendSSSMask__uiUNorm;     // Offset:  216 Size:     4 [unused]
  float fPartsMaskA__uiUNorm;        // Offset:  220 Size:     4 [unused]
  float fPartsMaskB__uiUNorm;        // Offset:  224 Size:     4 [unused]
  float fPartsMaskC__uiUNorm;        // Offset:  228 Size:     4 [unused]
  float fPartsMaskD__uiUNorm;        // Offset:  232 Size:     4 [unused]
  float fPartsMaskX__uiUNorm;        // Offset:  236 Size:     4 [unused]
  float fPartsMaskY__uiUNorm;        // Offset:  240 Size:     4 [unused]
  float fPartsMaskZ__uiUNorm;        // Offset:  244 Size:     4 [unused]
  float fPartsMaskW__uiUNorm;        // Offset:  248 Size:     4 [unused]
  bool bUseOffset;                   // Offset:  252 Size:     4
  float3 fFlowDirDir__uiDirection;   // Offset:  256 Size:    12 [unused]
  // align: 268 to 272
  ubyte align4[4];
  float4 fFlowControl__uiUNorm;      // Offset:  272 Size:    16 [unused]
  float fFlowTile;                   // Offset:  288 Size:     4 [unused]
  // align: 292 to 304
  ubyte align5[12];
  float4 fFlowColor__uiColor;        // Offset:  304 Size:    16 [unused]
  float4 fFlowMatControl__uiUNorm;   // Offset:  320 Size:    16 [unused]
  float fFilmThickness__uiUNorm;     // Offset:  336 Size:     4 [unused]
  float fFilmBlend__uiUNorm;         // Offset:  340 Size:     4 [unused]
  float fRefraction__uiUNorm;        // Offset:  344 Size:     4 [unused]
  float fRefractionBlend__uiUNorm;   // Offset:  348 Size:     4 [unused]
  bool bUseBlendDisplace;            // Offset:  352 Size:     4
  float fVAnimV__uiUNorm;            // Offset:  356 Size:     4
  float fVAnimPosScale;              // Offset:  360 Size:     4
  bool bInvertX;                     // Offset:  364 Size:     4
  float fVPushScale;                 // Offset:  368 Size:     4
  float fVPushWave;                  // Offset:  372 Size:     4
  float fVPushSpeed;                 // Offset:  376 Size:     4
  // align: 380 to 384
  ubyte align6[4];
  float3 fVpivot;                    // Offset:  384 Size:    12
  float fInnerOffsetScale;           // Offset:  396 Size:     4
  float fRimAlphaPower__uiSNorm;     // Offset:  400 Size:     4 [unused]
  float fVolumeBlend__uiSNorm;       // Offset:  404 Size:     4 [unused]
  // align: 408 to 416
  ubyte align7[8];
  float4 fDetailEmissiveControl;     // Offset:  416 Size:    16 [unused]
  float fRimTranslucency__uiUNorm;   // Offset:  432 Size:     4 [unused]
  float fFinWave;                    // Offset:  436 Size:     4 [unused]
  float fFinSpeed;                   // Offset:  440 Size:     4 [unused]
  // align: 444 to 448
  ubyte align8[4];
  float3 fFinColor__uiColor;         // Offset:  448 Size:    12 [unused]
  float fDetailNormalBlend__uiUNorm; // Offset:  460 Size:     4 [unused]

};

//CBMhMaterialEM115Local__disclosure : 2132.shdr.src
struct CBMhMaterialEM115Local__disclosure {


  float4 fBaseMapFactor__uiColor;    // Offset:    0 Size:    16 [unused]
  float3 fEmissiveMapFactor__uiColor;// Offset:   16 Size:    12 [unused]
  float fMetalic__uiUNorm;           // Offset:   28 Size:     4 [unused]
  float fRoughness__uiUNorm;         // Offset:   32 Size:     4 [unused]
  float fSpecular__uiUNorm;          // Offset:   36 Size:     4 [unused]
  float fSubSurfaceBlend__uiUNorm;   // Offset:   40 Size:     4 [unused]
  uint iSubSurfaceProfile;           // Offset:   44 Size:     4 [unused]
  float fTranslucency__uiUNorm;      // Offset:   48 Size:     4 [unused]
  bool bBaseColorEmissive;           // Offset:   52 Size:     4 [unused]
  float2 fPaintUVTile;               // Offset:   56 Size:     8 [unused]
  float fAddNormalBlend__uiUNorm;    // Offset:   64 Size:     4 [unused]
  // align: 68 to 80
  ubyte align0[12];
  float4 fAddNormalMaskA__uiSNorm;   // Offset:   80 Size:    16 [unused]
  float4 fAddNormalMaskB__uiSNorm;   // Offset:   96 Size:    16 [unused]
  float fAddNormalMaskC__uiUNorm;    // Offset:  112 Size:     4 [unused]
  float fAddNormalMaskD__uiUNorm;    // Offset:  116 Size:     4 [unused]
  bool bBackFaceShading;             // Offset:  120 Size:     4 [unused]
  // align: 124 to 128
  ubyte align1[4];
  float4 fBackFaceColor__uiColor;    // Offset:  128 Size:    16 [unused]
  bool bBackFaceNormalFilp;          // Offset:  144 Size:     4 [unused]
  float3 fKizuColor__uiColor;        // Offset:  148 Size:    12 [unused]
  bool bLegendary;                   // Offset:  160 Size:     4 [unused]
  // align: 164 to 176
  ubyte align2[12];
  float4 fLegendColor__uiColor;      // Offset:  176 Size:    16 [unused]
  float2 fLegendMetalMask__uiUNorm;  // Offset:  192 Size:     8 [unused]
  float fLegendRoughness;            // Offset:  200 Size:     4 [unused]
  // align: 204 to 208
  ubyte align3[4];
  float2 fLegendFilm__uiUNorm;       // Offset:  208 Size:     8 [unused]
  float fLegendSSSMask__uiUNorm;     // Offset:  216 Size:     4 [unused]
  float fPartsMaskA__uiUNorm;        // Offset:  220 Size:     4 [unused]
  float fPartsMaskB__uiUNorm;        // Offset:  224 Size:     4 [unused]
  float fPartsMaskC__uiUNorm;        // Offset:  228 Size:     4 [unused]
  float fPartsMaskD__uiUNorm;        // Offset:  232 Size:     4 [unused]
  float fPartsMaskX__uiUNorm;        // Offset:  236 Size:     4 [unused]
  float fPartsMaskY__uiUNorm;        // Offset:  240 Size:     4 [unused]
  float fPartsMaskZ__uiUNorm;        // Offset:  244 Size:     4 [unused]
  float fPartsMaskW__uiUNorm;        // Offset:  248 Size:     4 [unused]
  bool bUseOffset;                   // Offset:  252 Size:     4
  float3 fFlowDirDir__uiDirection;   // Offset:  256 Size:    12 [unused]
  // align: 268 to 272
  ubyte align4[4];
  float4 fFlowControl__uiUNorm;      // Offset:  272 Size:    16 [unused]
  float fFlowTile;                   // Offset:  288 Size:     4 [unused]
  // align: 292 to 304
  ubyte align5[12];
  float4 fFlowColor__uiColor;        // Offset:  304 Size:    16 [unused]
  float4 fFlowMatControl__uiUNorm;   // Offset:  320 Size:    16 [unused]
  float4 fDisplaceControl;           // Offset:  336 Size:    16
  float4 fFurParam__uiUNorm;         // Offset:  352 Size:    16 [unused]
  float fFurTile;                    // Offset:  368 Size:     4 [unused]
  float fDispSpeed;                  // Offset:  372 Size:     4
  float fFilmThickness__uiUNorm;     // Offset:  376 Size:     4 [unused]
  float fFilmBlend__uiUNorm;         // Offset:  380 Size:     4 [unused]
  float fRefraction__uiUNorm;        // Offset:  384 Size:     4 [unused]
  float fRefractionBlend__uiUNorm;   // Offset:  388 Size:     4 [unused]

};

//CBHeightToNormal : 4510.shdr.src
struct CBHeightToNormal {


  float fFactor;                     // Offset:    0 Size:     4

};

//CBMhMaterialPLHairLocal__disclosure : 4068.shdr.src
struct CBMhMaterialPLHairLocal__disclosure {


  float4 fBaseMapFactor__uiColor;    // Offset:    0 Size:    16 [unused]
  float3 fEmissiveMapFactor__uiColor;// Offset:   16 Size:    12 [unused]
  float fMetalic__uiUNorm;           // Offset:   28 Size:     4 [unused]
  float fRoughness__uiUNorm;         // Offset:   32 Size:     4 [unused]
  float fSpecular__uiUNorm;          // Offset:   36 Size:     4 [unused]
  float fSubSurfaceBlend__uiUNorm;   // Offset:   40 Size:     4 [unused]
  uint iSubSurfaceProfile;           // Offset:   44 Size:     4 [unused]
  float fTranslucency__uiUNorm;      // Offset:   48 Size:     4 [unused]
  bool bBaseColorEmissive;           // Offset:   52 Size:     4 [unused]
  bool bBackFaceNormalFilp;          // Offset:   56 Size:     4 [unused]
  float fAnimEmitMin;                // Offset:   60 Size:     4 [unused]
  float fAnimEmitSpeed;              // Offset:   64 Size:     4 [unused]
  // align: 68 to 80
  ubyte align0[12];
  float4 fPrimaryColor__uiColor;     // Offset:   80 Size:    16 [unused]
  float4 fSecondaryColor__uiColor;   // Offset:   96 Size:    16 [unused]
  float fPrimaryExpo__uiUNorm;       // Offset:  112 Size:     4 [unused]
  float fSecondaryExpo__uiUNorm;     // Offset:  116 Size:     4 [unused]
  float fPrimaryShift__uiSNorm;      // Offset:  120 Size:     4 [unused]
  float fSecondaryShift__uiSNorm;    // Offset:  124 Size:     4 [unused]
  float fShininess;                  // Offset:  128 Size:     4 [unused]
  float3 fFakeLight__uiDirection;    // Offset:  132 Size:    12 [unused]
  float fFurNMHeight;                // Offset:  144 Size:     4 [unused]
  // align: 148 to 160
  ubyte align1[12];
  float4 fFurParam__uiUNorm;         // Offset:  160 Size:    16 [unused]
  float fFurTile;                    // Offset:  176 Size:     4 [unused]
  // align: 180 to 192
  ubyte align2[12];
  float4 fVertexAO__uiColor;         // Offset:  192 Size:    16 [unused]
  float fVColorNormalBlend__uiUNorm; // Offset:  208 Size:     4
  float fRimWidth__uiUNorm;          // Offset:  212 Size:     4 [unused]
  float fRimNormalBlend__uiUNorm;    // Offset:  216 Size:     4 [unused]
  bool bUseRimTranslucency;          // Offset:  220 Size:     4 [unused]
  bool bUseOffset;                   // Offset:  224 Size:     4
  float fInnerOffsetScale;           // Offset:  228 Size:     4
  float fDetailNormalBlend__uiUNorm; // Offset:  232 Size:     4 [unused]
  // align: 236 to 240
  ubyte align3[4];
  float4 fUVTransformDetailNormal;   // Offset:  240 Size:    16 [unused]

};

//CBSpeedTreeGlobalWindPF : 5123.shdr.src
struct CBSpeedTreeGlobalWindPF {


  struct CBSpeedTreeGlobalWindPF_SpeedTreeGlobalWind
  {

      row_major uint4x4 fBillboardTexCoords[3];// Offset:    0
      float4 fWindVector;            // Offset:  192
      float4 fWindGlobal;            // Offset:  208
      float4 fWindBranch;            // Offset:  224
      float4 fWindBranchTwitch;      // Offset:  240
      float4 fWindLeaf1Tumble;       // Offset:  256
      float4 fWindLeaf2Tumble;       // Offset:  272
      float3 fWindBranchAnchor;      // Offset:  288
      float fWindBranchAdherences_x; // Offset:  300
      float fWindBranchAdherences_y; // Offset:  304
      float fWindBranchAdherences_z; // Offset:  308
      float fWindFrondRipple_x;      // Offset:  312
      float fWindFrondRipple_y;      // Offset:  316
      float fWindFrondRipple_z;      // Offset:  320
      float3 fWindLeaf1Twitch;       // Offset:  324
      float3 fWindLeaf2Twitch;       // Offset:  336
      float fLocalGlobalDistance;    // Offset:  348
      float2 fWindLeaf1Ripple;       // Offset:  352
      float2 fWindLeaf2Ripple;       // Offset:  360
      float2 fWindBranchWhip;        // Offset:  368
      float2 fWindTurbulences;       // Offset:  376
      float2 fLocalBranchDistance;   // Offset:  384
      uint iWindAttr;                // Offset:  392
      float padding_0;               // Offset:  396

  } gSpeedTreeGlobalWindBufferPF[160];// Offset:    0 Size: 64000

};

//CBVRVolumeParams : 977.shdr.src
struct CBVRVolumeParams {


  struct CBVRVolumeParams_VolumeParam
  {

      uint packedData;               // Offset:    0
      float3 emissive;               // Offset:    4
      float3 scattering;             // Offset:   16
      float hgEccentricity;          // Offset:   28
      float3 tiling;                 // Offset:   32
      float moveSpeed;               // Offset:   44
      float3 moveDir;                // Offset:   48
      float dispelFactor;            // Offset:   60

  } volumeList[128];                 // Offset:    0 Size:  8192

  struct CBVRVolumeParams_Constant
  {

      float3 limits;                 // Offset: 8192
      uint extra;                    // Offset: 8204

  } constantVolumes[128];            // Offset: 8192 Size:  2048

  struct CBVRVolumeParams_Cuboid
  {

      row_major float4x4 model;      // Offset: 10240
      row_major float4x4 modelI;     // Offset: 10304
      float4 minAABB;                // Offset: 10368
      float4 maxAABB;                // Offset: 10384

  } cuboidVolumes[128];              // Offset: 10240 Size: 20480 [unused]

  struct CBVRVolumeParams_Spherical
  {

      row_major float4x4 model;      // Offset: 30720
      row_major float4x4 modelI;     // Offset: 30784
      uint4 extra;                   // Offset: 30848

  } sphericalVolumes[128];           // Offset: 30720 Size: 18432 [unused]

  struct CBVRVolumeParams_Spotlight
  {

      float3 origin;                 // Offset: 49152
      float height;                  // Offset: 49164
      float3 dir;                    // Offset: 49168
      float cosAngle;                // Offset: 49180

  } spotlightVolumes[128];           // Offset: 49152 Size:  4096 [unused]

};

//CB_BGTexture : 3385.shdr.src
struct CB_BGTexture {


  float4 fBGTextureColor;            // Offset:    0 Size:    16

};

//CBHermiteCurve : 1985.shdr.src
struct CBHermiteCurve {


  float4 fHermiteParam[8];           // Offset:    0 Size:   128

};

//CBMhMaterialScrWaterLocal__disclosure : 4653.shdr.src
struct CBMhMaterialScrWaterLocal__disclosure {


  float4 fBaseMapFactor__uiColor;    // Offset:    0 Size:    16
  float3 fEmissiveMapFactor__uiColor;// Offset:   16 Size:    12 [unused]
  // align: 28 to 32
  ubyte align0[4];
  float3 fCubeMapFactor__uiColor;    // Offset:   32 Size:    12 [unused]
  float fMetalic__uiUNorm;           // Offset:   44 Size:     4 [unused]
  float fRoughness__uiUNorm;         // Offset:   48 Size:     4 [unused]
  float fSpecular__uiUNorm;          // Offset:   52 Size:     4 [unused]
  float fSubSurfaceBlend__uiUNorm;   // Offset:   56 Size:     4 [unused]
  uint iSubSurfaceProfile;           // Offset:   60 Size:     4 [unused]
  float fTranslucency__uiUNorm;      // Offset:   64 Size:     4 [unused]
  // align: 68 to 80
  ubyte align1[12];
  float4 fUVTransformA;              // Offset:   80 Size:    16
  float4 fUVTransformB;              // Offset:   96 Size:    16 [unused]
  float2 fUVOffsetSpeedFactor;       // Offset:  112 Size:     8
  float2 fUVOffsetSpeedFactorDetail; // Offset:  120 Size:     8 [unused]
  float fDetailNormalBlend__uiUNorm; // Offset:  128 Size:     4 [unused]
  float fRefraction__uiUNorm;        // Offset:  132 Size:     4 [unused]
  float fRefractionPow__uiUNorm;     // Offset:  136 Size:     4 [unused]
  // align: 140 to 144
  ubyte align2[4];
  float3 fRefractionFactor__uiColor; // Offset:  144 Size:    12 [unused]
  bool bRefractionScreenFade;        // Offset:  156 Size:     4 [unused]
  float fVolumeBlend__uiSNorm;       // Offset:  160 Size:     4
  float fFlowStrength;               // Offset:  164 Size:     4
  float fFlowSpeed;                  // Offset:  168 Size:     4
  bool bDecalMode;                   // Offset:  172 Size:     4 [unused]

};

//CBTubeLight : 5941.shdr.src
struct CBTubeLight {


  uint iTubeLightCount;              // Offset:    0 Size:     4

};

//CBModel : 99.shdr.src
struct CBModel {


  row_major float3x4 fWorld;         // Offset:    0 Size:    48 [unused]
  row_major float3x4 fWorldI;        // Offset:   48 Size:    48 [unused]
  row_major float3x4 fWorldPF;       // Offset:   96 Size:    48 [unused]
  uint iMatrixIndex;                 // Offset:  144 Size:     4 [unused]
  uint iMatrixIndexPF;               // Offset:  148 Size:     4 [unused]
  uint iLightChannel;                // Offset:  152 Size:     4
  // align: 156 to 160
  ubyte align0[4];
  uint2 iUnitAddress;                // Offset:  160 Size:     8 [unused]
  bool bPositionPFValid;             // Offset:  168 Size:     4 [unused]
  bool bPassThrough;                 // Offset:  172 Size:     4
  bool bInstanceMaterialEdit;        // Offset:  176 Size:     4
  bool bInstanceEffect;              // Offset:  180 Size:     4 [unused]

};

//CBGUIDistanceField : 3229.shdr.src
struct CBGUIDistanceField {


  float3 fGUIDFParam0;               // Offset:    0 Size:    12
  // align: 12 to 16
  ubyte align0[4];
  float4 fGUIDFColor0;               // Offset:   16 Size:    16
  float3 fGUIDFParam1;               // Offset:   32 Size:    12
  // align: 44 to 48
  ubyte align1[4];
  float4 fGUIDFColor1;               // Offset:   48 Size:    16

};

//CBLight : 993.shdr.src
struct CBLight {


  uint iLightOffset;                 // Offset:    0 Size:     4 [unused]
  uint iLightNum;                    // Offset:    4 Size:     4 [unused]
  uint iPrimaryLight;                // Offset:    8 Size:     4 [unused]
  uint iGIDiffuseFlags;              // Offset:   12 Size:     4 [unused]
  bool bLightSortByType;             // Offset:   16 Size:     4 [unused]
  float fSHSSAOEffect;               // Offset:   20 Size:     4 [unused]
  float fSSAOEffectGI;               // Offset:   24 Size:     4 [unused]
  // align: 28 to 32
  ubyte align0[4];
  float4 fSHCoef[7];                 // Offset:   32 Size:   112 [unused]
  row_major float4x4 fPrimaryLightMat;// Offset:  144 Size:    64 [unused]
  row_major float4x4 fBroadAreaShadowMat;// Offset:  208 Size:    64
  bool bBroadAreaShadowEnable;       // Offset:  272 Size:     4
  bool bGISpecularSHDiffuseBlend;    // Offset:  276 Size:     4 [unused]
  uint2 iLightInfiniteRange;         // Offset:  280 Size:     8 [unused]
  uint2 iLightPointRange;            // Offset:  288 Size:     8 [unused]
  uint2 iLightSpotRange;             // Offset:  296 Size:     8 [unused]

};

//CBMhMaterialGlobal : 773.shdr.src
struct CBMhMaterialGlobal {


  float fMaterialWetBlend;           // Offset:    0 Size:     4
  float fMaterialWetRoughness;       // Offset:    4 Size:     4

};

//CBMhMaterialFurLocal__disclosure : 716.shdr.src
struct CBMhMaterialFurLocal__disclosure {


  float4 fBaseMapFactor__uiColor;    // Offset:    0 Size:    16
  float3 fEmissiveMapFactor__uiColor;// Offset:   16 Size:    12 [unused]
  float fMetalic__uiUNorm;           // Offset:   28 Size:     4 [unused]
  float fRoughness__uiUNorm;         // Offset:   32 Size:     4 [unused]
  float fSpecular__uiUNorm;          // Offset:   36 Size:     4 [unused]
  float fSubSurfaceBlend__uiUNorm;   // Offset:   40 Size:     4 [unused]
  uint iSubSurfaceProfile;           // Offset:   44 Size:     4 [unused]
  float fDetailNormalBlend__uiUNorm; // Offset:   48 Size:     4 [unused]
  // align: 52 to 64
  ubyte align0[12];
  float4 fUVTransformA;              // Offset:   64 Size:    16
  float4 fUVTransformB;              // Offset:   80 Size:    16 [unused]
  float fTranslucency__uiUNorm;      // Offset:   96 Size:     4 [unused]
  float3 fEmissiveBlendColor__uiColor;// Offset:  100 Size:    12 [unused]
  float fEmissiveBlendColorBlend__uiUNorm;// Offset:  112 Size:     4 [unused]
  float3 fEmissiveBlendRimParam;     // Offset:  116 Size:    12 [unused]
  float fFurHeight__uiUNorm;         // Offset:  128 Size:     4 [unused]
  float fFurMapBlend__uiUNorm;       // Offset:  132 Size:     4 [unused]
  float fFurEdgeBlend__uiUNorm;      // Offset:  136 Size:     4 [unused]
  float fFurTile;                    // Offset:  140 Size:     4 [unused]

};

//CBMhMaterialNPCLocal__disclosure : 5818.shdr.src
struct CBMhMaterialNPCLocal__disclosure {


  float4 fBaseMapFactor__uiColor;    // Offset:    0 Size:    16
  float3 fEmissiveMapFactor__uiColor;// Offset:   16 Size:    12 [unused]
  float fMetalic__uiUNorm;           // Offset:   28 Size:     4 [unused]
  float fRoughness__uiUNorm;         // Offset:   32 Size:     4 [unused]
  float fSpecular__uiUNorm;          // Offset:   36 Size:     4 [unused]
  float fSubSurfaceBlend__uiUNorm;   // Offset:   40 Size:     4 [unused]
  uint iSubSurfaceProfile;           // Offset:   44 Size:     4 [unused]
  float fTranslucency__uiUNorm;      // Offset:   48 Size:     4 [unused]
  bool bBaseColorEmissive;           // Offset:   52 Size:     4 [unused]
  bool bBackFaceNormalFilp;          // Offset:   56 Size:     4 [unused]
  float fAnimEmitMin;                // Offset:   60 Size:     4 [unused]
  float fAnimEmitSpeed;              // Offset:   64 Size:     4 [unused]
  bool bUseCMM;                      // Offset:   68 Size:     4 [unused]
  // align: 72 to 80
  ubyte align0[8];
  float4 fAddColorA__uiColor;        // Offset:   80 Size:    16 [unused]
  float4 fAddColorB__uiColor;        // Offset:   96 Size:    16 [unused]
  float4 fAddColorC__uiColor;        // Offset:  112 Size:    16 [unused]
  float4 fAddColorD__uiColor;        // Offset:  128 Size:    16 [unused]
  float4 fFurParam__uiUNorm;         // Offset:  144 Size:    16 [unused]
  float fFurTile;                    // Offset:  160 Size:     4 [unused]
  float fFilmThickness__uiUNorm;     // Offset:  164 Size:     4 [unused]
  float fFilmBlend__uiUNorm;         // Offset:  168 Size:     4 [unused]
  // align: 172 to 176
  ubyte align1[4];
  float3 fEmissiveBlendColor__uiColor;// Offset:  176 Size:    12 [unused]
  float fEmissiveBlendColorBlend__uiUNorm;// Offset:  188 Size:     4 [unused]
  float3 fEmissiveBlendRimParam;     // Offset:  192 Size:    12 [unused]
  float fDetailNormalBlend__uiUNorm; // Offset:  204 Size:     4 [unused]
  float4 fUVTransformDetailNormal;   // Offset:  208 Size:    16 [unused]

};

//CBMhMaterialFakeInnerEmitLocal__disclosure : 3495.shdr.src
struct CBMhMaterialFakeInnerEmitLocal__disclosure {


  float3 fEmissiveMapFactor__uiColor;// Offset:    0 Size:    12 [unused]
  float fInnerOffsetScale;           // Offset:   12 Size:     4
  float fRimAlphaPower__uiUNorm;     // Offset:   16 Size:     4 [unused]
  float fVolumeBlend__uiSNorm;       // Offset:   20 Size:     4 [unused]

};

//CBNewDOFFilter : 6560.shdr.src
struct CBNewDOFFilter {


  float coc_bias;                    // Offset:    0 Size:     4
  float coc_scale;                   // Offset:    4 Size:     4
  float pcoc;                        // Offset:    8 Size:     4 [unused]
  float quad_reduction_threshold;    // Offset:   12 Size:     4 [unused]
  float quater_resolution_threshold; // Offset:   16 Size:     4 [unused]
  float near_blur_scaler;            // Offset:   20 Size:     4 [unused]
  float depth_adjuist_factor;        // Offset:   24 Size:     4 [unused]
  float bokeh_intensity_threshold;   // Offset:   28 Size:     4 [unused]
  float bokeh_shape_factor;          // Offset:   32 Size:     4 [unused]
  float dof_single_pixel_radius;     // Offset:   36 Size:     4 [unused]
  float dof_aspect;                  // Offset:   40 Size:     4 [unused]
  bool far_ignore;                   // Offset:   44 Size:     4
  bool near_ignore;                  // Offset:   48 Size:     4
  float far_coef;                    // Offset:   52 Size:     4
  float near_coef;                   // Offset:   56 Size:     4
  float fVignettingOffset;           // Offset:   60 Size:     4 [unused]
  float fVignettingPow;              // Offset:   64 Size:     4 [unused]
  bool bVignetting;                  // Offset:   68 Size:     4 [unused]
  float fVignettingEllipticity;      // Offset:   72 Size:     4 [unused]
  // align: 76 to 80
  ubyte align0[4];
  float3 fVignettingColor;           // Offset:   80 Size:    12 [unused]

};

//CBMhMaterialEM011Local__disclosure : 3568.shdr.src
struct CBMhMaterialEM011Local__disclosure {


  float4 fBaseMapFactor__uiColor;    // Offset:    0 Size:    16 [unused]
  float3 fEmissiveMapFactor__uiColor;// Offset:   16 Size:    12 [unused]
  float fMetalic__uiUNorm;           // Offset:   28 Size:     4 [unused]
  float fRoughness__uiUNorm;         // Offset:   32 Size:     4 [unused]
  float fSpecular__uiUNorm;          // Offset:   36 Size:     4 [unused]
  float fSubSurfaceBlend__uiUNorm;   // Offset:   40 Size:     4 [unused]
  uint iSubSurfaceProfile;           // Offset:   44 Size:     4 [unused]
  float fTranslucency__uiUNorm;      // Offset:   48 Size:     4 [unused]
  bool bBaseColorEmissive;           // Offset:   52 Size:     4 [unused]
  float2 fPaintUVTile;               // Offset:   56 Size:     8 [unused]
  float fAddNormalBlend__uiUNorm;    // Offset:   64 Size:     4 [unused]
  // align: 68 to 80
  ubyte align0[12];
  float4 fAddNormalMaskA__uiSNorm;   // Offset:   80 Size:    16 [unused]
  float4 fAddNormalMaskB__uiSNorm;   // Offset:   96 Size:    16 [unused]
  float fAddNormalMaskC__uiUNorm;    // Offset:  112 Size:     4 [unused]
  float fAddNormalMaskD__uiUNorm;    // Offset:  116 Size:     4 [unused]
  bool bBackFaceShading;             // Offset:  120 Size:     4 [unused]
  // align: 124 to 128
  ubyte align1[4];
  float4 fBackFaceColor__uiColor;    // Offset:  128 Size:    16 [unused]
  bool bBackFaceNormalFilp;          // Offset:  144 Size:     4 [unused]
  float3 fKizuColor__uiColor;        // Offset:  148 Size:    12 [unused]
  bool bLegendary;                   // Offset:  160 Size:     4 [unused]
  // align: 164 to 176
  ubyte align2[12];
  float4 fLegendColor__uiColor;      // Offset:  176 Size:    16 [unused]
  float2 fLegendMetalMask__uiUNorm;  // Offset:  192 Size:     8 [unused]
  float fLegendRoughness;            // Offset:  200 Size:     4 [unused]
  // align: 204 to 208
  ubyte align3[4];
  float2 fLegendFilm__uiUNorm;       // Offset:  208 Size:     8 [unused]
  float fLegendSSSMask__uiUNorm;     // Offset:  216 Size:     4 [unused]
  float fPartsMaskA__uiUNorm;        // Offset:  220 Size:     4 [unused]
  float fPartsMaskB__uiUNorm;        // Offset:  224 Size:     4 [unused]
  float fPartsMaskC__uiUNorm;        // Offset:  228 Size:     4 [unused]
  float fPartsMaskD__uiUNorm;        // Offset:  232 Size:     4 [unused]
  float fPartsMaskX__uiUNorm;        // Offset:  236 Size:     4 [unused]
  float fPartsMaskY__uiUNorm;        // Offset:  240 Size:     4 [unused]
  float fPartsMaskZ__uiUNorm;        // Offset:  244 Size:     4 [unused]
  float fPartsMaskW__uiUNorm;        // Offset:  248 Size:     4 [unused]
  bool bUseOffset;                   // Offset:  252 Size:     4
  float3 fFlowDirDir__uiDirection;   // Offset:  256 Size:    12 [unused]
  // align: 268 to 272
  ubyte align4[4];
  float4 fFlowControl__uiUNorm;      // Offset:  272 Size:    16 [unused]
  float fFlowTile;                   // Offset:  288 Size:     4 [unused]
  // align: 292 to 304
  ubyte align5[12];
  float4 fFlowColor__uiColor;        // Offset:  304 Size:    16 [unused]
  float4 fFlowMatControl__uiUNorm;   // Offset:  320 Size:    16 [unused]
  float4 fDisplaceControl;           // Offset:  336 Size:    16
  float4 fFurParam__uiUNorm;         // Offset:  352 Size:    16 [unused]
  float fFurTile;                    // Offset:  368 Size:     4 [unused]
  float fDispSpeed;                  // Offset:  372 Size:     4
  float fFilmThickness__uiUNorm;     // Offset:  376 Size:     4 [unused]
  float fFilmBlend__uiUNorm;         // Offset:  380 Size:     4 [unused]
  float fRefraction__uiUNorm;        // Offset:  384 Size:     4 [unused]
  float fRefractionBlend__uiUNorm;   // Offset:  388 Size:     4 [unused]

};

//CBCSClear : 3300.shdr.src
struct CBCSClear {


  uint iSize;                        // Offset:    0 Size:     4

};

//CBROPTest : 999.shdr.src
struct CBROPTest {


  bool bAlphaTestEnable;             // Offset:    0 Size:     4 [unused]
  float fAlphaRef;                   // Offset:    4 Size:     4
  float fDepthBias;                  // Offset:    8 Size:     4 [unused]
  float fSlopedDepthBias;            // Offset:   12 Size:     4 [unused]
  float fMaxDepthBias;               // Offset:   16 Size:     4 [unused]
  float fGlobalTransparency;         // Offset:   20 Size:     4 [unused]
  bool bAlphaDither;                 // Offset:   24 Size:     4 [unused]

};

//CBMhMaterialSimpleLocal__disclosure : 2763.shdr.src
struct CBMhMaterialSimpleLocal__disclosure {


  float4 fBaseMapFactor__uiColor;    // Offset:    0 Size:    16
  float3 fEmissiveMapFactor__uiColor;// Offset:   16 Size:    12 [unused]
  float fMetalic__uiUNorm;           // Offset:   28 Size:     4 [unused]
  float fRoughness__uiUNorm;         // Offset:   32 Size:     4 [unused]
  float fSpecular__uiUNorm;          // Offset:   36 Size:     4 [unused]
  float fSubSurfaceBlend__uiUNorm;   // Offset:   40 Size:     4 [unused]
  uint iSubSurfaceProfile;           // Offset:   44 Size:     4 [unused]
  float fTranslucency__uiUNorm;      // Offset:   48 Size:     4 [unused]
  // align: 52 to 64
  ubyte align0[12];
  float4 fUVTransformA;              // Offset:   64 Size:    16

};

//CBMhMaterialNPCSkinLocal__disclosure : 4283.shdr.src
struct CBMhMaterialNPCSkinLocal__disclosure {


  float4 fBaseMapFactor__uiColor;    // Offset:    0 Size:    16
  float3 fEmissiveMapFactor__uiColor;// Offset:   16 Size:    12 [unused]
  float fMetalic__uiUNorm;           // Offset:   28 Size:     4 [unused]
  float fRoughness__uiUNorm;         // Offset:   32 Size:     4 [unused]
  float fSpecular__uiUNorm;          // Offset:   36 Size:     4 [unused]
  float fSubSurfaceBlend__uiUNorm;   // Offset:   40 Size:     4 [unused]
  uint iSubSurfaceProfile;           // Offset:   44 Size:     4 [unused]
  float fTranslucency__uiUNorm;      // Offset:   48 Size:     4 [unused]
  bool bBaseColorEmissive;           // Offset:   52 Size:     4 [unused]
  bool bBackFaceNormalFilp;          // Offset:   56 Size:     4 [unused]
  float fAnimEmitMin;                // Offset:   60 Size:     4 [unused]
  float fAnimEmitSpeed;              // Offset:   64 Size:     4 [unused]
  float2 fAddColorUV__uiUNorm;       // Offset:   68 Size:     8 [unused]
  bool bUseCMM;                      // Offset:   76 Size:     4 [unused]
  float4 fAddColorA__uiColor;        // Offset:   80 Size:    16 [unused]
  float fDetailNormalBlend__uiUNorm; // Offset:   96 Size:     4 [unused]
  // align: 100 to 112
  ubyte align0[12];
  float4 fUVTransformDetailNormal;   // Offset:  112 Size:    16 [unused]

};

//CBMhSky2GBuffer : 3331.shdr.src
struct CBMhSky2GBuffer {


  uint iSkyGBufferId;                // Offset:    0 Size:     4

};

//CBHazeFilter : 1201.shdr.src
struct CBHazeFilter {


  uint iHazeTech;                    // Offset:    0 Size:     4
  float fHazeFilterStart;            // Offset:    4 Size:     4
  float fHazeFilterInverseRange;     // Offset:    8 Size:     4
  float fHazeFilterHeightStart;      // Offset:   12 Size:     4
  float fHazeFilterHeightInverseRange;// Offset:   16 Size:     4
  // align: 20 to 32
  ubyte align0[12];
  float4 fHazeFilterUVWOffset;       // Offset:   32 Size:    16
  float fHazeFilterScale;            // Offset:   48 Size:     4

};

//CBDOFFilter : 725.shdr.src
struct CBDOFFilter {


  float2 fDOFPoissonOffsets[8];      // Offset:    0 Size:   120
  float2 fDOFPixelSizeLow;           // Offset:  120 Size:     8 [unused]
  float2 fDOFPixelSizeHigh;          // Offset:  128 Size:     8 [unused]
  // align: 136 to 144
  ubyte align0[8];
  float3 fDOFGradateColor;           // Offset:  144 Size:    12
  float fDOFFocus;                   // Offset:  156 Size:     4
  float fDOFNear;                    // Offset:  160 Size:     4 [unused]
  float fDOFFar;                     // Offset:  164 Size:     4 [unused]
  float fDOFNearLimit;               // Offset:  168 Size:     4
  float fDOFFarLimit;                // Offset:  172 Size:     4
  float fDOFCoCScale;                // Offset:  176 Size:     4
  float fDOFCoCBias;                 // Offset:  180 Size:     4
  float fDOFRadiusScale;             // Offset:  184 Size:     4
  float fDOFCorrectParamNear;        // Offset:  188 Size:     4
  float fDOFCorrectParamFar;         // Offset:  192 Size:     4
  // align: 196 to 208
  ubyte align1[12];
  float4 fDOFVelocityFactor;         // Offset:  208 Size:    16 [unused]

};

//CBGodRaysFilter : 599.shdr.src
struct CBGodRaysFilter {


  float3 fGodRaysOrigin;             // Offset:    0 Size:    12
  float fGodRaysMaskWeight;          // Offset:   12 Size:     4
  float3 fGodRaysWorldOrigin;        // Offset:   16 Size:    12
  float fGodRaysMaskRadius;          // Offset:   28 Size:     4
  float fGodRaysDecay;               // Offset:   32 Size:     4 [unused]
  float fGodRaysThreshold;           // Offset:   36 Size:     4
  float fGodRaysSamples;             // Offset:   40 Size:     4 [unused]
  float fGodRaysGamma;               // Offset:   44 Size:     4 [unused]
  float4 fGodRaysColor;              // Offset:   48 Size:    16 [unused]
  float fGodRaysShadowThreshold;     // Offset:   64 Size:     4
  float fGodRaysBlurWidthScale;      // Offset:   68 Size:     4 [unused]
  float fGodRaysBlurWidthOffset;     // Offset:   72 Size:     4 [unused]

};

//CBMhMaterialIvyFloor : 3226.shdr.src
struct CBMhMaterialIvyFloor {


  int iIvyFloorWindIndex;            // Offset:    0 Size:     4
  int iIvyFloorWindIndexPF;          // Offset:    4 Size:     4 [unused]
  uint2 iIvyFloorId;                 // Offset:    8 Size:     8
  float fIvyFloorWindScale;          // Offset:   16 Size:     4

};

//CBVRFilter : 1003.shdr.src
struct CBVRFilter {


  float4 fDimensions;                // Offset:    0 Size:    16
  float4 fFilterRegion;              // Offset:   16 Size:    16 [unused]
  float fFilterMipLevel;             // Offset:   32 Size:     4 [unused]
  bool vertical;                     // Offset:   36 Size:     4

};

//CBDecal : 4085.shdr.src
struct CBDecal {


  uint iDecalMode;                   // Offset:    0 Size:     4 [unused]
  float fDecalMetallic;              // Offset:    4 Size:     4
  float fDecalRoughness;             // Offset:    8 Size:     4
  float fDecalNonMetallicFresnel;    // Offset:   12 Size:     4
  float fDecalLimitAngle;            // Offset:   16 Size:     4

};

//CBPrimVertexOffset : 852.shdr.src
struct CBPrimVertexOffset {


  uint iPrimVertexOffset;            // Offset:    0 Size:     4
  uint iPrimRequestNum;              // Offset:    4 Size:     4 [unused]

};

//CBMhEmissiveFog__disclosure : 4165.shdr.src
struct CBMhEmissiveFog__disclosure {


  float4 fBaseMapFactor__uiColor;    // Offset:    0 Size:    16 [unused]
  float4 fEmissiveMapFactor__uiColor;// Offset:   16 Size:    16 [unused]
  float fMetalic__uiUNorm;           // Offset:   32 Size:     4 [unused]
  float fSpecular__uiUNorm;          // Offset:   36 Size:     4 [unused]
  float fRoughness__uiUNorm;         // Offset:   40 Size:     4 [unused]
  // align: 44 to 48
  ubyte align0[4];
  float4 fUVTransformA;              // Offset:   48 Size:    16 [unused]
  float4 fUVTransformB;              // Offset:   64 Size:    16 [unused]
  float fFlowSpeed;                  // Offset:   80 Size:     4 [unused]
  float fFlowSpeedSecondary;         // Offset:   84 Size:     4 [unused]
  float fFlowStrength;               // Offset:   88 Size:     4 [unused]
  float fSecondaryFlowStrength;      // Offset:   92 Size:     4 [unused]
  float fLerpAlpha_BMtoEM__uiUNorm;  // Offset:   96 Size:     4 [unused]
  bool fAlphaEdge;                   // Offset:  100 Size:     4 [unused]
  float fToneAlpha__uiUNorm;         // Offset:  104 Size:     4 [unused]
  float fToneEdge__uiUNorm;          // Offset:  108 Size:     4 [unused]
  float4 fEdgeColor__uiColor;        // Offset:  112 Size:    16 [unused]
  bool fVertexAlpha;                 // Offset:  128 Size:     4 [unused]
  float fVolumeBlend__uiSNorm;       // Offset:  132 Size:     4 [unused]
  float fDotOpacity;                 // Offset:  136 Size:     4 [unused]
  float fDotOpacityFactor;           // Offset:  140 Size:     4 [unused]
  bool bDotInverse;                  // Offset:  144 Size:     4 [unused]
  float fNearOpacity;                // Offset:  148 Size:     4 [unused]
  float fNearOpacityDistance;        // Offset:  152 Size:     4 [unused]
  float fDiffuseChroma__uiUNorm;     // Offset:  156 Size:     4 [unused]
  float fSpecularChroma__uiUNorm;    // Offset:  160 Size:     4 [unused]
  float fInnerOffsetScale;           // Offset:  164 Size:     4
  float fVelocityAttn;               // Offset:  168 Size:     4 [unused]
  float fNormalDecalBlend__uiUNorm;  // Offset:  172 Size:     4 [unused]

};

//CBMhMaterialPLEyeLocal__disclosure : 775.shdr.src
struct CBMhMaterialPLEyeLocal__disclosure {


  float4 fBaseMapFactor__uiColor;    // Offset:    0 Size:    16
  float3 fEmissiveMapFactor__uiColor;// Offset:   16 Size:    12 [unused]
  float fMetalic__uiUNorm;           // Offset:   28 Size:     4 [unused]
  float fRoughness__uiUNorm;         // Offset:   32 Size:     4 [unused]
  float fSpecular__uiUNorm;          // Offset:   36 Size:     4 [unused]
  float fSubSurfaceBlend__uiUNorm;   // Offset:   40 Size:     4 [unused]
  uint iSubSurfaceProfile;           // Offset:   44 Size:     4 [unused]
  float fTranslucency__uiUNorm;      // Offset:   48 Size:     4 [unused]
  bool bBaseColorEmissive;           // Offset:   52 Size:     4 [unused]
  bool bBackFaceNormalFilp;          // Offset:   56 Size:     4 [unused]
  float fAnimEmitMin;                // Offset:   60 Size:     4 [unused]
  float fAnimEmitSpeed;              // Offset:   64 Size:     4 [unused]
  float fParallaxFactor__uiUNorm;    // Offset:   68 Size:     4
  float fDetailNormalBlend__uiUNorm; // Offset:   72 Size:     4 [unused]
  // align: 76 to 80
  ubyte align0[4];
  float4 fUVTransformDetailNormal;   // Offset:   80 Size:    16 [unused]

};

//CBMhMaterialEM105Local__disclosure : 99.shdr.src
struct CBMhMaterialEM105Local__disclosure {


  float4 fBaseMapFactor__uiColor;    // Offset:    0 Size:    16
  float3 fEmissiveMapFactor__uiColor;// Offset:   16 Size:    12
  float fMetalic__uiUNorm;           // Offset:   28 Size:     4
  float fRoughness__uiUNorm;         // Offset:   32 Size:     4
  float fSpecular__uiUNorm;          // Offset:   36 Size:     4
  float fSubSurfaceBlend__uiUNorm;   // Offset:   40 Size:     4
  uint iSubSurfaceProfile;           // Offset:   44 Size:     4
  float fTranslucency__uiUNorm;      // Offset:   48 Size:     4
  bool bBaseColorEmissive;           // Offset:   52 Size:     4
  float2 fPaintUVTile;               // Offset:   56 Size:     8
  float fAddNormalBlend__uiUNorm;    // Offset:   64 Size:     4
  // align: 68 to 80
  ubyte align0[12];
  float4 fAddNormalMaskA__uiSNorm;   // Offset:   80 Size:    16
  float4 fAddNormalMaskB__uiSNorm;   // Offset:   96 Size:    16
  float fAddNormalMaskC__uiUNorm;    // Offset:  112 Size:     4
  float fAddNormalMaskD__uiUNorm;    // Offset:  116 Size:     4
  bool bBackFaceShading;             // Offset:  120 Size:     4
  // align: 124 to 128
  ubyte align1[4];
  float4 fBackFaceColor__uiColor;    // Offset:  128 Size:    16
  bool bBackFaceNormalFilp;          // Offset:  144 Size:     4
  float3 fKizuColor__uiColor;        // Offset:  148 Size:    12
  bool bLegendary;                   // Offset:  160 Size:     4
  // align: 164 to 176
  ubyte align2[12];
  float4 fLegendColor__uiColor;      // Offset:  176 Size:    16
  float2 fLegendMetalMask__uiUNorm;  // Offset:  192 Size:     8
  float fLegendRoughness;            // Offset:  200 Size:     4
  // align: 204 to 208
  ubyte align3[4];
  float2 fLegendFilm__uiUNorm;       // Offset:  208 Size:     8
  float fLegendSSSMask__uiUNorm;     // Offset:  216 Size:     4
  float fPartsMaskA__uiUNorm;        // Offset:  220 Size:     4
  float fPartsMaskB__uiUNorm;        // Offset:  224 Size:     4
  float fPartsMaskC__uiUNorm;        // Offset:  228 Size:     4
  float fPartsMaskD__uiUNorm;        // Offset:  232 Size:     4
  float fPartsMaskX__uiUNorm;        // Offset:  236 Size:     4
  float fPartsMaskY__uiUNorm;        // Offset:  240 Size:     4
  float fPartsMaskZ__uiUNorm;        // Offset:  244 Size:     4
  float fPartsMaskW__uiUNorm;        // Offset:  248 Size:     4
  bool bUseOffset;                   // Offset:  252 Size:     4 [unused]
  float3 fFlowDirDir__uiDirection;   // Offset:  256 Size:    12
  // align: 268 to 272
  ubyte align4[4];
  float4 fFlowControl__uiUNorm;      // Offset:  272 Size:    16
  float fFlowTile;                   // Offset:  288 Size:     4
  // align: 292 to 304
  ubyte align5[12];
  float4 fFlowColor__uiColor;        // Offset:  304 Size:    16
  float4 fFlowMatControl__uiUNorm;   // Offset:  320 Size:    16
  float4 fMaskBlend__uiUNorm;        // Offset:  336 Size:    16 [unused]
  float2 fMaskBlend_A__uiUNorm;      // Offset:  352 Size:     8
  float2 fMaskBlend_B__uiUNorm;      // Offset:  360 Size:     8
  float fFilmThickness__uiUNorm;     // Offset:  368 Size:     4
  float fFilmBlend__uiUNorm;         // Offset:  372 Size:     4
  float fRefraction__uiUNorm;        // Offset:  376 Size:     4
  float fRefractionBlend__uiUNorm;   // Offset:  380 Size:     4
  float fVPushScale;                 // Offset:  384 Size:     4 [unused]
  float fVPushWave;                  // Offset:  388 Size:     4 [unused]
  float fVPushSpeed;                 // Offset:  392 Size:     4 [unused]
  // align: 396 to 400
  ubyte align6[4];
  float3 fVpivot;                    // Offset:  400 Size:    12 [unused]
  float fInnerOffsetScale;           // Offset:  412 Size:     4 [unused]
  float fRimAlphaPower__uiSNorm;     // Offset:  416 Size:     4
  float fVolumeBlend__uiSNorm;       // Offset:  420 Size:     4
  // align: 424 to 432
  ubyte align7[8];
  float4 fDetailEmissiveControl;     // Offset:  432 Size:    16
  float fRimTranslucency__uiUNorm;   // Offset:  448 Size:     4
  float fFinWave;                    // Offset:  452 Size:     4
  float fFinSpeed;                   // Offset:  456 Size:     4
  // align: 460 to 464
  ubyte align8[4];
  float3 fFinColor__uiColor;         // Offset:  464 Size:    12

};

//CBMhSkyGBuffer : 6666.shdr.src
struct CBMhSkyGBuffer {


  uint iSkyGBufferId;                // Offset:    0 Size:     4

};

//CB_CombinedFilter_ColorCorrect : 6309.shdr.src
struct CB_CombinedFilter_ColorCorrect {


  float fDepthNear;                  // Offset:    0 Size:     4
  float fDepthFar;                   // Offset:    4 Size:     4
  bool bHdrExtrapolation;            // Offset:    8 Size:     4
  float fHdrIntensityRangeInv;       // Offset:   12 Size:     4

};

//CBLightShaft : 6749.shdr.src
struct CBLightShaft {


  row_major float4x4 fModelMat;      // Offset:    0 Size:    64 [unused]
  row_major float4x4 fInvModelMat;   // Offset:   64 Size:    64 [unused]
  float fExtinctionCoef;             // Offset:  128 Size:     4 [unused]
  float fRayleighCoef;               // Offset:  132 Size:     4 [unused]
  float fMieCoef;                    // Offset:  136 Size:     4 [unused]
  float fZAttnStart;                 // Offset:  140 Size:     4 [unused]
  float fZAttnEnd;                   // Offset:  144 Size:     4 [unused]
  uint iFlags;                       // Offset:  148 Size:     4 [unused]
  float fTransparency;               // Offset:  152 Size:     4
  float fReductionScale;             // Offset:  156 Size:     4 [unused]
  float3 fMiePhaseK;                 // Offset:  160 Size:    12 [unused]

};

//CBMhMaterialEM024Local__disclosure : 354.shdr.src
struct CBMhMaterialEM024Local__disclosure {


  float4 fBaseMapFactor__uiColor;    // Offset:    0 Size:    16 [unused]
  float3 fEmissiveMapFactor__uiColor;// Offset:   16 Size:    12 [unused]
  float fMetalic__uiUNorm;           // Offset:   28 Size:     4 [unused]
  float fRoughness__uiUNorm;         // Offset:   32 Size:     4 [unused]
  float fSpecular__uiUNorm;          // Offset:   36 Size:     4 [unused]
  float fSubSurfaceBlend__uiUNorm;   // Offset:   40 Size:     4 [unused]
  uint iSubSurfaceProfile;           // Offset:   44 Size:     4 [unused]
  float fTranslucency__uiUNorm;      // Offset:   48 Size:     4 [unused]
  bool bBaseColorEmissive;           // Offset:   52 Size:     4 [unused]
  float2 fPaintUVTile;               // Offset:   56 Size:     8 [unused]
  float fAddNormalBlend__uiUNorm;    // Offset:   64 Size:     4 [unused]
  // align: 68 to 80
  ubyte align0[12];
  float4 fAddNormalMaskA__uiSNorm;   // Offset:   80 Size:    16 [unused]
  float4 fAddNormalMaskB__uiSNorm;   // Offset:   96 Size:    16 [unused]
  float fAddNormalMaskC__uiUNorm;    // Offset:  112 Size:     4 [unused]
  float fAddNormalMaskD__uiUNorm;    // Offset:  116 Size:     4 [unused]
  bool bBackFaceShading;             // Offset:  120 Size:     4 [unused]
  // align: 124 to 128
  ubyte align1[4];
  float4 fBackFaceColor__uiColor;    // Offset:  128 Size:    16 [unused]
  bool bBackFaceNormalFilp;          // Offset:  144 Size:     4 [unused]
  float3 fKizuColor__uiColor;        // Offset:  148 Size:    12 [unused]
  bool bLegendary;                   // Offset:  160 Size:     4 [unused]
  // align: 164 to 176
  ubyte align2[12];
  float4 fLegendColor__uiColor;      // Offset:  176 Size:    16 [unused]
  float2 fLegendMetalMask__uiUNorm;  // Offset:  192 Size:     8 [unused]
  float fLegendRoughness;            // Offset:  200 Size:     4 [unused]
  // align: 204 to 208
  ubyte align3[4];
  float2 fLegendFilm__uiUNorm;       // Offset:  208 Size:     8 [unused]
  float fLegendSSSMask__uiUNorm;     // Offset:  216 Size:     4 [unused]
  float fPartsMaskA__uiUNorm;        // Offset:  220 Size:     4 [unused]
  float fPartsMaskB__uiUNorm;        // Offset:  224 Size:     4 [unused]
  float fPartsMaskC__uiUNorm;        // Offset:  228 Size:     4 [unused]
  float fPartsMaskD__uiUNorm;        // Offset:  232 Size:     4 [unused]
  float fPartsMaskX__uiUNorm;        // Offset:  236 Size:     4 [unused]
  float fPartsMaskY__uiUNorm;        // Offset:  240 Size:     4 [unused]
  float fPartsMaskZ__uiUNorm;        // Offset:  244 Size:     4 [unused]
  float fPartsMaskW__uiUNorm;        // Offset:  248 Size:     4 [unused]
  bool bUseOffset;                   // Offset:  252 Size:     4
  float3 fFlowDirDir__uiDirection;   // Offset:  256 Size:    12 [unused]
  // align: 268 to 272
  ubyte align4[4];
  float4 fFlowControl__uiUNorm;      // Offset:  272 Size:    16 [unused]
  float fFlowTile;                   // Offset:  288 Size:     4 [unused]
  // align: 292 to 304
  ubyte align5[12];
  float4 fFlowColor__uiColor;        // Offset:  304 Size:    16 [unused]
  float4 fFlowMatControl__uiUNorm;   // Offset:  320 Size:    16 [unused]
  float4 fMaskBlend__uiUNorm;        // Offset:  336 Size:    16 [unused]
  float2 fMaskBlend_A__uiUNorm;      // Offset:  352 Size:     8 [unused]
  float2 fMaskBlend_B__uiUNorm;      // Offset:  360 Size:     8 [unused]
  float fFilmThickness__uiUNorm;     // Offset:  368 Size:     4 [unused]
  float fFilmBlend__uiUNorm;         // Offset:  372 Size:     4 [unused]
  float fRefraction__uiUNorm;        // Offset:  376 Size:     4 [unused]
  float fRefractionBlend__uiUNorm;   // Offset:  380 Size:     4 [unused]

};

//CBWaterCustom : 5488.shdr.src
struct CBWaterCustom {


  float4 fWaterCustomBaseMapFactor;  // Offset:    0 Size:    16
  float4 fWaterCustomBlendBaseMapFactor;// Offset:   16 Size:    16
  float3 fWaterCustomEmissiveMapFactor;// Offset:   32 Size:    12
  // align: 44 to 48
  ubyte align0[4];
  float3 fWaterCustomCubeMapFactor;  // Offset:   48 Size:    12
  // align: 60 to 64
  ubyte align1[4];
  float3 fWaterCustomBlendCubeMapFactor;// Offset:   64 Size:    12
  float fWaterCustomMetallic;        // Offset:   76 Size:     4
  float fWaterCustomRoughness;       // Offset:   80 Size:     4
  float fWaterCustomSpecular;        // Offset:   84 Size:     4 [unused]
  // align: 88 to 96
  ubyte align2[8];
  float4 fWaterCustomUVTransformA;   // Offset:   96 Size:    16
  float4 fWaterCustomUVTransformB;   // Offset:  112 Size:    16
  float2 fWaterCustomUVOffsetSpeedFactor;// Offset:  128 Size:     8
  float2 fWaterCustomUVOffsetSpeedFactorDetail;// Offset:  136 Size:     8
  float fWaterCustomDetailNormalBlend;// Offset:  144 Size:     4
  float fWaterCustomProjectionNormalBlend;// Offset:  148 Size:     4
  float2 fWaterCustomProjectionNormalTileSize;// Offset:  152 Size:     8
  float fWaterCustomRefraction;      // Offset:  160 Size:     4 [unused]
  float3 fWaterCustomRefractionFactor;// Offset:  164 Size:    12 [unused]
  float3 fWaterCustomBlendRefractionFactor;// Offset:  176 Size:    12 [unused]
  float fWaterCustomRefractionPow;   // Offset:  188 Size:     4 [unused]
  bool bWaterCustomRefractionScreenFade;// Offset:  192 Size:     4 [unused]
  float fWaterCustomRefractionTangentNormalBlend;// Offset:  196 Size:     4 [unused]
  float fWaterCustomVolumeBlend;     // Offset:  200 Size:     4 [unused]
  float fWaterCustomFlowStrength;    // Offset:  204 Size:     4
  float fWaterCustomFlowSpeed;       // Offset:  208 Size:     4
  bool bWaterCustomAlphaTest;        // Offset:  212 Size:     4
  float fWaterCustomAlphaTestRef;    // Offset:  216 Size:     4
  bool bWaterCustomAlphaDither;      // Offset:  220 Size:     4
  float fWaterCustomFresnelBias;     // Offset:  224 Size:     4

};

//CBMhMaterialEM036Local__disclosure : 4778.shdr.src
struct CBMhMaterialEM036Local__disclosure {


  float4 fBaseMapFactor__uiColor;    // Offset:    0 Size:    16 [unused]
  float3 fEmissiveMapFactor__uiColor;// Offset:   16 Size:    12 [unused]
  float fMetalic__uiUNorm;           // Offset:   28 Size:     4 [unused]
  float fRoughness__uiUNorm;         // Offset:   32 Size:     4 [unused]
  float fSpecular__uiUNorm;          // Offset:   36 Size:     4 [unused]
  float fSubSurfaceBlend__uiUNorm;   // Offset:   40 Size:     4 [unused]
  uint iSubSurfaceProfile;           // Offset:   44 Size:     4 [unused]
  float fTranslucency__uiUNorm;      // Offset:   48 Size:     4 [unused]
  bool bBaseColorEmissive;           // Offset:   52 Size:     4 [unused]
  float2 fPaintUVTile;               // Offset:   56 Size:     8 [unused]
  float fAddNormalBlend__uiUNorm;    // Offset:   64 Size:     4 [unused]
  // align: 68 to 80
  ubyte align0[12];
  float4 fAddNormalMaskA__uiSNorm;   // Offset:   80 Size:    16 [unused]
  float4 fAddNormalMaskB__uiSNorm;   // Offset:   96 Size:    16 [unused]
  float fAddNormalMaskC__uiUNorm;    // Offset:  112 Size:     4 [unused]
  float fAddNormalMaskD__uiUNorm;    // Offset:  116 Size:     4 [unused]
  bool bBackFaceShading;             // Offset:  120 Size:     4 [unused]
  // align: 124 to 128
  ubyte align1[4];
  float4 fBackFaceColor__uiColor;    // Offset:  128 Size:    16 [unused]
  bool bBackFaceNormalFilp;          // Offset:  144 Size:     4 [unused]
  float3 fKizuColor__uiColor;        // Offset:  148 Size:    12 [unused]
  bool bLegendary;                   // Offset:  160 Size:     4 [unused]
  // align: 164 to 176
  ubyte align2[12];
  float4 fLegendColor__uiColor;      // Offset:  176 Size:    16 [unused]
  float2 fLegendMetalMask__uiUNorm;  // Offset:  192 Size:     8 [unused]
  float fLegendRoughness;            // Offset:  200 Size:     4 [unused]
  // align: 204 to 208
  ubyte align3[4];
  float2 fLegendFilm__uiUNorm;       // Offset:  208 Size:     8 [unused]
  float fLegendSSSMask__uiUNorm;     // Offset:  216 Size:     4 [unused]
  float fPartsMaskA__uiUNorm;        // Offset:  220 Size:     4 [unused]
  float fPartsMaskB__uiUNorm;        // Offset:  224 Size:     4 [unused]
  float fPartsMaskC__uiUNorm;        // Offset:  228 Size:     4 [unused]
  float fPartsMaskD__uiUNorm;        // Offset:  232 Size:     4 [unused]
  float fPartsMaskX__uiUNorm;        // Offset:  236 Size:     4 [unused]
  float fPartsMaskY__uiUNorm;        // Offset:  240 Size:     4 [unused]
  float fPartsMaskZ__uiUNorm;        // Offset:  244 Size:     4 [unused]
  float fPartsMaskW__uiUNorm;        // Offset:  248 Size:     4 [unused]
  bool bUseOffset;                   // Offset:  252 Size:     4
  float3 fFlowDirDir__uiDirection;   // Offset:  256 Size:    12 [unused]
  // align: 268 to 272
  ubyte align4[4];
  float4 fFlowControl__uiUNorm;      // Offset:  272 Size:    16 [unused]
  float fFlowTile;                   // Offset:  288 Size:     4 [unused]
  // align: 292 to 304
  ubyte align5[12];
  float4 fFlowColor__uiColor;        // Offset:  304 Size:    16 [unused]
  float4 fFlowMatControl__uiUNorm;   // Offset:  320 Size:    16 [unused]
  float fFilmThickness__uiUNorm;     // Offset:  336 Size:     4 [unused]
  float fFilmBlend__uiUNorm;         // Offset:  340 Size:     4 [unused]
  float fRefraction__uiUNorm;        // Offset:  344 Size:     4 [unused]
  float fRefractionBlend__uiUNorm;   // Offset:  348 Size:     4 [unused]
  float4 fEmitControl__uiUNorm;      // Offset:  352 Size:    16 [unused]

};

//CBMhMaterialVfxFloodLocal__disclosure : 6529.shdr.src
struct CBMhMaterialVfxFloodLocal__disclosure {


  float3 fBaseMapFactor__uiColor;    // Offset:    0 Size:    12 [unused]
  // align: 12 to 16
  ubyte align0[4];
  float3 fDistortionFactor__uiColor; // Offset:   16 Size:    12 [unused]
  // align: 28 to 32
  ubyte align1[4];
  float3 fCubeMapFactor__uiColor;    // Offset:   32 Size:    12 [unused]
  float fOpacityFactor;              // Offset:   44 Size:     4 [unused]
  float fMetalic__uiUNorm;           // Offset:   48 Size:     4 [unused]
  float fRoughness__uiUNorm;         // Offset:   52 Size:     4 [unused]
  float fDispFactor;                 // Offset:   56 Size:     4
  // align: 60 to 64
  ubyte align2[4];
  float4 fUVTransformA;              // Offset:   64 Size:    16 [unused]
  float4 fUVTransformB;              // Offset:   80 Size:    16
  float4 fUVTransformC;              // Offset:   96 Size:    16 [unused]
  float fVolumeBlend__uiSNorm;       // Offset:  112 Size:     4 [unused]
  float fSpecularFactor;             // Offset:  116 Size:     4 [unused]
  bool bSceneEnvMap;                 // Offset:  120 Size:     4 [unused]
  float fRaflectionAngle__uiSNorm;   // Offset:  124 Size:     4 [unused]
  float fDistortionAngle;            // Offset:  128 Size:     4 [unused]
  float fDistortion;                 // Offset:  132 Size:     4 [unused]
  float fTranslucency__uiUNorm;      // Offset:  136 Size:     4 [unused]
  float fDiffuseChroma__uiUNorm;     // Offset:  140 Size:     4 [unused]
  float fSpecularChroma__uiUNorm;    // Offset:  144 Size:     4 [unused]
  float fFlowSpeed;                  // Offset:  148 Size:     4 [unused]
  float fFlowStrength;               // Offset:  152 Size:     4 [unused]
  float fWhiteWaterPow;              // Offset:  156 Size:     4 [unused]
  float fWhiteWater;                 // Offset:  160 Size:     4 [unused]
  float fEdgeFoamPow;                // Offset:  164 Size:     4 [unused]
  float fEdgeFoamFactor;             // Offset:  168 Size:     4 [unused]
  bool bEnableLava;                  // Offset:  172 Size:     4 [unused]
  bool bEnableAlbedoBlend;           // Offset:  176 Size:     4 [unused]
  float fHeat;                       // Offset:  180 Size:     4 [unused]
  float fInnerOffsetScale;           // Offset:  184 Size:     4
  float fAlbedoBlendPow;             // Offset:  188 Size:     4 [unused]
  float fAlbedoBlendRate;            // Offset:  192 Size:     4 [unused]
  float fAlbedoBlendFactor;          // Offset:  196 Size:     4 [unused]
  // align: 200 to 208
  ubyte align3[8];
  float3 fAlbedoBlendVector;         // Offset:  208 Size:    12 [unused]
  float fVelocityAttn;               // Offset:  220 Size:     4 [unused]
  float fNormalDecalBlend__uiUNorm;  // Offset:  224 Size:     4 [unused]

};

//CBBloom : 959.shdr.src
struct CBBloom {


  float fBloomThreshold;             // Offset:    0 Size:     4 [unused]
  float fBloomRenormalize;           // Offset:    4 Size:     4 [unused]
  bool bGamutSrgb;                   // Offset:    8 Size:     4 [unused]
  // align: 12 to 16
  ubyte align0[4];
  float4 fDirtColor;                 // Offset:   16 Size:    16

};

//CBMhMaterialBurnLocal__disclosure : 5925.shdr.src
struct CBMhMaterialBurnLocal__disclosure {


  float4 fBaseMapFactor__uiColor;    // Offset:    0 Size:    16
  float3 fEmissiveMapFactor__uiColor;// Offset:   16 Size:    12 [unused]
  float fMetalic__uiUNorm;           // Offset:   28 Size:     4 [unused]
  float fRoughness__uiUNorm;         // Offset:   32 Size:     4 [unused]
  float fSpecular__uiUNorm;          // Offset:   36 Size:     4 [unused]
  float fSubSurfaceBlend__uiUNorm;   // Offset:   40 Size:     4 [unused]
  uint iSubSurfaceProfile;           // Offset:   44 Size:     4 [unused]
  float fTranslucency__uiUNorm;      // Offset:   48 Size:     4 [unused]
  // align: 52 to 64
  ubyte align0[12];
  float4 fUVTransformA;              // Offset:   64 Size:    16
  float3 fBurnControl__uiUNorm;      // Offset:   80 Size:    12
  // align: 92 to 96
  ubyte align1[4];
  float3 fBurnColor__uiColor;        // Offset:   96 Size:    12 [unused]

};

//CBPrimMaterialOffset : 6432.shdr.src
struct CBPrimMaterialOffset {


  uint iPrimMaterialOffset;          // Offset:    0 Size:     4
  uint iPrimMaterialCount;           // Offset:    4 Size:     4
  float2 _PrimMaterialReserve;       // Offset:    8 Size:     8 [unused]

};

//CBToneMapping : 2387.shdr.src
struct CBToneMapping {


  uint iToneMapType;                 // Offset:    0 Size:     4
  bool bLuminanceVersion;            // Offset:    4 Size:     4
  float fShouldStr;                  // Offset:    8 Size:     4
  float fLinearStr;                  // Offset:   12 Size:     4
  float fIntermediate;               // Offset:   16 Size:     4
  float fS1;                         // Offset:   20 Size:     4
  float fS2;                         // Offset:   24 Size:     4
  float fS3;                         // Offset:   28 Size:     4
  float fS4;                         // Offset:   32 Size:     4
  uint iLUTSize;                     // Offset:   36 Size:     4
  bool bIsLinearToPQ;                // Offset:   40 Size:     4
  bool bIsPQToLinear;                // Offset:   44 Size:     4
  bool bEnableColorGrading;          // Offset:   48 Size:     4

};

//CBMhMaterialEM106Local__disclosure : 492.shdr.src
struct CBMhMaterialEM106Local__disclosure {


  float4 fBaseMapFactor__uiColor;    // Offset:    0 Size:    16 [unused]
  float3 fEmissiveMapFactor__uiColor;// Offset:   16 Size:    12 [unused]
  float fMetalic__uiUNorm;           // Offset:   28 Size:     4 [unused]
  float fRoughness__uiUNorm;         // Offset:   32 Size:     4 [unused]
  float fSpecular__uiUNorm;          // Offset:   36 Size:     4 [unused]
  float fSubSurfaceBlend__uiUNorm;   // Offset:   40 Size:     4 [unused]
  uint iSubSurfaceProfile;           // Offset:   44 Size:     4 [unused]
  float fTranslucency__uiUNorm;      // Offset:   48 Size:     4 [unused]
  bool bBaseColorEmissive;           // Offset:   52 Size:     4 [unused]
  float2 fPaintUVTile;               // Offset:   56 Size:     8 [unused]
  float fAddNormalBlend__uiUNorm;    // Offset:   64 Size:     4 [unused]
  // align: 68 to 80
  ubyte align0[12];
  float4 fAddNormalMaskA__uiSNorm;   // Offset:   80 Size:    16 [unused]
  float4 fAddNormalMaskB__uiSNorm;   // Offset:   96 Size:    16 [unused]
  float fAddNormalMaskC__uiUNorm;    // Offset:  112 Size:     4 [unused]
  float fAddNormalMaskD__uiUNorm;    // Offset:  116 Size:     4 [unused]
  bool bBackFaceShading;             // Offset:  120 Size:     4 [unused]
  // align: 124 to 128
  ubyte align1[4];
  float4 fBackFaceColor__uiColor;    // Offset:  128 Size:    16 [unused]
  bool bBackFaceNormalFilp;          // Offset:  144 Size:     4 [unused]
  float3 fKizuColor__uiColor;        // Offset:  148 Size:    12 [unused]
  bool bLegendary;                   // Offset:  160 Size:     4 [unused]
  // align: 164 to 176
  ubyte align2[12];
  float4 fLegendColor__uiColor;      // Offset:  176 Size:    16 [unused]
  float2 fLegendMetalMask__uiUNorm;  // Offset:  192 Size:     8 [unused]
  float fLegendRoughness;            // Offset:  200 Size:     4 [unused]
  // align: 204 to 208
  ubyte align3[4];
  float2 fLegendFilm__uiUNorm;       // Offset:  208 Size:     8 [unused]
  float fLegendSSSMask__uiUNorm;     // Offset:  216 Size:     4 [unused]
  float fPartsMaskA__uiUNorm;        // Offset:  220 Size:     4 [unused]
  float fPartsMaskB__uiUNorm;        // Offset:  224 Size:     4 [unused]
  float fPartsMaskC__uiUNorm;        // Offset:  228 Size:     4 [unused]
  float fPartsMaskD__uiUNorm;        // Offset:  232 Size:     4 [unused]
  float fPartsMaskX__uiUNorm;        // Offset:  236 Size:     4 [unused]
  float fPartsMaskY__uiUNorm;        // Offset:  240 Size:     4 [unused]
  float fPartsMaskZ__uiUNorm;        // Offset:  244 Size:     4 [unused]
  float fPartsMaskW__uiUNorm;        // Offset:  248 Size:     4 [unused]
  bool bUseOffset;                   // Offset:  252 Size:     4
  float3 fFlowDirDir__uiDirection;   // Offset:  256 Size:    12 [unused]
  // align: 268 to 272
  ubyte align4[4];
  float4 fFlowControl__uiUNorm;      // Offset:  272 Size:    16 [unused]
  float fFlowTile;                   // Offset:  288 Size:     4 [unused]
  // align: 292 to 304
  ubyte align5[12];
  float4 fFlowColor__uiColor;        // Offset:  304 Size:    16 [unused]
  float4 fFlowMatControl__uiUNorm;   // Offset:  320 Size:    16 [unused]
  float fFilmThickness__uiUNorm;     // Offset:  336 Size:     4 [unused]
  float fFilmBlend__uiUNorm;         // Offset:  340 Size:     4 [unused]
  float fRefraction__uiUNorm;        // Offset:  344 Size:     4 [unused]
  float fRefractionBlend__uiUNorm;   // Offset:  348 Size:     4 [unused]
  float4 fDetailBlend__uiUNorm;      // Offset:  352 Size:    16 [unused]
  float4 fDetailTile;                // Offset:  368 Size:    16 [unused]
  float4 fDetailA_Color__uiColor;    // Offset:  384 Size:    16 [unused]
  float4 fDetailB_Color__uiColor;    // Offset:  400 Size:    16 [unused]
  float4 fDetailC_Color__uiColor;    // Offset:  416 Size:    16 [unused]
  float4 fDetailD_Color__uiColor;    // Offset:  432 Size:    16 [unused]
  float4 fDetail_Roughness__uiUNorm; // Offset:  448 Size:    16 [unused]
  float4 fDetail_Metal__uiUNorm;     // Offset:  464 Size:    16 [unused]

};

//CBMhMaterialVfxFakeInnerLocal__disclosure : 591.shdr.src
struct CBMhMaterialVfxFakeInnerLocal__disclosure {


  float3 fEmissiveMapFactor__uiColor;// Offset:    0 Size:    12 [unused]
  // align: 12 to 16
  ubyte align0[4];
  float4 fUVTransformA;              // Offset:   16 Size:    16 [unused]
  float fInnerOffsetScale;           // Offset:   32 Size:     4
  float fRimAlphaPower__uiUNorm;     // Offset:   36 Size:     4 [unused]
  float fVolumeBlend__uiSNorm;       // Offset:   40 Size:     4 [unused]
  // align: 44 to 48
  ubyte align1[4];
  float2 fUVanimVector;              // Offset:   48 Size:     8 [unused]
  float fOpacityFactor;              // Offset:   56 Size:     4 [unused]
  bool bGBufferIdMaskEnable;         // Offset:   60 Size:     4 [unused]
  uint iGBufferIdMask;               // Offset:   64 Size:     4 [unused]
  float fNormalDecalBlend__uiUNorm;  // Offset:   68 Size:     4 [unused]

};

//CBCubeCopy : 6584.shdr.src
struct CBCubeCopy {


  int4 regions[6];                   // Offset:    0 Size:    96

};

//CBComputeSkinning : 5199.shdr.src
struct CBComputeSkinning {


  uint iSrcStride;                   // Offset:    0 Size:     4
  uint iSrcOffset;                   // Offset:    4 Size:     4
  uint iSrcPositionOffset;           // Offset:    8 Size:     4
  uint iSrcNormalOffset;             // Offset:   12 Size:     4
  uint iSrcWeightsOffset;            // Offset:   16 Size:     4
  uint iSrcJointsOffset;             // Offset:   20 Size:     4
  uint iDestStride;                  // Offset:   24 Size:     4
  uint iDestOffset;                  // Offset:   28 Size:     4
  uint iDestNormalStride;            // Offset:   32 Size:     4
  uint iDestNormalOffset;            // Offset:   36 Size:     4
  uint iVertexCount;                 // Offset:   40 Size:     4
  uint iInstanceID;                  // Offset:   44 Size:     4 [unused]

};

//CBWaterModel : 989.shdr.src
struct CBWaterModel {


  row_major float4x4 fMWorldViewProjMat;// Offset:    0 Size:    64
  row_major float4x4 fMWorldMat;     // Offset:   64 Size:    64 [unused]

};

//CBWaterWave : 872.shdr.src
struct CBWaterWave {


  row_major float4x4 fWorldMat;      // Offset:    0 Size:    64
  float2 fHeightMapSize;             // Offset:   64 Size:     8 [unused]
  float2 fInvHeightMapSize;          // Offset:   72 Size:     8 [unused]
  float2 fMeshCenter;                // Offset:   80 Size:     8 [unused]
  float fTessellationFactor;         // Offset:   88 Size:     4 [unused]
  float fNoiseWaveAmplitude;         // Offset:   92 Size:     4 [unused]
  float fNoiseWaveDensity;           // Offset:   96 Size:     4 [unused]
  float fNoiseWaveSpeed;             // Offset:  100 Size:     4 [unused]
  float2 fOverlapRatio;              // Offset:  104 Size:     8 [unused]
  float2 fNoiseWaveBorderX;          // Offset:  112 Size:     8 [unused]
  float2 fNoiseWaveBorderZ;          // Offset:  120 Size:     8 [unused]
  float2 fDistanceBetweenVertices;   // Offset:  128 Size:     8 [unused]
  float fWaveDensity;                // Offset:  136 Size:     4 [unused]
  float fDetailWaveDensity;          // Offset:  140 Size:     4 [unused]
  float2 fMeshVerticesDistance;      // Offset:  144 Size:     8 [unused]
  float2 fMaxTexcoord;               // Offset:  152 Size:     8 [unused]
  float fElapsedTimeSec;             // Offset:  160 Size:     4 [unused]
  int iDebugViewType;                // Offset:  164 Size:     4 [unused]
  bool bIsAnimating;                 // Offset:  168 Size:     4 [unused]

};

//CBDevelopFlags : 5195.shdr.src
struct CBDevelopFlags {


  int iDispChannel;                  // Offset:    0 Size:     4
  int iDispCubeFace;                 // Offset:    4 Size:     4
  int iDispMode;                     // Offset:    8 Size:     4
  float fDispMipLevel;               // Offset:   12 Size:     4
  float fDispArraySlice;             // Offset:   16 Size:     4

};

//CBMhMaterialVfxDistDispLocal__disclosure : 5574.shdr.src
struct CBMhMaterialVfxDistDispLocal__disclosure {


  float4 fBaseMapFactor__uiColor;    // Offset:    0 Size:    16 [unused]
  float3 fCubeMapFactor__uiColor;    // Offset:   16 Size:    12 [unused]
  // align: 28 to 32
  ubyte align0[4];
  float3 fDistortionFactor__uiColor; // Offset:   32 Size:    12 [unused]
  float fMetalic__uiUNorm;           // Offset:   44 Size:     4 [unused]
  float fSpecular__uiUNorm;          // Offset:   48 Size:     4 [unused]
  float fRoughness__uiUNorm;         // Offset:   52 Size:     4 [unused]
  // align: 56 to 64
  ubyte align1[8];
  float4 fUVTransformA;              // Offset:   64 Size:    16 [unused]
  float4 fUVTransformB;              // Offset:   80 Size:    16
  float fDisplacementFactor;         // Offset:   96 Size:     4
  float fFlow_Speed;                 // Offset:  100 Size:     4 [unused]
  float fFlow_Strength;              // Offset:  104 Size:     4 [unused]
  float fNormalFactor__uiUNorm;      // Offset:  108 Size:     4 [unused]
  float fOpacityFactor;              // Offset:  112 Size:     4 [unused]
  float fVolumeBlend__uiSNorm;       // Offset:  116 Size:     4 [unused]
  float fDistortionAngle;            // Offset:  120 Size:     4 [unused]
  float fDistortion;                 // Offset:  124 Size:     4 [unused]
  float fSpecularFactor;             // Offset:  128 Size:     4 [unused]
  float fDiffuseChroma__uiUNorm;     // Offset:  132 Size:     4 [unused]
  float fSpecularChroma__uiUNorm;    // Offset:  136 Size:     4 [unused]
  bool bRefractionEnable;            // Offset:  140 Size:     4 [unused]
  bool bVolumeBlendEnable;           // Offset:  144 Size:     4 [unused]
  float3 fEmissiveBlendColor__uiColor;// Offset:  148 Size:    12 [unused]
  float fEmissiveBlendColorBlend__uiUNorm;// Offset:  160 Size:     4 [unused]
  float3 fEmissiveBlendRimParam;     // Offset:  164 Size:    12 [unused]
  float fInnerOffsetScale;           // Offset:  176 Size:     4
  float fVelocityAttn;               // Offset:  180 Size:     4 [unused]
  float fNormalDecalBlend__uiUNorm;  // Offset:  184 Size:     4 [unused]

};

//CBMaterialDebug : 1666.shdr.src
struct CBMaterialDebug {


  uint iMaterialDebugView;           // Offset:    0 Size:     4
  bool bMaterialDebugZeroCheck;      // Offset:    4 Size:     4
  // align: 8 to 16
  ubyte align0[8];
  float4 fMaterialDebugColor;        // Offset:   16 Size:    16

};

//CBMhMaterialEMGlobal : 99.shdr.src
struct CBMhMaterialEMGlobal {


  uint fMaterialPaintNum;            // Offset:    0 Size:     4
  // align: 4 to 16
  ubyte align0[12];
  uint fMaterialPaintType[8];        // Offset:   16 Size:   116
  // align: 132 to 144
  ubyte align1[12];
  float4 fMaterialPaintColor[8];     // Offset:  144 Size:   128
  float4 fMaterialPaintCapsuleP0[8]; // Offset:  272 Size:   128
  float4 fMaterialPaintCapsuleP1[8]; // Offset:  400 Size:   128
  float fMaterialPaintCapsuleR[8];   // Offset:  528 Size:   116
  // align: 644 to 656
  ubyte align2[12];
  float2 fMaterialPaintBlendRange[8];// Offset:  656 Size:   120
  // align: 776 to 784
  ubyte align3[8];
  float4 fMaterialPaintEmissive[8];  // Offset:  784 Size:   128
  bool bMaterialPaintEmissive;       // Offset:  912 Size:     4
  float fMaterialWetBlend;           // Offset:  916 Size:     4
  float fMaterialWetRoughness;       // Offset:  920 Size:     4

};

//CBVR_Debug : 131.shdr.src
struct CBVR_Debug {


  uint iMode;                        // Offset:    0 Size:     4

};

//CBMhSky2PS : 6760.shdr.src
struct CBMhSky2PS {


  float3 fSkyGlobalIntensity;        // Offset:    0 Size:    12
  // align: 12 to 16
  ubyte align0[4];
  float4 fSkyStarrySkyMapFactor;     // Offset:   16 Size:    16
  float2 fSkySunUVOffset;            // Offset:   32 Size:     8
  float2 fSkyGlobalCloudSpeed;       // Offset:   40 Size:     8
  float3 fSkyWaterReflectionFactor;  // Offset:   48 Size:    12 [unused]
  float fSkyBlend;                   // Offset:   60 Size:     4
  bool bSkyFog;                      // Offset:   64 Size:     4
  float fSkyFogBlend;                // Offset:   68 Size:     4
  bool bSkyDeGamma;                  // Offset:   72 Size:     4
  float fGamma;                      // Offset:   76 Size:     4
  uint2 iSkyAddress;                 // Offset:   80 Size:     8 [unused]
  float fSkySunlightMaskAlpha;       // Offset:   88 Size:     4
  // align: 92 to 96
  ubyte align1[4];
  float2 fSkySunlightMaskSize;       // Offset:   96 Size:     8
  float2 fSkyTopCloudUVScale0;       // Offset:  104 Size:     8
  float2 fSkyTopCloudUVScale1;       // Offset:  112 Size:     8
  // align: 120 to 128
  ubyte align2[8];
  float4 fSkySunlightSkyColor;       // Offset:  128 Size:    16
  float2 fSkySunlightSkyMaskSize;    // Offset:  144 Size:     8
  float fSkyStarThreshold;           // Offset:  152 Size:     4
  float fSkyStarPower;               // Offset:  156 Size:     4
  float fSkyCloudHighlightIntensity; // Offset:  160 Size:     4
  float fSkyCloudShadowIntensity;    // Offset:  164 Size:     4
  float fSkyCloudContrast;           // Offset:  168 Size:     4
  // align: 172 to 176
  ubyte align3[4];
  float4 fSkyBaseMapFactor;          // Offset:  176 Size:    16
  float2 fSkyBaseSideCloudUVOffset;  // Offset:  192 Size:     8
  float2 fSkyBaseTopCloudUVOffset0;  // Offset:  200 Size:     8
  float2 fSkyBaseTopCloudUVOffset1;  // Offset:  208 Size:     8
  // align: 216 to 224
  ubyte align4[8];
  float2 fSkyCloudSpeeds[4];         // Offset:  224 Size:    56
  // align: 280 to 288
  ubyte align5[8];
  float4 fSkySunCloudHighlightColors[4];// Offset:  288 Size:    64
  float4 fSkySunCloudShadowColors[4];// Offset:  352 Size:    64
  float4 fSkyMiddleCloudHighlightColors[4];// Offset:  416 Size:    64
  float4 fSkyMiddleCloudShadowColors[4];// Offset:  480 Size:    64
  float4 fSkyBackgroundCloudHighlightColors[4];// Offset:  544 Size:    64
  float4 fSkyBackgroundCloudShadowColors[4];// Offset:  608 Size:    64
  float fSkyCloudAlpha[4];           // Offset:  672 Size:    52
  // align: 724 to 736
  ubyte align6[12];
  float4 fSkyBlendBaseMapFactor;     // Offset:  736 Size:    16
  float2 fSkyBlendSideCloudUVOffset; // Offset:  752 Size:     8
  float2 fSkyBlendTopCloudUVOffset0; // Offset:  760 Size:     8
  float2 fSkyBlendTopCloudUVOffset1; // Offset:  768 Size:     8
  // align: 776 to 784
  ubyte align7[8];
  float2 fSkyBlendCloudSpeeds[4];    // Offset:  784 Size:    56
  // align: 840 to 848
  ubyte align8[8];
  float4 fSkyBlendSunCloudHighlightColors[4];// Offset:  848 Size:    64
  float4 fSkyBlendSunCloudShadowColors[4];// Offset:  912 Size:    64
  float4 fSkyBlendMiddleCloudHighlightColors[4];// Offset:  976 Size:    64
  float4 fSkyBlendMiddleCloudShadowColors[4];// Offset: 1040 Size:    64
  float4 fSkyBlendBackgroundCloudHighlightColors[4];// Offset: 1104 Size:    64
  float4 fSkyBlendBackgroundCloudShadowColors[4];// Offset: 1168 Size:    64
  float fSkyBlendCloudAlpha[4];      // Offset: 1232 Size:    52

};

//CBMhMaterialPLSkinLocal__disclosure : 2824.shdr.src
struct CBMhMaterialPLSkinLocal__disclosure {


  float4 fBaseMapFactor__uiColor;    // Offset:    0 Size:    16
  float3 fEmissiveMapFactor__uiColor;// Offset:   16 Size:    12 [unused]
  float fMetalic__uiUNorm;           // Offset:   28 Size:     4 [unused]
  float fRoughness__uiUNorm;         // Offset:   32 Size:     4 [unused]
  float fSpecular__uiUNorm;          // Offset:   36 Size:     4 [unused]
  float fSubSurfaceBlend__uiUNorm;   // Offset:   40 Size:     4 [unused]
  uint iSubSurfaceProfile;           // Offset:   44 Size:     4 [unused]
  float fTranslucency__uiUNorm;      // Offset:   48 Size:     4 [unused]
  bool bBaseColorEmissive;           // Offset:   52 Size:     4 [unused]
  bool bBackFaceNormalFilp;          // Offset:   56 Size:     4 [unused]
  float fAnimEmitMin;                // Offset:   60 Size:     4 [unused]
  float fAnimEmitSpeed;              // Offset:   64 Size:     4 [unused]
  float2 fAddColorUV__uiUNorm;       // Offset:   68 Size:     8 [unused]
  bool bUseCMM;                      // Offset:   76 Size:     4 [unused]
  float4 fAddColorA__uiColor;        // Offset:   80 Size:    16 [unused]
  float fDetailNormalBlend__uiUNorm; // Offset:   96 Size:     4 [unused]
  // align: 100 to 112
  ubyte align0[12];
  float4 fUVTransformDetailNormal;   // Offset:  112 Size:    16 [unused]

};

//CBVignetting : 4073.shdr.src
struct CBVignetting {


  float fOffset;                     // Offset:    0 Size:     4
  float fPow;                        // Offset:    4 Size:     4
  float fEllipticity;                // Offset:    8 Size:     4
  // align: 12 to 16
  ubyte align0[4];
  float3 fColor;                     // Offset:   16 Size:    12

};

//CB_PlantOnSurface : 6660.shdr.src
struct CB_PlantOnSurface {


  float3 fScale;                     // Offset:    0 Size:    12
  uint iNumPerTriangle;              // Offset:   12 Size:     4
  uint iTriangleNum;                 // Offset:   16 Size:     4 [unused]
  uint iIndexOffset;                 // Offset:   20 Size:     4
  float fRotRandomize;               // Offset:   24 Size:     4
  float fDirRandomize;               // Offset:   28 Size:     4
  float fScaleRandomize;             // Offset:   32 Size:     4

};

//CBMhMaterialEM111Local__disclosure : 5362.shdr.src
struct CBMhMaterialEM111Local__disclosure {


  float4 fBaseMapFactor__uiColor;    // Offset:    0 Size:    16 [unused]
  float3 fEmissiveMapFactor__uiColor;// Offset:   16 Size:    12 [unused]
  float fMetalic__uiUNorm;           // Offset:   28 Size:     4 [unused]
  float fRoughness__uiUNorm;         // Offset:   32 Size:     4 [unused]
  float fSpecular__uiUNorm;          // Offset:   36 Size:     4 [unused]
  float fSubSurfaceBlend__uiUNorm;   // Offset:   40 Size:     4 [unused]
  uint iSubSurfaceProfile;           // Offset:   44 Size:     4 [unused]
  float fTranslucency__uiUNorm;      // Offset:   48 Size:     4 [unused]
  bool bBaseColorEmissive;           // Offset:   52 Size:     4 [unused]
  float2 fPaintUVTile;               // Offset:   56 Size:     8 [unused]
  float fAddNormalBlend__uiUNorm;    // Offset:   64 Size:     4 [unused]
  // align: 68 to 80
  ubyte align0[12];
  float4 fAddNormalMaskA__uiSNorm;   // Offset:   80 Size:    16 [unused]
  float4 fAddNormalMaskB__uiSNorm;   // Offset:   96 Size:    16 [unused]
  float fAddNormalMaskC__uiUNorm;    // Offset:  112 Size:     4 [unused]
  float fAddNormalMaskD__uiUNorm;    // Offset:  116 Size:     4 [unused]
  bool bBackFaceShading;             // Offset:  120 Size:     4 [unused]
  // align: 124 to 128
  ubyte align1[4];
  float4 fBackFaceColor__uiColor;    // Offset:  128 Size:    16 [unused]
  bool bBackFaceNormalFilp;          // Offset:  144 Size:     4 [unused]
  float3 fKizuColor__uiColor;        // Offset:  148 Size:    12 [unused]
  bool bLegendary;                   // Offset:  160 Size:     4 [unused]
  // align: 164 to 176
  ubyte align2[12];
  float4 fLegendColor__uiColor;      // Offset:  176 Size:    16 [unused]
  float2 fLegendMetalMask__uiUNorm;  // Offset:  192 Size:     8 [unused]
  float fLegendRoughness;            // Offset:  200 Size:     4 [unused]
  // align: 204 to 208
  ubyte align3[4];
  float2 fLegendFilm__uiUNorm;       // Offset:  208 Size:     8 [unused]
  float fLegendSSSMask__uiUNorm;     // Offset:  216 Size:     4 [unused]
  float fPartsMaskA__uiUNorm;        // Offset:  220 Size:     4 [unused]
  float fPartsMaskB__uiUNorm;        // Offset:  224 Size:     4 [unused]
  float fPartsMaskC__uiUNorm;        // Offset:  228 Size:     4 [unused]
  float fPartsMaskD__uiUNorm;        // Offset:  232 Size:     4 [unused]
  float fPartsMaskX__uiUNorm;        // Offset:  236 Size:     4 [unused]
  float fPartsMaskY__uiUNorm;        // Offset:  240 Size:     4 [unused]
  float fPartsMaskZ__uiUNorm;        // Offset:  244 Size:     4 [unused]
  float fPartsMaskW__uiUNorm;        // Offset:  248 Size:     4 [unused]
  bool bUseOffset;                   // Offset:  252 Size:     4
  float3 fFlowDirDir__uiDirection;   // Offset:  256 Size:    12 [unused]
  // align: 268 to 272
  ubyte align4[4];
  float4 fFlowControl__uiUNorm;      // Offset:  272 Size:    16 [unused]
  float fFlowTile;                   // Offset:  288 Size:     4 [unused]
  // align: 292 to 304
  ubyte align5[12];
  float4 fFlowColor__uiColor;        // Offset:  304 Size:    16 [unused]
  float4 fFlowMatControl__uiUNorm;   // Offset:  320 Size:    16 [unused]
  float4 fMaskBlend__uiUNorm;        // Offset:  336 Size:    16 [unused]
  float2 fMaskBlend_A__uiUNorm;      // Offset:  352 Size:     8 [unused]
  float2 fMaskBlend_B__uiUNorm;      // Offset:  360 Size:     8 [unused]
  float fFilmThickness__uiUNorm;     // Offset:  368 Size:     4 [unused]
  float fFilmBlend__uiUNorm;         // Offset:  372 Size:     4 [unused]
  float fRefraction__uiUNorm;        // Offset:  376 Size:     4 [unused]
  float fRefractionBlend__uiUNorm;   // Offset:  380 Size:     4 [unused]
  float4 fFurParam__uiUNorm;         // Offset:  384 Size:    16 [unused]
  float fFurTile;                    // Offset:  400 Size:     4 [unused]
  bool bUseFlipUV;                   // Offset:  404 Size:     4 [unused]

};

//CBAtmosphere : 5831.shdr.src
struct CBAtmosphere {


  float3 fLightColor;                // Offset:    0 Size:    12
  // align: 12 to 16
  ubyte align0[4];
  float3 fLightDir;                  // Offset:   16 Size:    12
  float fEarthRadius;                // Offset:   28 Size:     4
  float fHeightOffset;               // Offset:   32 Size:     4
  float fAtmosphereHeight;           // Offset:   36 Size:     4
  float fAtmosphereScaleHeight;      // Offset:   40 Size:     4 [unused]
  // align: 44 to 48
  ubyte align1[4];
  float3 fAtmosphereRayleighK;       // Offset:   48 Size:    12
  // align: 60 to 64
  ubyte align2[4];
  float3 fAtmospherePhaseK;          // Offset:   64 Size:    12
  float fAerosolEffect;              // Offset:   76 Size:     4 [unused]
  float fAerosolHeight;              // Offset:   80 Size:     4
  float fAerosolScaleHeight;         // Offset:   84 Size:     4 [unused]
  float fAerosolMieK;                // Offset:   88 Size:     4
  float fAerosolPhaseK;              // Offset:   92 Size:     4
  float2 fAerosolEccentricity;       // Offset:   96 Size:     8

};

//CBSHDiffuse : 6594.shdr.src
struct CBSHDiffuse {


  float fSHDiffuseScale;             // Offset:    0 Size:     4
  float fSHDiffuseScaleInv;          // Offset:    4 Size:     4
  bool bSHDiffuseUpsampling;         // Offset:    8 Size:     4 [unused]

};

//CBWaterDebug : 411.shdr.src
struct CBWaterDebug {


  int iWaterDebugMode;               // Offset:    0 Size:     4

};

//CBMhMaterialEM118Local__disclosure : 6090.shdr.src
struct CBMhMaterialEM118Local__disclosure {


  float4 fBaseMapFactor__uiColor;    // Offset:    0 Size:    16 [unused]
  float3 fEmissiveMapFactor__uiColor;// Offset:   16 Size:    12 [unused]
  float fMetalic__uiUNorm;           // Offset:   28 Size:     4 [unused]
  float fRoughness__uiUNorm;         // Offset:   32 Size:     4 [unused]
  float fSpecular__uiUNorm;          // Offset:   36 Size:     4 [unused]
  float fSubSurfaceBlend__uiUNorm;   // Offset:   40 Size:     4 [unused]
  uint iSubSurfaceProfile;           // Offset:   44 Size:     4 [unused]
  float fTranslucency__uiUNorm;      // Offset:   48 Size:     4 [unused]
  bool bBaseColorEmissive;           // Offset:   52 Size:     4 [unused]
  float2 fPaintUVTile;               // Offset:   56 Size:     8 [unused]
  float fAddNormalBlend__uiUNorm;    // Offset:   64 Size:     4 [unused]
  // align: 68 to 80
  ubyte align0[12];
  float4 fAddNormalMaskA__uiSNorm;   // Offset:   80 Size:    16 [unused]
  float4 fAddNormalMaskB__uiSNorm;   // Offset:   96 Size:    16 [unused]
  float fAddNormalMaskC__uiUNorm;    // Offset:  112 Size:     4 [unused]
  float fAddNormalMaskD__uiUNorm;    // Offset:  116 Size:     4 [unused]
  bool bBackFaceShading;             // Offset:  120 Size:     4 [unused]
  // align: 124 to 128
  ubyte align1[4];
  float4 fBackFaceColor__uiColor;    // Offset:  128 Size:    16 [unused]
  bool bBackFaceNormalFilp;          // Offset:  144 Size:     4 [unused]
  float3 fKizuColor__uiColor;        // Offset:  148 Size:    12 [unused]
  bool bLegendary;                   // Offset:  160 Size:     4 [unused]
  // align: 164 to 176
  ubyte align2[12];
  float4 fLegendColor__uiColor;      // Offset:  176 Size:    16 [unused]
  float2 fLegendMetalMask__uiUNorm;  // Offset:  192 Size:     8 [unused]
  float fLegendRoughness;            // Offset:  200 Size:     4 [unused]
  // align: 204 to 208
  ubyte align3[4];
  float2 fLegendFilm__uiUNorm;       // Offset:  208 Size:     8 [unused]
  float fLegendSSSMask__uiUNorm;     // Offset:  216 Size:     4 [unused]
  float fPartsMaskA__uiUNorm;        // Offset:  220 Size:     4 [unused]
  float fPartsMaskB__uiUNorm;        // Offset:  224 Size:     4 [unused]
  float fPartsMaskC__uiUNorm;        // Offset:  228 Size:     4 [unused]
  float fPartsMaskD__uiUNorm;        // Offset:  232 Size:     4 [unused]
  float fPartsMaskX__uiUNorm;        // Offset:  236 Size:     4 [unused]
  float fPartsMaskY__uiUNorm;        // Offset:  240 Size:     4 [unused]
  float fPartsMaskZ__uiUNorm;        // Offset:  244 Size:     4 [unused]
  float fPartsMaskW__uiUNorm;        // Offset:  248 Size:     4 [unused]
  bool bUseOffset;                   // Offset:  252 Size:     4
  float3 fFlowDirDir__uiDirection;   // Offset:  256 Size:    12 [unused]
  // align: 268 to 272
  ubyte align4[4];
  float4 fFlowControl__uiUNorm;      // Offset:  272 Size:    16 [unused]
  float fFlowTile;                   // Offset:  288 Size:     4 [unused]
  // align: 292 to 304
  ubyte align5[12];
  float4 fFlowColor__uiColor;        // Offset:  304 Size:    16 [unused]
  float4 fFlowMatControl__uiUNorm;   // Offset:  320 Size:    16 [unused]
  float4 fMaskBlend__uiUNorm;        // Offset:  336 Size:    16 [unused]
  float2 fMaskBlend_A__uiUNorm;      // Offset:  352 Size:     8 [unused]
  float2 fMaskBlend_B__uiUNorm;      // Offset:  360 Size:     8 [unused]
  float fFilmThickness__uiUNorm;     // Offset:  368 Size:     4 [unused]
  float fFilmBlend__uiUNorm;         // Offset:  372 Size:     4 [unused]
  float fRefraction__uiUNorm;        // Offset:  376 Size:     4 [unused]
  float fRefractionBlend__uiUNorm;   // Offset:  380 Size:     4 [unused]
  float fVAnimV__uiUNorm;            // Offset:  384 Size:     4
  // align: 388 to 400
  ubyte align6[12];
  float4 fDisplaceControl;           // Offset:  400 Size:    16
  float fAnimEmitMin;                // Offset:  416 Size:     4 [unused]
  float fAnimEmitSpeed;              // Offset:  420 Size:     4 [unused]
  float fEmitControl__uiUNorm;       // Offset:  424 Size:     4 [unused]
  float fAlphaTestControl__uiUNorm;  // Offset:  428 Size:     4 [unused]

};

//CBMhMaterialVfxSandFallLocal__disclosure : 3862.shdr.src
struct CBMhMaterialVfxSandFallLocal__disclosure {


  float4 fBaseMapFactor__uiColor;    // Offset:    0 Size:    16 [unused]
  float3 fCubeMapFactor__uiColor;    // Offset:   16 Size:    12 [unused]
  // align: 28 to 32
  ubyte align0[4];
  float4 fUVTransformA;              // Offset:   32 Size:    16
  float4 fUVTransformB;              // Offset:   48 Size:    16 [unused]
  float fAlbedoBlend;                // Offset:   64 Size:     4 [unused]
  float fOpacityFactor;              // Offset:   68 Size:     4 [unused]
  float fNormalFactor__uiUNorm;      // Offset:   72 Size:     4 [unused]
  float fDetailfNormalFactor__uiUNorm;// Offset:   76 Size:     4 [unused]
  float fDetailNormalBlend__uiUNorm; // Offset:   80 Size:     4 [unused]
  float fRTNormalBlend__uiUNorm;     // Offset:   84 Size:     4 [unused]
  float fMetalic__uiUNorm;           // Offset:   88 Size:     4 [unused]
  float fRoughness__uiUNorm;         // Offset:   92 Size:     4 [unused]
  float fSpecular__uiUNorm;          // Offset:   96 Size:     4 [unused]
  float fTranslucency__uiUNorm;      // Offset:  100 Size:     4 [unused]
  float fRaflectionAngle__uiSNorm;   // Offset:  104 Size:     4 [unused]
  float fFlowSpeed;                  // Offset:  108 Size:     4 [unused]
  float fFlowStrength;               // Offset:  112 Size:     4 [unused]
  float fUVOffsetSpeed;              // Offset:  116 Size:     4
  float2 fUVOffsetSpeedFactorA;      // Offset:  120 Size:     8
  float2 fUVOffsetSpeedFactorB;      // Offset:  128 Size:     8 [unused]
  float fInnerOffsetScale;           // Offset:  136 Size:     4
  float fDispFactor;                 // Offset:  140 Size:     4
  float3 fAdditinalAxis;             // Offset:  144 Size:    12
  bool bSceneEnvMap;                 // Offset:  156 Size:     4 [unused]
  bool bDisplacement;                // Offset:  160 Size:     4
  bool bRTBlend;                     // Offset:  164 Size:     4 [unused]

};

//CBMhMaterialEMSLocal__disclosure : 1077.shdr.src
struct CBMhMaterialEMSLocal__disclosure {


  float4 fBaseMapFactor__uiColor;    // Offset:    0 Size:    16
  float3 fEmissiveMapFactor__uiColor;// Offset:   16 Size:    12 [unused]
  float fMetalic__uiUNorm;           // Offset:   28 Size:     4 [unused]
  float fRoughness__uiUNorm;         // Offset:   32 Size:     4 [unused]
  float fSpecular__uiUNorm;          // Offset:   36 Size:     4 [unused]
  float fSubSurfaceBlend__uiUNorm;   // Offset:   40 Size:     4 [unused]
  uint iSubSurfaceProfile;           // Offset:   44 Size:     4 [unused]
  float fTranslucency__uiUNorm;      // Offset:   48 Size:     4 [unused]
  // align: 52 to 64
  ubyte align0[12];
  float4 fUVTransformA;              // Offset:   64 Size:    16
  float4 fBaseMapMod__uiUNorm;       // Offset:   80 Size:    16 [unused]
  float4 fBaseMapModLimitMax__uiUNorm;// Offset:   96 Size:    16 [unused]
  float4 fBaseMapModLimitMin__uiUNorm;// Offset:  112 Size:    16 [unused]
  float4 fFurParam__uiUNorm;         // Offset:  128 Size:    16 [unused]
  float fFurTile;                    // Offset:  144 Size:     4 [unused]
  float3 fPattern_color__uiColor;    // Offset:  148 Size:    12 [unused]
  float fFilmThickness__uiUNorm;     // Offset:  160 Size:     4 [unused]
  float fFilmBlend__uiUNorm;         // Offset:  164 Size:     4 [unused]
  bool bBaseColorEmissive;           // Offset:  168 Size:     4 [unused]
  float fMummyTile;                  // Offset:  172 Size:     4 [unused]
  float2 fMummyBlend__uiUNorm;       // Offset:  176 Size:     8 [unused]
  // align: 184 to 192
  ubyte align1[8];
  float4 fMummyColor__uiColor;       // Offset:  192 Size:    16 [unused]
  float4 fMummyMatControl__uiUNorm;  // Offset:  208 Size:    16 [unused]

};

//CBMhMaterialFakeEyeLocal__disclosure : 2201.shdr.src
struct CBMhMaterialFakeEyeLocal__disclosure {


  float4 fBaseMapFactor__uiColor;    // Offset:    0 Size:    16
  float3 fEmissiveMapFactor__uiColor;// Offset:   16 Size:    12 [unused]
  float fMetalic__uiUNorm;           // Offset:   28 Size:     4 [unused]
  float fRoughness__uiUNorm;         // Offset:   32 Size:     4 [unused]
  float fSpecular__uiUNorm;          // Offset:   36 Size:     4 [unused]
  float fSubSurfaceBlend__uiUNorm;   // Offset:   40 Size:     4 [unused]
  uint iSubSurfaceProfile;           // Offset:   44 Size:     4 [unused]
  float fDetailNormalBlend__uiUNorm; // Offset:   48 Size:     4 [unused]
  // align: 52 to 64
  ubyte align0[12];
  float4 fUVTransformA;              // Offset:   64 Size:    16
  float4 fUVTransformB;              // Offset:   80 Size:    16 [unused]
  float fTranslucency__uiUNorm;      // Offset:   96 Size:     4 [unused]
  float fParallaxFactor__uiUNorm;    // Offset:  100 Size:     4
  float fUV_Blend__uiUNorm;          // Offset:  104 Size:     4
  bool bBaseColorEmissive;           // Offset:  108 Size:     4 [unused]

};

//CB_TemporalAA2 : 878.shdr.src
struct CB_TemporalAA2 {


  float fBlendRate;                  // Offset:    0 Size:     4
  bool bVelocityBase;                // Offset:    4 Size:     4 [unused]
  float fSharpenAmount;              // Offset:    8 Size:     4 [unused]

};

//CBWater : 4396.shdr.src
struct CBWater {


  row_major float4x4 cWorldMat;      // Offset:    0 Size:    64
  bool cLodEnabled;                  // Offset:   64 Size:     4 [unused]
  float3 cAxisX;                     // Offset:   68 Size:    12 [unused]
  float3 cAxisZ;                     // Offset:   80 Size:    12 [unused]
  float cWorldScaleY;                // Offset:   92 Size:     4 [unused]
  float cVsSubdivInv;                // Offset:   96 Size:     4
  float cTsSubdivInv;                // Offset:  100 Size:     4 [unused]
  float cAttenuation;                // Offset:  104 Size:     4 [unused]
  uint cTest;                        // Offset:  108 Size:     4 [unused]
  uint cNumWaveFunctionParam;        // Offset:  112 Size:     4 [unused]

};

//CBPrimitivePick : 999.shdr.src
struct CBPrimitivePick {


  uint2 iPrimAddress;                // Offset:    0 Size:     8

};

//CBColorCorrect : 2061.shdr.src
struct CBColorCorrect {


  row_major float4x4 fMatrix;        // Offset:    0 Size:    64
  float fBlendRate;                  // Offset:   64 Size:     4
  float fVignettingOffset;           // Offset:   68 Size:     4
  float fVignettingPow;              // Offset:   72 Size:     4
  bool bToneCurve;                   // Offset:   76 Size:     4
  bool bVignetting;                  // Offset:   80 Size:     4
  bool bVignettingEllipse;           // Offset:   84 Size:     4
  float fScreenAlpha;                // Offset:   88 Size:     4

};

//CBMotionBlurReconstruction : 870.shdr.src
struct CBMotionBlurReconstruction {


  int2 iTileSize;                    // Offset:    0 Size:     8 [unused]
  uint uNumSamples;                  // Offset:    8 Size:     4
  float fInvNumSamples;              // Offset:   12 Size:     4
  float fShutterSpeed;               // Offset:   16 Size:     4
  float fFurShutterSpeed;            // Offset:   20 Size:     4
  float fBlurThreshold;              // Offset:   24 Size:     4
  float fHalfPixelSize;              // Offset:   28 Size:     4
  float2 fMaxTexCoord;               // Offset:   32 Size:     8
  int iDebugViewType;                // Offset:   40 Size:     4 [unused]
  bool bIsPrevious;                  // Offset:   44 Size:     4 [unused]
  bool bIsLegacy;                    // Offset:   48 Size:     4 [unused]

};

//CBTest : 6586.shdr.src
struct CBTest {


  float4 fTestParam;                 // Offset:    0 Size:    16
  float3 fTestDirection;             // Offset:   16 Size:    12 [unused]
  float fTestType;                   // Offset:   28 Size:     4 [unused]
  float4 fTestColor;                 // Offset:   32 Size:    16 [unused]
  float4 fDummyColor;                // Offset:   48 Size:    16 [unused]

};

//pix_clear_constants : 6579.shdr.src
struct pix_clear_constants {


  float4 m_color;                    // Offset:    0 Size:    16

};

//CBFXAAParam : 6431.shdr.src
struct CBFXAAParam {


  float fFXAAQualitySubpix;          // Offset:    0 Size:     4
  float fFXAAQualityEdgeThreshold;   // Offset:    4 Size:     4
  float fFXAAQualityEdgeThresholdMin;// Offset:    8 Size:     4
  // align: 12 to 16
  ubyte align0[4];
  float2 fFXAATexOnePitch;           // Offset:   16 Size:     8

};

//CBGUINoiseAndFade : 2899.shdr.src
struct CBGUINoiseAndFade {


  float4 fGUINoiseOffset;            // Offset:    0 Size:    16
  float4 fGUINoiseAndFadeParam;      // Offset:   16 Size:    16
  float4 fGUIFadeColor;              // Offset:   32 Size:    16

};

//CBMhSky2VS : 1636.shdr.src
struct CBMhSky2VS {


  row_major float3x4 fSkyWorld;      // Offset:    0 Size:    48

};

//CBSpeedTreeLocalWind : 5167.shdr.src
struct CBSpeedTreeLocalWind {


  struct CBSpeedTreeLocalWind_SpeedTreeLocalWind
  {

      float3 pos;                    // Offset:    0
      float radius;                  // Offset:   12
      float3 dir;                    // Offset:   16
      float strength;                // Offset:   28
      float oscillateStrength;       // Offset:   32
      float oscillateSpeed;          // Offset:   36
      uint moveType;                 // Offset:   40
      float padding;                 // Offset:   44

  } gSpeedTreeLocalWindBuffer[128];  // Offset:    0 Size:  6144

};

//CB_CombinedFilter : 6309.shdr.src
struct CB_CombinedFilter {


  bool bEnableFXAA;                  // Offset:    0 Size:     4
  bool bEnableTemporalAA;            // Offset:    4 Size:     4 [unused]
  bool bEnableColorCorrect;          // Offset:    8 Size:     4
  bool bEnableImagePlane;            // Offset:   12 Size:     4

};

//CBNewDOFFilter2 : 6324.shdr.src
struct CBNewDOFFilter2 {


  float coc_bias;                    // Offset:    0 Size:     4
  float coc_scale;                   // Offset:    4 Size:     4
  float pcoc;                        // Offset:    8 Size:     4 [unused]
  float quad_reduction_threshold;    // Offset:   12 Size:     4 [unused]
  float quater_resolution_threshold; // Offset:   16 Size:     4 [unused]
  float near_blur_scaler;            // Offset:   20 Size:     4 [unused]
  float depth_adjuist_factor;        // Offset:   24 Size:     4 [unused]
  float bokeh_intensity_threshold;   // Offset:   28 Size:     4 [unused]
  float bokeh_shape_factor;          // Offset:   32 Size:     4 [unused]
  float dof_single_pixel_radius;     // Offset:   36 Size:     4 [unused]
  float depth_scale_foreground;      // Offset:   40 Size:     4 [unused]
  float dof_aspect;                  // Offset:   44 Size:     4 [unused]
  bool far_ignore;                   // Offset:   48 Size:     4
  bool near_ignore;                  // Offset:   52 Size:     4
  float far_coef;                    // Offset:   56 Size:     4
  float near_coef;                   // Offset:   60 Size:     4
  float out_alpha;                   // Offset:   64 Size:     4 [unused]
  float fVignettingOffset;           // Offset:   68 Size:     4 [unused]
  float fVignettingPow;              // Offset:   72 Size:     4 [unused]
  bool bVignetting;                  // Offset:   76 Size:     4 [unused]
  float fVignettingEllipticity;      // Offset:   80 Size:     4 [unused]
  float3 fVignettingColor;           // Offset:   84 Size:    12 [unused]

};

//CBSpeedTreeSystem : 5167.shdr.src
struct CBSpeedTreeSystem {


  float4 fSpeedTreeSystemParam;      // Offset:    0 Size:    16
  uint3 iSpeedTreeSystemParam;       // Offset:   16 Size:    12 [unused]

};

//CBMhMaterialFakeSphereLocal__disclosure : 6408.shdr.src
struct CBMhMaterialFakeSphereLocal__disclosure {


  float4 fBaseMapFactor__uiColor;    // Offset:    0 Size:    16
  float3 fEmissiveMapFactor__uiColor;// Offset:   16 Size:    12 [unused]
  float fMetalic__uiUNorm;           // Offset:   28 Size:     4 [unused]
  float fRoughness__uiUNorm;         // Offset:   32 Size:     4 [unused]
  float fSpecular__uiUNorm;          // Offset:   36 Size:     4 [unused]
  float fSubSurfaceBlend__uiUNorm;   // Offset:   40 Size:     4 [unused]
  uint iSubSurfaceProfile;           // Offset:   44 Size:     4 [unused]
  float fDetailNormalBlend__uiUNorm; // Offset:   48 Size:     4 [unused]
  // align: 52 to 64
  ubyte align0[12];
  float4 fUVTransformA;              // Offset:   64 Size:    16
  float4 fUVTransformB;              // Offset:   80 Size:    16 [unused]
  float fTranslucency__uiUNorm;      // Offset:   96 Size:     4 [unused]
  bool bForwardFog;                  // Offset:  100 Size:     4 [unused]

};

//CBMhMaterialEM044Local__disclosure : 3980.shdr.src
struct CBMhMaterialEM044Local__disclosure {


  float4 fBaseMapFactor__uiColor;    // Offset:    0 Size:    16 [unused]
  float3 fEmissiveMapFactor__uiColor;// Offset:   16 Size:    12 [unused]
  float fMetalic__uiUNorm;           // Offset:   28 Size:     4 [unused]
  float fRoughness__uiUNorm;         // Offset:   32 Size:     4 [unused]
  float fSpecular__uiUNorm;          // Offset:   36 Size:     4 [unused]
  float fSubSurfaceBlend__uiUNorm;   // Offset:   40 Size:     4 [unused]
  uint iSubSurfaceProfile;           // Offset:   44 Size:     4 [unused]
  float fTranslucency__uiUNorm;      // Offset:   48 Size:     4 [unused]
  bool bBaseColorEmissive;           // Offset:   52 Size:     4 [unused]
  float2 fPaintUVTile;               // Offset:   56 Size:     8 [unused]
  float fAddNormalBlend__uiUNorm;    // Offset:   64 Size:     4 [unused]
  // align: 68 to 80
  ubyte align0[12];
  float4 fAddNormalMaskA__uiSNorm;   // Offset:   80 Size:    16 [unused]
  float4 fAddNormalMaskB__uiSNorm;   // Offset:   96 Size:    16 [unused]
  float fAddNormalMaskC__uiUNorm;    // Offset:  112 Size:     4 [unused]
  float fAddNormalMaskD__uiUNorm;    // Offset:  116 Size:     4 [unused]
  bool bBackFaceShading;             // Offset:  120 Size:     4 [unused]
  // align: 124 to 128
  ubyte align1[4];
  float4 fBackFaceColor__uiColor;    // Offset:  128 Size:    16 [unused]
  bool bBackFaceNormalFilp;          // Offset:  144 Size:     4 [unused]
  float3 fKizuColor__uiColor;        // Offset:  148 Size:    12 [unused]
  bool bLegendary;                   // Offset:  160 Size:     4 [unused]
  // align: 164 to 176
  ubyte align2[12];
  float4 fLegendColor__uiColor;      // Offset:  176 Size:    16 [unused]
  float2 fLegendMetalMask__uiUNorm;  // Offset:  192 Size:     8 [unused]
  float fLegendRoughness;            // Offset:  200 Size:     4 [unused]
  // align: 204 to 208
  ubyte align3[4];
  float2 fLegendFilm__uiUNorm;       // Offset:  208 Size:     8 [unused]
  float fLegendSSSMask__uiUNorm;     // Offset:  216 Size:     4 [unused]
  float fPartsMaskA__uiUNorm;        // Offset:  220 Size:     4 [unused]
  float fPartsMaskB__uiUNorm;        // Offset:  224 Size:     4 [unused]
  float fPartsMaskC__uiUNorm;        // Offset:  228 Size:     4 [unused]
  float fPartsMaskD__uiUNorm;        // Offset:  232 Size:     4 [unused]
  float fPartsMaskX__uiUNorm;        // Offset:  236 Size:     4 [unused]
  float fPartsMaskY__uiUNorm;        // Offset:  240 Size:     4 [unused]
  float fPartsMaskZ__uiUNorm;        // Offset:  244 Size:     4 [unused]
  float fPartsMaskW__uiUNorm;        // Offset:  248 Size:     4 [unused]
  bool bUseOffset;                   // Offset:  252 Size:     4
  float3 fFlowDirDir__uiDirection;   // Offset:  256 Size:    12 [unused]
  // align: 268 to 272
  ubyte align4[4];
  float4 fFlowControl__uiUNorm;      // Offset:  272 Size:    16 [unused]
  float fFlowTile;                   // Offset:  288 Size:     4 [unused]
  // align: 292 to 304
  ubyte align5[12];
  float4 fFlowColor__uiColor;        // Offset:  304 Size:    16 [unused]
  float4 fFlowMatControl__uiUNorm;   // Offset:  320 Size:    16 [unused]
  float fFilmThickness__uiUNorm;     // Offset:  336 Size:     4 [unused]
  float fFilmBlend__uiUNorm;         // Offset:  340 Size:     4 [unused]
  float fRefraction__uiUNorm;        // Offset:  344 Size:     4 [unused]
  float fRefractionBlend__uiUNorm;   // Offset:  348 Size:     4 [unused]

};

//CBMhSky2Sun : 3581.shdr.src
struct CBMhSky2Sun {


  row_major float4x4 fRotMatrix;     // Offset:    0 Size:    64
  float2 fSize;                      // Offset:   64 Size:     8
  float fIntensity;                  // Offset:   72 Size:     4 [unused]
  // align: 76 to 80
  ubyte align0[4];
  float4 fSkySunMapFactor;           // Offset:   80 Size:    16 [unused]
  float fBloomThreshold;             // Offset:   96 Size:     4 [unused]
  bool bSkySunIsRenderingWater;      // Offset:  100 Size:     4 [unused]
  // align: 104 to 112
  ubyte align1[8];
  float3 fSkySunWaterReflectionFactor;// Offset:  112 Size:    12 [unused]
  float fBloomTransparencyCoefficient;// Offset:  124 Size:     4 [unused]
  uint2 iRenderTargetSize;           // Offset:  128 Size:     8 [unused]

};

//CBSpeedTreeCollision__disclosure : 5167.shdr.src
struct CBSpeedTreeCollision__disclosure {


  float fLocalHeightAdjust;          // Offset:    0 Size:     4
  float fLocalWindOverallFactor;     // Offset:    4 Size:     4
  float fLocalWindBranchlFactor;     // Offset:    8 Size:     4
  float fLocalWindLeafFactor;        // Offset:   12 Size:     4
  float fFacingLeavesShadowFactor__uiUNorm;// Offset:   16 Size:     4
  float fWindOneSidedBias;           // Offset:   20 Size:     4
  bool bWindOneSidedUvFlip;          // Offset:   24 Size:     4
  bool bSpeedTreeLodSmooth;          // Offset:   28 Size:     4

};

//CBMhSkyLpPS : 3292.shdr.src
struct CBMhSkyLpPS {


  float3 fSkyGlobalIntensity;        // Offset:    0 Size:    12 [unused]
  // align: 12 to 16
  ubyte align0[4];
  float4 fSkySunMapFactor;           // Offset:   16 Size:    16 [unused]
  float4 fSkyStarrySkyMapFactor;     // Offset:   32 Size:    16 [unused]
  float2 fSkySunUVOffset;            // Offset:   48 Size:     8 [unused]
  float2 fSkyGlobalCloudSpeed;       // Offset:   56 Size:     8 [unused]
  float3 fSkyWaterReflectionFactor;  // Offset:   64 Size:    12 [unused]
  float fSkyBlend;                   // Offset:   76 Size:     4 [unused]
  bool bSkyIsRenderingWater;         // Offset:   80 Size:     4 [unused]
  bool bSkyFog;                      // Offset:   84 Size:     4 [unused]
  // align: 88 to 96
  ubyte align1[8];
  float4 fSkyBaseMapFactor;          // Offset:   96 Size:    16 [unused]
  float4 fSkyCloudMapFactor0;        // Offset:  112 Size:    16 [unused]
  float4 fSkyCloudMapFactor1;        // Offset:  128 Size:    16 [unused]
  float4 fSkyCloudMapFactor2;        // Offset:  144 Size:    16 [unused]
  float4 fSkyCloudMapFactor3;        // Offset:  160 Size:    16 [unused]
  float2 fSkyCloudSpeed0;            // Offset:  176 Size:     8 [unused]
  float2 fSkyCloudSpeed1;            // Offset:  184 Size:     8 [unused]
  float2 fSkyCloudSpeed2;            // Offset:  192 Size:     8 [unused]
  float2 fSkyCloudSpeed3;            // Offset:  200 Size:     8 [unused]
  float4 fSkyBlendBaseMapFactor;     // Offset:  208 Size:    16 [unused]
  float4 fSkyBlendCloudMapFactor0;   // Offset:  224 Size:    16 [unused]
  float4 fSkyBlendCloudMapFactor1;   // Offset:  240 Size:    16 [unused]
  float4 fSkyBlendCloudMapFactor2;   // Offset:  256 Size:    16 [unused]
  float4 fSkyBlendCloudMapFactor3;   // Offset:  272 Size:    16 [unused]
  float2 fSkyBlendCloudSpeed0;       // Offset:  288 Size:     8 [unused]
  float2 fSkyBlendCloudSpeed1;       // Offset:  296 Size:     8 [unused]
  float2 fSkyBlendCloudSpeed2;       // Offset:  304 Size:     8 [unused]
  float2 fSkyBlendCloudSpeed3;       // Offset:  312 Size:     8 [unused]
  uint2 iSkyAddress;                 // Offset:  320 Size:     8

};

//CBDepthColor : 5198.shdr.src
struct CBDepthColor {


  uint fDepthColorBlendMode;         // Offset:    0 Size:     4
  float fDepthColorBlendRate;        // Offset:    4 Size:     4
  // align: 8 to 16
  ubyte align0[8];
  float3 fDepthColorColor;           // Offset:   16 Size:    12
  float fDepthColorDistanceStart;    // Offset:   28 Size:     4
  float fDepthColorDistanceEnd;      // Offset:   32 Size:     4
  // align: 36 to 48
  ubyte align1[12];
  float fDepthColorBlendCurve[256];  // Offset:   48 Size:  4084

};

//CBLightShaft_LightParam : 1892.shdr.src
struct CBLightShaft_LightParam {


  float3 fLightShaftPosition;        // Offset:    0 Size:    12
  float fLightShaftBoundingRadius;   // Offset:   12 Size:     4
  float3 fLightShaftDirection;       // Offset:   16 Size:    12
  float fLightShaftFalloff;          // Offset:   28 Size:     4
  float4 fLightShaftAttenuation;     // Offset:   32 Size:    16
  float3 fLightShaftColor;           // Offset:   48 Size:    12
  uint fLightShaftMisc;              // Offset:   60 Size:     4
  float fLightShaftMinRoughness;     // Offset:   64 Size:     4 [unused]
  uint3 fLightShaftPadding;          // Offset:   68 Size:    12 [unused]
  row_major float4x4 fLightShaftShadowMat;// Offset:   80 Size:    64
  float4 fLightShaftShadowExtra;     // Offset:  144 Size:    16
  uint fLightShaftShadowMapSize;     // Offset:  160 Size:     4
  uint3 fLightShaftShadowMapRegion;  // Offset:  164 Size:    12

};

//CBMhMaterialEM109Local__disclosure : 2333.shdr.src
struct CBMhMaterialEM109Local__disclosure {


  float4 fBaseMapFactor__uiColor;    // Offset:    0 Size:    16 [unused]
  float3 fEmissiveMapFactor__uiColor;// Offset:   16 Size:    12 [unused]
  float fMetalic__uiUNorm;           // Offset:   28 Size:     4 [unused]
  float fRoughness__uiUNorm;         // Offset:   32 Size:     4 [unused]
  float fSpecular__uiUNorm;          // Offset:   36 Size:     4 [unused]
  float fSubSurfaceBlend__uiUNorm;   // Offset:   40 Size:     4 [unused]
  uint iSubSurfaceProfile;           // Offset:   44 Size:     4 [unused]
  float fTranslucency__uiUNorm;      // Offset:   48 Size:     4 [unused]
  bool bBaseColorEmissive;           // Offset:   52 Size:     4 [unused]
  float2 fPaintUVTile;               // Offset:   56 Size:     8 [unused]
  float fAddNormalBlend__uiUNorm;    // Offset:   64 Size:     4 [unused]
  // align: 68 to 80
  ubyte align0[12];
  float4 fAddNormalMaskA__uiSNorm;   // Offset:   80 Size:    16 [unused]
  float4 fAddNormalMaskB__uiSNorm;   // Offset:   96 Size:    16 [unused]
  float fAddNormalMaskC__uiUNorm;    // Offset:  112 Size:     4 [unused]
  float fAddNormalMaskD__uiUNorm;    // Offset:  116 Size:     4 [unused]
  bool bBackFaceShading;             // Offset:  120 Size:     4 [unused]
  // align: 124 to 128
  ubyte align1[4];
  float4 fBackFaceColor__uiColor;    // Offset:  128 Size:    16 [unused]
  bool bBackFaceNormalFilp;          // Offset:  144 Size:     4 [unused]
  float3 fKizuColor__uiColor;        // Offset:  148 Size:    12 [unused]
  bool bLegendary;                   // Offset:  160 Size:     4 [unused]
  // align: 164 to 176
  ubyte align2[12];
  float4 fLegendColor__uiColor;      // Offset:  176 Size:    16 [unused]
  float2 fLegendMetalMask__uiUNorm;  // Offset:  192 Size:     8 [unused]
  float fLegendRoughness;            // Offset:  200 Size:     4 [unused]
  // align: 204 to 208
  ubyte align3[4];
  float2 fLegendFilm__uiUNorm;       // Offset:  208 Size:     8 [unused]
  float fLegendSSSMask__uiUNorm;     // Offset:  216 Size:     4 [unused]
  float fPartsMaskA__uiUNorm;        // Offset:  220 Size:     4 [unused]
  float fPartsMaskB__uiUNorm;        // Offset:  224 Size:     4 [unused]
  float fPartsMaskC__uiUNorm;        // Offset:  228 Size:     4 [unused]
  float fPartsMaskD__uiUNorm;        // Offset:  232 Size:     4 [unused]
  float fPartsMaskX__uiUNorm;        // Offset:  236 Size:     4 [unused]
  float fPartsMaskY__uiUNorm;        // Offset:  240 Size:     4 [unused]
  float fPartsMaskZ__uiUNorm;        // Offset:  244 Size:     4 [unused]
  float fPartsMaskW__uiUNorm;        // Offset:  248 Size:     4 [unused]
  bool bUseOffset;                   // Offset:  252 Size:     4
  float3 fFlowDirDir__uiDirection;   // Offset:  256 Size:    12 [unused]
  // align: 268 to 272
  ubyte align4[4];
  float4 fFlowControl__uiUNorm;      // Offset:  272 Size:    16 [unused]
  float fFlowTile;                   // Offset:  288 Size:     4 [unused]
  // align: 292 to 304
  ubyte align5[12];
  float4 fFlowColor__uiColor;        // Offset:  304 Size:    16 [unused]
  float4 fFlowMatControl__uiUNorm;   // Offset:  320 Size:    16 [unused]
  float4 fDisplaceControl;           // Offset:  336 Size:    16
  float4 fFurParam__uiUNorm;         // Offset:  352 Size:    16 [unused]
  float fFurTile;                    // Offset:  368 Size:     4 [unused]
  float fDispSpeed;                  // Offset:  372 Size:     4
  float fFilmThickness__uiUNorm;     // Offset:  376 Size:     4 [unused]
  float fFilmBlend__uiUNorm;         // Offset:  380 Size:     4 [unused]
  float fRefraction__uiUNorm;        // Offset:  384 Size:     4 [unused]
  float fRefractionBlend__uiUNorm;   // Offset:  388 Size:     4 [unused]
  bool bUseBlendDisplace;            // Offset:  392 Size:     4
  float fVAnimV__uiUNorm;            // Offset:  396 Size:     4
  float fVAnimPosScale;              // Offset:  400 Size:     4
  bool bInvertX;                     // Offset:  404 Size:     4

};

//CBGodRaysIterator : 4422.shdr.src
struct CBGodRaysIterator {


  float4 fGodRayParams[8];           // Offset:    0 Size:   128

};

//CBMhMaterialVfxDistDispWLocal__disclosure : 957.shdr.src
struct CBMhMaterialVfxDistDispWLocal__disclosure {


  float4 fBaseMapFactor__uiColor;    // Offset:    0 Size:    16 [unused]
  float3 fCubeMapFactor__uiColor;    // Offset:   16 Size:    12 [unused]
  // align: 28 to 32
  ubyte align0[4];
  float3 fDistortionFactor__uiColor; // Offset:   32 Size:    12 [unused]
  float fMetalic__uiUNorm;           // Offset:   44 Size:     4 [unused]
  float fSpecular__uiUNorm;          // Offset:   48 Size:     4 [unused]
  float fRoughness__uiUNorm;         // Offset:   52 Size:     4 [unused]
  // align: 56 to 64
  ubyte align1[8];
  float4 fUVTransformA;              // Offset:   64 Size:    16 [unused]
  float4 fUVTransformB;              // Offset:   80 Size:    16
  float fDisplacementFactor;         // Offset:   96 Size:     4
  float fFlow_Speed;                 // Offset:  100 Size:     4 [unused]
  float fFlow_Strength;              // Offset:  104 Size:     4 [unused]
  float fNormalFactor__uiUNorm;      // Offset:  108 Size:     4 [unused]
  float fOpacityFactor;              // Offset:  112 Size:     4 [unused]
  float fVolumeBlend__uiSNorm;       // Offset:  116 Size:     4 [unused]
  float fDistortionAngle;            // Offset:  120 Size:     4 [unused]
  float fDistortion;                 // Offset:  124 Size:     4 [unused]
  float fSpecularFactor;             // Offset:  128 Size:     4 [unused]
  float fDiffuseChroma__uiUNorm;     // Offset:  132 Size:     4 [unused]
  float fSpecularChroma__uiUNorm;    // Offset:  136 Size:     4 [unused]
  bool bRefractionEnable;            // Offset:  140 Size:     4 [unused]
  bool bVolumeBlendEnable;           // Offset:  144 Size:     4 [unused]
  float3 fEmissiveBlendColor__uiColor;// Offset:  148 Size:    12 [unused]
  float fEmissiveBlendColorBlend__uiUNorm;// Offset:  160 Size:     4 [unused]
  float3 fEmissiveBlendRimParam;     // Offset:  164 Size:    12 [unused]
  float fInnerOffsetScale;           // Offset:  176 Size:     4
  float fDisplacementFactorW;        // Offset:  180 Size:     4
  // align: 184 to 192
  ubyte align2[8];
  float3 fMudDir__uiDirection;       // Offset:  192 Size:    12
  bool bWorldPosOffsetScale;         // Offset:  204 Size:     4
  float fVelocityAttn;               // Offset:  208 Size:     4 [unused]
  float fNormalDecalBlend__uiUNorm;  // Offset:  212 Size:     4 [unused]

};

//CBBloomSample : 1608.shdr.src
struct CBBloomSample {


  float4 fBloomFilterRegion;         // Offset:    0 Size:    16

};

//CBPrimitiveMetaDataOcclusion : 4078.shdr.src
struct CBPrimitiveMetaDataOcclusion {


  float4 fPrimOcclusionSphere;       // Offset:    0 Size:    16

};

