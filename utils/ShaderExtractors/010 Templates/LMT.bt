//------------------------------------------------
//--- 010 Editor v8.0.1 Binary Template
//
//      File: 
//   Authors: CrazyT
//   Version: 
//   Purpose: 
//  Category: 
// File Mask: *.lmt
//  ID Bytes: 
//   History: 
//------------------------------------------------
struct LMTKeyframeDef{
	ubyte bufferType;
	ubyte usage;
	ubyte jointType;
	ubyte boneId;
	long bufferSize;
	float weight;
	long unkn2;
	uint64 bufferOffset<format = hex>;
	float referenceFrame[4];
	uint64 boundsOffset<format = hex>;
};
struct LMTVec3{
	float x;
	float y;
	float z;
};
struct LMTQuadraticVector3{
	byte addcount;
	byte flags;
	short s;
	float vx;
	float vy;
	float vz;
	local int i=0;
	float f[8];
};
struct LMTVec3Frame{
	float x;
	float y;
	float z;
};
struct LMTQuatized8Vec3{
	byte f[3];
	byte reframe;
};
struct LMTQuatized16Vec3{
	short f[3];
	short relframe;
};
struct LMTQuat3Frame{
	float f[3];
	long l;
};
struct LMTQuatFramev14{
	long l1;
	long l2;
};
struct LMTQuatized32Quat{
	long l;
};
struct LMTXWQuat{
	long l;
};
struct LMTYWQuat{
	long l;
};
struct LMTZWQuat{
	long l;
};
struct LMTQuatized11Quat{
	short s[3];
};
struct LMTQuatized9Quat{
	byte b[5];
};
string readKBR(LMTKeyframeDef &x){
    string s;
    SPrintf( s, "BoundsOffset:%08x%08x BufferOffset:%08x%08x BufferType:%x",x.boundsOffset>>32,x.boundsOffset,x.bufferOffset>>32,x.bufferOffset,x.bufferType);
    return s;
}

struct Head{
	uint id<format=hex>;
	short version;
	short numBlocks;
	if(version > 90){
		uint64 unkn1;
	}
	
	uint64 offsets[numBlocks]<format=hex>;
} head<bgcolor=0x00FF00>;

local int i;
local int isub;
struct{
for(i=0;i<head.numBlocks;i++){
	if(head.offsets[i]==0)continue;
	isub = i;
	FSeek(head.offsets[i]);
	struct LMTAniBlockHeader{
		uint64 offset;
		long boneCount;
		long frameCount;
		long loopFrame;
		uint unkn1[19];
	} lhead<bgcolor=0xFF0000>;
}
}lheads;
local int maxj = 0;
struct{
local int b;
local int correct = 0;
for(i=0;i<head.numBlocks;i++){
	if(head.offsets[i]==0){
		correct++;
		continue;
	}
	FSeek(lheads.lhead[i-correct].offset);
	for(b=0;b<lheads.lhead[i-correct].boneCount;b++){
		LMTKeyframeDef kbr<bgcolor=0x0000FF,read=readKBR>;
		maxj++;
	}
}
} kbrs;

local int j;
for(j=0;j<maxj;j++){
	if(kbrs.kbr[j].boundsOffset==0)continue;
	FSeek(kbrs.kbr[j].boundsOffset);
	struct LMTKeyframeBounds{
		float addin[4];
		float offset[4];
	}bounds<bgcolor=0x00FFFF>;
}
local int cursize;
for(j=0;j<maxj;j++){
	if(kbrs.kbr[j].bufferOffset==0)continue;
	if(kbrs.kbr[j].bufferSize==0)continue;
	FSeek(kbrs.kbr[j].bufferOffset);
	cursize = 0;
	struct{
	local int bufferSize = kbrs.kbr[j].bufferSize;
	while(cursize < bufferSize){
		if(kbrs.kbr[j].bufferType == 1){
			LMTVec3 vec;
			cursize += sizeof(vec);
		}
		else if(kbrs.kbr[j].bufferType == 2){
			LMTVec3Frame vec;
			cursize += sizeof(vec);
		}
		else if(kbrs.kbr[j].bufferType == 3){
			LMTVec3Frame vec;
			cursize += sizeof(vec);
		}
		else if(kbrs.kbr[j].bufferType == 4){
			LMTQuatized16Vec3 q;
			cursize += sizeof(q);
		}
		else if(kbrs.kbr[j].bufferType == 5){
			LMTQuatized8Vec3 q;
			cursize += sizeof(q);
		}
		else if(kbrs.kbr[j].bufferType == 6){
			LMTQuatFramev14 f;
			cursize += sizeof(f);
		}
		else if(kbrs.kbr[j].bufferType == 7){
			LMTQuatized32Quat q;
			cursize += sizeof(q);
		}
		else if(kbrs.kbr[j].bufferType == 9){
			LMTVec3Frame vec;
			cursize += sizeof(vec);
		}
		else if(kbrs.kbr[j].bufferType == 11){
			LMTXWQuat q;
			cursize += sizeof(q);
		}
		else if(kbrs.kbr[j].bufferType == 12){
			LMTYWQuat q;
			cursize += sizeof(q);
		}
		else if(kbrs.kbr[j].bufferType == 13){
			LMTZWQuat q;
			cursize += sizeof(q);
		}
		else if(kbrs.kbr[j].bufferType == 14){
			LMTQuatized11Quat q;
			cursize += sizeof(q);
		}
		else if(kbrs.kbr[j].bufferType == 15){
			LMTQuatized9Quat q;
			cursize += sizeof(q);
		}else {
			cursize +=1;
		}
	}
	}buffer<bgcolor=0xFFFF00>;
}